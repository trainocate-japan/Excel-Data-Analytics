{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ugUuE1cvO-aK"
      },
      "source": [
        "# 環境構築"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fZFmsWt_R4ll",
        "outputId": "b27b6a26-adbb-4fd5-d3cd-ca78eb3698a2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Collecting japanize-matplotlib\n",
            "  Downloading japanize-matplotlib-1.1.3.tar.gz (4.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.1/4.1 MB\u001b[0m \u001b[31m12.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from japanize-matplotlib) (3.7.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->japanize-matplotlib) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->japanize-matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->japanize-matplotlib) (4.51.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->japanize-matplotlib) (1.4.5)\n",
            "Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.10/dist-packages (from matplotlib->japanize-matplotlib) (1.25.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->japanize-matplotlib) (24.0)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->japanize-matplotlib) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->japanize-matplotlib) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->japanize-matplotlib) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib->japanize-matplotlib) (1.16.0)\n",
            "Building wheels for collected packages: japanize-matplotlib\n",
            "  Building wheel for japanize-matplotlib (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for japanize-matplotlib: filename=japanize_matplotlib-1.1.3-py3-none-any.whl size=4120257 sha256=0b00d71a5434c3debaaf3411efbaf5f79766986fc755d9b5bbce76186ce1c4f4\n",
            "  Stored in directory: /root/.cache/pip/wheels/61/7a/6b/df1f79be9c59862525070e157e62b08eab8ece27c1b68fbb94\n",
            "Successfully built japanize-matplotlib\n",
            "Installing collected packages: japanize-matplotlib\n",
            "Successfully installed japanize-matplotlib-1.1.3\n"
          ]
        }
      ],
      "source": [
        "!pip install japanize-matplotlib"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QwhY6kT1pDsJ"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import japanize_matplotlib\n",
        "import pandas as pd\n",
        "import scipy.stats as stats\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.metrics import r2_score, mean_absolute_error,mean_squared_error\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import LinearRegression"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sUCUMml9rMOi"
      },
      "outputs": [],
      "source": [
        "data = pd.read_excel('/content/drive/Othercomputers/マイ Mac/Documents/データサイエンス/bank_data.xlsx')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DDcQbq2nPnmQ"
      },
      "source": [
        "# データ分析とは\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kBxMUoufGAUT"
      },
      "source": [
        "\n",
        "## 1. データ分析とは\n",
        "データ分析とは収集した情報の整理、加工、取捨選択を経て分析するプロセスです。\n",
        "データサイエンティストに必要なスキル\n",
        "![data](https://www.insource-da.co.jp/common/img/column/210818a_1.png)\n",
        "皆さんは、データサイエンティストにはどのようなイメージがあるでしょうか。\n",
        "「プログラミングしながら、統計学を使って、画面に表示された大量のデータを\n",
        "分析する」......そういった光景をイメージする方も多いかと存じます。\n",
        "もちろんプログラミングをしてデータ分析を行うというのも、大事な工程の１つです。\n",
        "しかし、それだけではデータ活用はうまく進みません。\n",
        "「このデータから何が言えるのか分からない......」「このデータからどう問題解決に\n",
        "つなげればいいのか......」といったお悩みに繋がりがちです。\n",
        "これはなぜでしょうか。\n",
        "データを並べて分析する前に、「どんな問題を解決したいか」「問題を解決するのに\n",
        "どんなデータが必要か」など、なんのためにデータ分析を行うのか、目的がはっきり\n",
        "していないと、せっかくのデータがあっても、どうすればいいのかが分からなくなって\n",
        "しまうからです。本講座ではメインとなるデータサイエンス力に注力し講義をお伝えしますが、同じくらいビジネス力やデータの処理能力も重要ということを抑えてください。\n",
        "\n",
        "データ分析を行う理由は下記のとおりです。\n",
        "1. 問題の原因を究明したり、課題を達成したりするため\n",
        "2. 相手を説得するため\n",
        "3. 自分ん思考を裏付けるため\n",
        "\n",
        "データ分析を行うことで下記のメリットを得ることが出来る。\n",
        "1. 仕事をより深く理解し、遂行力が上がる\n",
        "2. 視点が多角化し、１つのデータから複数の視点を持つことが出来る\n",
        "3. 経験と勘に見が気がかかる。（どんなデータが必要なのかあたりを付ける勘のこと）\n",
        "\n",
        "\n",
        "## ３．データ分析のフレームワークPPDAC\n",
        "ではデータ分析を行う上でどのような手順で分析を進めて行けば良いでしょうか。\n",
        "おすすめの手順としてPPDAC というデータ分析のフレームワークがあります。\n",
        "こちらを使用するメリットは下記のとおりです\n",
        "\n",
        "- どこから手をつけたらいいかわからないときに手順が明確になる\n",
        "- 現在位置と次に何を行うべきか、分析の全体像と進捗が明確になる\n",
        "- 同じ枠組みの中で活動出来るので、メンバーの状況把握や共有がし易い\n",
        "- フレームワークのキーワードを分析の切り口として利用できる。\n",
        "\n",
        "PPDACサイクルとは、次の単語の頭文字をつなげたもので、海外や統計教育でもよく使われる統計的探究プロセスです。  \n",
        "  \n",
        "P(problem、問題)：問題の把握と明確化  \n",
        "P(plan、計画)：仮説の設定・調査分析の計画  \n",
        "D(data、データ収集)：データの収集・整理  \n",
        "A(analysis、分析)：データに基づく分析、処理  \n",
        "C(conclusion、結論)：分析結果の考察、結論  \n",
        "  \n",
        "2つのPとCの間に、D(データ収集)とA(分析)のプロセスがあるところに注目してください。明確な問題と計画の立案があってこそ、実際のデータ収集や分析を行うことができ、問題解決へ導くことができる。データ利活用を進めるにあたっての格好のフレームワークといえます。\n",
        "\n",
        "*あくまでフレームワークであり、必ずこの順番で進めないと行けないものではない\n",
        "* 本講座でははじめの段階でデータの収集ができているため、順番が入れ替わることがあります。\n",
        "\n",
        "## ４．研修テーマの説明\n",
        "ある銀行で営業支援を行うデータサイエンティストです。\n",
        "手元にはデータは過去の定期預金加入のキャンペーンの営業データがあります。同一キャンペーンの営業データから一部をランダムに収集しています。\n",
        "データには大きく３種類のデータがあります。\n",
        "- 顧客情報→顧客の年齢、結婚状況、仕事\n",
        "- 営業情報→どのようにアプローチしたか、いつアプローチしたか、どの営業マンがアプローチしたか\n",
        "- 成約情報→顧客が定期預金口座の成約をしたか否か、成約をした場合の売上（預金金額の10%が売上）\n",
        "\n",
        "\n",
        "営業を行うには限りがあるため、データ分析を行い、効率的に営業が出来るよう支援を行いたい。"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_Ys0Yq43GEcN"
      },
      "source": [
        "\n",
        "問題：データを活用した効率的な営業を行う\n",
        "計画\n",
        "- どんな顧客にアプローチすると成約率を高められるか①\n",
        "- どのような顧客が講座にたくさん貯金してくれるか(売上の高い顧客の要因)②\n",
        "- 営業マンの力量に差があるかどうか③\n",
        "\n",
        "実務であればこの段階でどのような分析を行うのか方針を決めます。今回はまだ分析手法を学んでいないため、割愛します。\n",
        "\n",
        "\n",
        "分析手法の決定のフレームワーク\n",
        "## イシューツリー\n",
        "![data](https://assets.monodukuri.com/article/uploads/020202D.jpg)\n",
        "\n",
        "イシューツリーを使用することによって、必要なデータや、データ処理方法を効率化することができます。  \n",
        "例えば真ん中の「販売力が弱くなった」という仮説に注目します。　　  \n",
        "この販売力が弱くなったことを証明するためにはどのようなデータが必要でしょうか、またどのような分析をしたら良いでしょうか？\n",
        "\n",
        "例えば\n",
        "営業の知識テスト結果  \n",
        "過去の営業データ  \n",
        "現在の営業データ  \n",
        "商談時間のデータ  \n",
        "\n",
        "\n",
        "これらのようなデータを用意し、検定や知識テストの結果と営業データに相関関係があるのかなどの分析を行うことによって、販売力が弱くなってしまったことを証明することができ、営業マンの育成に注力することにより、売上の向上が期待出来るかもしれません。\n",
        "  \n",
        "\n",
        "このように大枠の問題から課題を細分化し、分析の方向性の決定を行います。ビジネスの理解やビジネス力が重要になります。"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 347
        },
        "id": "k1ao_IeSXP7z",
        "outputId": "8be915c4-b491-4edc-bb14-72ef3b6b5b5d"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 11165,\n  \"fields\": [\n    {\n      \"column\": \"\\u52171\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3222.3361866819546,\n        \"min\": 0.0,\n        \"max\": 11161.0,\n        \"num_unique_values\": 11162,\n        \"samples\": [\n          5527.0,\n          4541.0,\n          1964.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5e74\\u9f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.913369192215526,\n        \"min\": 18.0,\n        \"max\": 95.0,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          54.0,\n          47.0,\n          30.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u4ed5\\u4e8b\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"self-employed\",\n          \"unknown\",\n          \"admin.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u7d50\\u5a5a\\u72b6\\u6cc1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"married\",\n          \"single\",\n          \"divorced\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6700\\u7d42\\u5b66\\u6b74\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"tertiary\",\n          \"unknown\",\n          \"secondary\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u50b5\\u52d9\\u4e0d\\u5c65\\u884c\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"yes\",\n          \"no\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9280\\u884c\\u6b8b\\u9ad8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3225.413325946151,\n        \"min\": -6847.0,\n        \"max\": 81204.0,\n        \"num_unique_values\": 3805,\n        \"samples\": [\n          3026.0,\n          1792.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6301\\u3061\\u5bb6\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u30ed\\u30fc\\u30f3\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"yes\",\n          \"no\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5ba2\\u3078\\u6700\\u5f8c\\u306b\\u9023\\u7d61\\u3057\\u305f\\u969b\\u306e\\u9023\\u7d61\\u624b\\u6bb5\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"unknown\",\n          \"cellular\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.420739541006451,\n        \"min\": 1.0,\n        \"max\": 31.0,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          10.0,\n          27.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"apr\",\n          \"mar\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9023\\u7d61\\u3067\\u63a5\\u89e6\\u3057\\u305f\\u6642\\u9593\\uff08\\u79d2\\u6570\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 347.12838571630584,\n        \"min\": 2.0,\n        \"max\": 3881.0,\n        \"num_unique_values\": 1428,\n        \"samples\": [\n          597.0,\n          346.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pdays\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.75828197197696,\n        \"min\": -1.0,\n        \"max\": 854.0,\n        \"num_unique_values\": 472,\n        \"samples\": [\n          294.0,\n          148.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"previous\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2920072186705047,\n        \"min\": 0.0,\n        \"max\": 58.0,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          30.0,\n          14.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6210\\u7d04\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u62c5\\u5f53\\u55b6\\u696d\\u30de\\u30f3\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"E\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u58f2\\u4e0a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.692649866909434,\n        \"min\": 0.0,\n        \"max\": 812.04,\n        \"num_unique_values\": 2256,\n        \"samples\": [\n          4.36,\n          75.85000000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "data"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-5c4bbff9-0b3e-4a2e-a938-bd054500eb81\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>列1</th>\n",
              "      <th>年齢</th>\n",
              "      <th>仕事</th>\n",
              "      <th>結婚状況</th>\n",
              "      <th>最終学歴</th>\n",
              "      <th>債務不履行の有無</th>\n",
              "      <th>銀行残高</th>\n",
              "      <th>持ち家の有無</th>\n",
              "      <th>ローンの有無</th>\n",
              "      <th>客へ最後に連絡した際の連絡手段</th>\n",
              "      <th>day</th>\n",
              "      <th>month</th>\n",
              "      <th>連絡で接触した時間（秒数</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>成約の有無</th>\n",
              "      <th>担当営業マン</th>\n",
              "      <th>売上</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>2343.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>1042.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>B</td>\n",
              "      <td>23.43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>45.0</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>1467.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>E</td>\n",
              "      <td>0.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>technician</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>1270.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>1389.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>A</td>\n",
              "      <td>12.70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>2476.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>579.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>D</td>\n",
              "      <td>24.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>tertiary</td>\n",
              "      <td>no</td>\n",
              "      <td>184.0</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>673.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>E</td>\n",
              "      <td>1.84</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5c4bbff9-0b3e-4a2e-a938-bd054500eb81')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5c4bbff9-0b3e-4a2e-a938-bd054500eb81 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5c4bbff9-0b3e-4a2e-a938-bd054500eb81');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4d562c12-313c-4dad-a7c8-8f4658ef2fee\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4d562c12-313c-4dad-a7c8-8f4658ef2fee')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4d562c12-313c-4dad-a7c8-8f4658ef2fee button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "    列1    年齢          仕事     結婚状況       最終学歴 債務不履行の有無    銀行残高 持ち家の有無 ローンの有無  \\\n",
              "0  0.0  59.0      admin.  married  secondary       no  2343.0    yes     no   \n",
              "1  1.0  56.0      admin.  married  secondary       no    45.0     no     no   \n",
              "2  2.0  41.0  technician  married  secondary       no  1270.0    yes     no   \n",
              "3  3.0  55.0    services  married  secondary       no  2476.0    yes     no   \n",
              "4  4.0  54.0      admin.  married   tertiary       no   184.0     no     no   \n",
              "\n",
              "  客へ最後に連絡した際の連絡手段  day month  連絡で接触した時間（秒数  pdays  previous 成約の有無 担当営業マン  \\\n",
              "0         unknown  5.0   may        1042.0   -1.0       0.0   yes      B   \n",
              "1         unknown  5.0   may        1467.0   -1.0       0.0   yes      E   \n",
              "2         unknown  5.0   may        1389.0   -1.0       0.0   yes      A   \n",
              "3         unknown  5.0   may         579.0   -1.0       0.0   yes      D   \n",
              "4         unknown  5.0   may         673.0   -1.0       0.0   yes      E   \n",
              "\n",
              "      売上  \n",
              "0  23.43  \n",
              "1   0.45  \n",
              "2  12.70  \n",
              "3  24.76  \n",
              "4   1.84  "
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#不要列の削除\n",
        "data.drop(['Unnamed: 18','Unnamed: 19','Unnamed: 20'], axis=1, inplace=True)\n",
        "data.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "05lF8ENdGLZI"
      },
      "source": [
        "\n",
        "では、次のステップに進みます。\n",
        "ここではデータの収集収集と整理を行い、収集されたデータに対しての理解を深めます。  \n",
        "グラフ化などは一部、分析と重複する部分もありますがデータの理解という文脈でも使用できます。\n",
        "\n",
        "\n",
        "## 効率の良いデータ収集\n",
        "本講座ではデモデータがありますが、実務においてはじめからデータが用意されていることはそう多くはありません、データ収集の考え方として、集めやすいデータから集めるといった考え方があります。  \n",
        "前提として、データは大きく一次データと二次データがあります。\n",
        "\n",
        "- 一次データ：目的に沿って新たに収集されるデータ、収集には時間とコストがかかる。例えば分析の目的に合わせたアンケートデータなど  \n",
        "\n",
        "- 二次データ:他の目的によってすでに収集済みのデータ。具体的には通常業務で収集されている、販売データや顧客データ、官公庁などの統計データなどがあります。  \n",
        "必ずしも目的にあったデータではないため、加工や個人情報が含まれるデータを扱う際には注意が必要です。  \n",
        "\n",
        "データはやみくもに収集してはいけません。先程紹介したイシューツリーを使用して、大枠の問題を頂点として、考えられる要因や仮説、それらを検証するデータと展開を行います。  \n",
        "\n",
        "そして、データがしぼられてきたら、二次データのようなすぐに収集出来るデータを優先して集めます。  \n",
        "データソースは内部だけではなく、外部のデータも候補に入れます。  \n",
        "そして全てのデータが集まらなくても、集まったで０他だけで出来る仮説の検証を始めます。\n",
        "\n",
        "\n",
        "## データ処理する\n",
        "ここで伝える処理というのは検定や分析ではありません。\n",
        "2次データを収集し分析をしようとすると、そもそものデータが分析の目的で集められているわけではないため、関係のないデータが混在しています。  \n",
        "このようなデータ取捨選択する必要があります。\n",
        "\n",
        "ポイント\n",
        "- 必要最低限必要なデータより余裕をもたせる\n",
        "検証・分析に必要なデータに絞り込むのではなく、幅をもたせます。分析や検証を行っていくと違う切り口で分析をしたりすることがあります。例えばあるAという商品を分析する時、Aの販売データだけではなく、同じ系列や競合のデータがあることによってより多角な検証を行うことが可能になります。\n",
        "\n",
        "- 必要に応じて異常値を取り除く\n",
        "明らかに他のデータより値が大きかったりすることがあります。このような異常値のデータは分析や検証を行う上でマイナスの要因となってします可能性があります。  \n",
        "例えば、自然災害などの発生により集客ができなかったなど、このように突然発生するインシデントにより異常値が入っていたり、入力ミスなどで異常値が含まれることがあります。  \n",
        "異常値に対する分析が必要なこともありますので適宜判断を行う必要があります。散布図などにプロットすることによって異常値を見つけやすくなります。\n",
        "また、外れ値除去の方法として３シグマ法等といった手法もあります。こちらはより発展的な内容ですので名前だけ紹介します。\n",
        "\n",
        "\n",
        "## データの理解をする\n",
        "データの取捨選択と平行しながらデータの理解を進めます。  \n",
        "実際に収集したデータがどのようなデータなのかわからないと、分析や検証を行うこともできません。データは必要に応じてグラフ化をしたり、ピボットテーブルを作成することによってより、データに対する理解を深めることができます。  \n",
        "結果によっては新たな仮説を立てることもあります。  \n",
        "では、本講座で使用する銀行のデータを見てみましょう。"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wFIFtr1RMeP_"
      },
      "source": [
        "## データを理解する【実装】"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TltBrCAalcT8"
      },
      "source": [
        "### データの全体像の理解"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XbG5hTVxrlU6",
        "outputId": "817223f6-bc51-4243-803e-9b450e2ff50e"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 11165,\n  \"fields\": [\n    {\n      \"column\": \"\\u52171\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3222.3361866819546,\n        \"min\": 0.0,\n        \"max\": 11161.0,\n        \"num_unique_values\": 11162,\n        \"samples\": [\n          5527.0,\n          4541.0,\n          1964.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5e74\\u9f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.913369192215526,\n        \"min\": 18.0,\n        \"max\": 95.0,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          54.0,\n          47.0,\n          30.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u4ed5\\u4e8b\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"self-employed\",\n          \"unknown\",\n          \"admin.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u7d50\\u5a5a\\u72b6\\u6cc1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"married\",\n          \"single\",\n          \"divorced\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6700\\u7d42\\u5b66\\u6b74\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"tertiary\",\n          \"unknown\",\n          \"secondary\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u50b5\\u52d9\\u4e0d\\u5c65\\u884c\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"yes\",\n          \"no\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9280\\u884c\\u6b8b\\u9ad8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3225.413325946151,\n        \"min\": -6847.0,\n        \"max\": 81204.0,\n        \"num_unique_values\": 3805,\n        \"samples\": [\n          3026.0,\n          1792.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6301\\u3061\\u5bb6\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u30ed\\u30fc\\u30f3\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"yes\",\n          \"no\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5ba2\\u3078\\u6700\\u5f8c\\u306b\\u9023\\u7d61\\u3057\\u305f\\u969b\\u306e\\u9023\\u7d61\\u624b\\u6bb5\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"unknown\",\n          \"cellular\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.420739541006451,\n        \"min\": 1.0,\n        \"max\": 31.0,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          10.0,\n          27.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"apr\",\n          \"mar\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9023\\u7d61\\u3067\\u63a5\\u89e6\\u3057\\u305f\\u6642\\u9593\\uff08\\u79d2\\u6570\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 347.12838571630584,\n        \"min\": 2.0,\n        \"max\": 3881.0,\n        \"num_unique_values\": 1428,\n        \"samples\": [\n          597.0,\n          346.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pdays\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.75828197197696,\n        \"min\": -1.0,\n        \"max\": 854.0,\n        \"num_unique_values\": 472,\n        \"samples\": [\n          294.0,\n          148.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"previous\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2920072186705047,\n        \"min\": 0.0,\n        \"max\": 58.0,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          30.0,\n          14.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6210\\u7d04\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u62c5\\u5f53\\u55b6\\u696d\\u30de\\u30f3\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"E\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u58f2\\u4e0a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.692649866909434,\n        \"min\": 0.0,\n        \"max\": 812.04,\n        \"num_unique_values\": 2256,\n        \"samples\": [\n          4.36,\n          75.85000000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "data"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-f8738a7f-a533-494a-b102-58d0b2f02bd0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>列1</th>\n",
              "      <th>年齢</th>\n",
              "      <th>仕事</th>\n",
              "      <th>結婚状況</th>\n",
              "      <th>最終学歴</th>\n",
              "      <th>債務不履行の有無</th>\n",
              "      <th>銀行残高</th>\n",
              "      <th>持ち家の有無</th>\n",
              "      <th>ローンの有無</th>\n",
              "      <th>客へ最後に連絡した際の連絡手段</th>\n",
              "      <th>day</th>\n",
              "      <th>month</th>\n",
              "      <th>連絡で接触した時間（秒数</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>成約の有無</th>\n",
              "      <th>担当営業マン</th>\n",
              "      <th>売上</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>2343.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>1042.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>B</td>\n",
              "      <td>23.43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>45.0</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>1467.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>E</td>\n",
              "      <td>0.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>technician</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>1270.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>1389.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>A</td>\n",
              "      <td>12.70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>2476.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>579.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>D</td>\n",
              "      <td>24.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>tertiary</td>\n",
              "      <td>no</td>\n",
              "      <td>184.0</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>673.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>E</td>\n",
              "      <td>1.84</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f8738a7f-a533-494a-b102-58d0b2f02bd0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f8738a7f-a533-494a-b102-58d0b2f02bd0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f8738a7f-a533-494a-b102-58d0b2f02bd0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c54e1371-81dd-4839-90de-0cfde11502ef\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c54e1371-81dd-4839-90de-0cfde11502ef')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c54e1371-81dd-4839-90de-0cfde11502ef button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "    列1    年齢          仕事     結婚状況       最終学歴 債務不履行の有無    銀行残高 持ち家の有無 ローンの有無  \\\n",
              "0  0.0  59.0      admin.  married  secondary       no  2343.0    yes     no   \n",
              "1  1.0  56.0      admin.  married  secondary       no    45.0     no     no   \n",
              "2  2.0  41.0  technician  married  secondary       no  1270.0    yes     no   \n",
              "3  3.0  55.0    services  married  secondary       no  2476.0    yes     no   \n",
              "4  4.0  54.0      admin.  married   tertiary       no   184.0     no     no   \n",
              "\n",
              "  客へ最後に連絡した際の連絡手段  day month  連絡で接触した時間（秒数  pdays  previous 成約の有無 担当営業マン  \\\n",
              "0         unknown  5.0   may        1042.0   -1.0       0.0   yes      B   \n",
              "1         unknown  5.0   may        1467.0   -1.0       0.0   yes      E   \n",
              "2         unknown  5.0   may        1389.0   -1.0       0.0   yes      A   \n",
              "3         unknown  5.0   may         579.0   -1.0       0.0   yes      D   \n",
              "4         unknown  5.0   may         673.0   -1.0       0.0   yes      E   \n",
              "\n",
              "      売上  \n",
              "0  23.43  \n",
              "1   0.45  \n",
              "2  12.70  \n",
              "3  24.76  \n",
              "4   1.84  "
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ybiVIh14lLHv",
        "outputId": "18dbe3ee-2a28-4629-cfd3-9595d5e340fa"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(11165, 18)"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data.shape\n",
        "#11165 サンプルと18列あることがわかる"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ewAoxzQwr68G",
        "outputId": "14bafeb3-c881-4182-db82-479fb6e9bc33"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"\\u52171\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4022.6198361603674,\n        \"min\": 0.0,\n        \"max\": 11162.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          11162.0,\n          5580.5,\n          8370.75\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5e74\\u9f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3931.9910823606933,\n        \"min\": 11.913369192215526,\n        \"max\": 11162.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          41.231947679627304,\n          39.0,\n          11162.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9280\\u884c\\u6b8b\\u9ad8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28556.87170826913,\n        \"min\": -6847.0,\n        \"max\": 81204.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1528.5385235620856,\n          550.0,\n          11162.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3941.2684170092043,\n        \"min\": 1.0,\n        \"max\": 11162.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15.658036194230425,\n          15.0,\n          11162.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9023\\u7d61\\u3067\\u63a5\\u89e6\\u3057\\u305f\\u6642\\u9593\\uff08\\u79d2\\u6570\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3883.5837945353724,\n        \"min\": 2.0,\n        \"max\": 11162.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          371.99381831213043,\n          255.0,\n          11162.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pdays\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3905.092718695694,\n        \"min\": -1.0,\n        \"max\": 11162.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          11162.0,\n          51.33040673714388,\n          854.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"previous\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3943.27625599434,\n        \"min\": 0.0,\n        \"max\": 11162.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          11162.0,\n          0.8325568894463358,\n          58.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u58f2\\u4e0a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3914.5088151670425,\n        \"min\": 0.0,\n        \"max\": 11165.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          11165.0,\n          8.622818629646215,\n          812.04\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-285a0a1c-8be0-4e98-9af6-6562350fe650\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>列1</th>\n",
              "      <th>年齢</th>\n",
              "      <th>銀行残高</th>\n",
              "      <th>day</th>\n",
              "      <th>連絡で接触した時間（秒数</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>売上</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>11162.000000</td>\n",
              "      <td>11162.000000</td>\n",
              "      <td>11162.000000</td>\n",
              "      <td>11162.000000</td>\n",
              "      <td>11162.000000</td>\n",
              "      <td>11162.000000</td>\n",
              "      <td>11162.000000</td>\n",
              "      <td>11165.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>5580.500000</td>\n",
              "      <td>41.231948</td>\n",
              "      <td>1528.538524</td>\n",
              "      <td>15.658036</td>\n",
              "      <td>371.993818</td>\n",
              "      <td>51.330407</td>\n",
              "      <td>0.832557</td>\n",
              "      <td>8.622819</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3222.336187</td>\n",
              "      <td>11.913369</td>\n",
              "      <td>3225.413326</td>\n",
              "      <td>8.420740</td>\n",
              "      <td>347.128386</td>\n",
              "      <td>108.758282</td>\n",
              "      <td>2.292007</td>\n",
              "      <td>25.692650</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>18.000000</td>\n",
              "      <td>-6847.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2790.250000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>122.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>138.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>5580.500000</td>\n",
              "      <td>39.000000</td>\n",
              "      <td>550.000000</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>255.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8370.750000</td>\n",
              "      <td>49.000000</td>\n",
              "      <td>1708.000000</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>496.000000</td>\n",
              "      <td>20.750000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>6.550000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>11161.000000</td>\n",
              "      <td>95.000000</td>\n",
              "      <td>81204.000000</td>\n",
              "      <td>31.000000</td>\n",
              "      <td>3881.000000</td>\n",
              "      <td>854.000000</td>\n",
              "      <td>58.000000</td>\n",
              "      <td>812.040000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-285a0a1c-8be0-4e98-9af6-6562350fe650')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-285a0a1c-8be0-4e98-9af6-6562350fe650 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-285a0a1c-8be0-4e98-9af6-6562350fe650');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0c0930f3-fff5-4810-91bb-34d6c4eca8e6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0c0930f3-fff5-4810-91bb-34d6c4eca8e6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0c0930f3-fff5-4810-91bb-34d6c4eca8e6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "                 列1            年齢          銀行残高           day  連絡で接触した時間（秒数  \\\n",
              "count  11162.000000  11162.000000  11162.000000  11162.000000  11162.000000   \n",
              "mean    5580.500000     41.231948   1528.538524     15.658036    371.993818   \n",
              "std     3222.336187     11.913369   3225.413326      8.420740    347.128386   \n",
              "min        0.000000     18.000000  -6847.000000      1.000000      2.000000   \n",
              "25%     2790.250000     32.000000    122.000000      8.000000    138.000000   \n",
              "50%     5580.500000     39.000000    550.000000     15.000000    255.000000   \n",
              "75%     8370.750000     49.000000   1708.000000     22.000000    496.000000   \n",
              "max    11161.000000     95.000000  81204.000000     31.000000   3881.000000   \n",
              "\n",
              "              pdays      previous            売上  \n",
              "count  11162.000000  11162.000000  11165.000000  \n",
              "mean      51.330407      0.832557      8.622819  \n",
              "std      108.758282      2.292007     25.692650  \n",
              "min       -1.000000      0.000000      0.000000  \n",
              "25%       -1.000000      0.000000      0.000000  \n",
              "50%       -1.000000      0.000000      0.000000  \n",
              "75%       20.750000      1.000000      6.550000  \n",
              "max      854.000000     58.000000    812.040000  "
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 数値データの統計情報\n",
        "data.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nlff1Hh6QAYk",
        "outputId": "d6948d6b-95e5-4b8a-f9c2-8ed795f61d59"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 2000x1500 with 9 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# 文字列のデータの全体像を理解する\n",
        "cat_columns = ['仕事', '結婚状況', '最終学歴', '債務不履行の有無', '持ち家の有無', 'ローンの有無', '客へ最後に連絡した際の連絡手段','成約の有無']\n",
        "\n",
        "fig, axs = plt.subplots(3, 3, sharex=False, sharey=False, figsize=(20, 15))\n",
        "\n",
        "counter = 0\n",
        "for cat_column in cat_columns:\n",
        "    value_counts = data[cat_column].value_counts()\n",
        "\n",
        "    trace_x = counter // 3\n",
        "    trace_y = counter % 3\n",
        "    x_pos = np.arange(0, len(value_counts))\n",
        "\n",
        "    axs[trace_x, trace_y].bar(x_pos, value_counts.values, tick_label = value_counts.index)\n",
        "\n",
        "    axs[trace_x, trace_y].set_title(cat_column)\n",
        "\n",
        "    for tick in axs[trace_x, trace_y].get_xticklabels():\n",
        "        tick.set_rotation(90)\n",
        "\n",
        "    counter += 1\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yshfLnttxz9i"
      },
      "source": [
        "例）データから分かること\n",
        "- リストの平均年齢41歳\n",
        "- リストの平均残高1528ドル\n",
        "- 成約数、不成約の数はあまり変わらない\n",
        "- 11165 サンプルと18列あることがわかる\n",
        "\n",
        "演習）受講者に他にどのようなことがわかるか書き出してもらう 5分\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PNE2x_m6SVWF"
      },
      "source": [
        "### 個別の列の可視化"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "cellView": "form",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "id": "idTBkmLir41E",
        "outputId": "c680a064-f7fb-4f51-bea7-ed0ac65cf2f9"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# @title balance\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "data['銀行残高'].plot(kind='hist', bins=20, title='銀行残高')\n",
        "plt.gca().spines[['top', 'right',]].set_visible(False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "cellView": "form",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "id": "HML6kKidrx5W",
        "outputId": "45b88bf2-d05d-4ade-9eef-3b56a23434f4"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# @title age\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "data['年齢'].plot(kind='hist', bins=20, title='age')\n",
        "plt.gca().spines[['top', 'right',]].set_visible(False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8jDX_PcXuh7G",
        "outputId": "fd0ce8ca-8cc6-483b-a86b-6f5fe82181e5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "成約の有無\n",
              "no     5873\n",
              "yes    5289\n",
              "Name: count, dtype: int64"
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# prompt: data のdepositの\n",
        "\n",
        "data['成約の有無'].value_counts()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3pJe58EYTK41"
      },
      "source": [
        "## データとデータから新しい情報を得る\n",
        "それぞれのデータを確認し、データの大枠の理解が進みました。次に複数のデータをまとめたり、分解をします。\n",
        "様々な視点でデータを確認することによって、新しい発見をする可能性が高まります。\n",
        "集計・可視化を上手く使用すると 2 変数の関連性を理解することが可能です。\n",
        "\n",
        "### データの種類\n",
        "2 変数の関連性を正しく理解するにはデータの種類と尺度について理解している必要があります。ここまで何気なくデータを扱ってみましたが、データにはその種類に明確な区分が存在します。まずは、全体像を以下の図から確認します。\n",
        "\n",
        "![data](https://life-analyze24.com/wp-content/uploads/2021/04/datasyurui-768x457.png)\n",
        "\n",
        "データは大きく、質的データと量的データに区別することができます。質的データとは数値に直接置き換えることができないデータを指します。性別（男女）、旅行の目的（ビジネス・旅行 etc...）がそれに当たります。\n",
        "\n",
        "質的データはさらにその尺度の種類で 2 つに分けることができます。1 つは性別のように順序に意味がないものです。このような尺度を名義尺度と呼びます。もう 1 つが食べログの満足度(0,1,2)\n",
        "のように順序に意味があるものです。この様な尺度を順位尺度と呼びます。\n",
        "\n",
        "これらは見分けるのが難しいのですが、コツとして数値に仮に置き換えて考えてみると良いです。例えば、性別において 男性 : 1 、女性 : 0 と置き換えて考えます。数値として扱うとこの 2 つには差が存在しますが、その差に厳密な意味は存在しません。それに対して満足度は、満足度を 満足 ： １、普通 : 2、不満足 : 0 と置き換えた場合、この数値の差には意味が存在することが分かります。つまり 0 ~ 2 の数値には順序の概念があります。\n",
        "\n",
        "質的データの対になるものに量的データがあります。量的データとは年齢や売上などのそのまま数値で取り扱えるデータです。量的データは数字の変化が連続的であることが特徴です。例えば、先程挙げた満足度も、1 ~ 5 で評価してください。とアンケートを取った場合には、量的データとも捉えることができます。本コースでは満足度を含めた評価点はすべて量的データとして取り扱います。\n",
        "\n",
        "量的データも尺度によって 2 つに分けることができます。１ つは年齢のように、数値の間隔に意味があるものです。この様な尺度を間隔尺度と呼びます。もう １ つが売上のように比にも意味があり、単純に 〇〇 倍のように表現できるものです。この様な尺度を比例尺度と呼びます。\n",
        "\n",
        "これは 0 が本当になにもないことを指しているかで見分けます。年齢が 0 は、本当になにもないことを指していませんが、売上が 0 は本当になにもないことを示しています。\n",
        "\n",
        "\n",
        "先程挙げたデータの種類の組み合わせによって、関連性の把握する方法が異なります。\n",
        "![ddd](https://public-psychologist.systems/wp/wp-content/uploads/2021/05/sihyou-1024x299.png)\n",
        "*質的変数×量的変数→平均値の比較\n",
        "\n",
        "実際に今回のデータに対しても、クロス集計や散布図を用いて関係性の把握を行いましょう。\n",
        "\n",
        "\n",
        "### 成約の有無と他の列の関係性を確認する"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "DnzV3yWCqoQL",
        "outputId": "7eb7f08d-f848-427e-bb3b-c894484994ff"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# prompt: 年齢と銀行残高の散布図を描画\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "data.plot.scatter(x='年齢', y='銀行残高')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 456
        },
        "id": "Aexkf1IcqqNJ",
        "outputId": "f99ca764-4fef-419c-a38e-6384e28497bc"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"\\u4ed5\\u4e8b\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"unemployed\",\n          \"technician\",\n          \"admin.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 451,\n        \"min\": 36,\n        \"max\": 1265,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          155,\n          983,\n          703\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 374,\n        \"min\": 34,\n        \"max\": 1301,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          202,\n          840,\n          631\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-a9584e58-69f7-4b2a-847c-6356d044bdcf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>成約の有無</th>\n",
              "      <th>no</th>\n",
              "      <th>yes</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>仕事</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>admin.</th>\n",
              "      <td>703</td>\n",
              "      <td>631</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>blue-collar</th>\n",
              "      <td>1236</td>\n",
              "      <td>708</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>entrepreneur</th>\n",
              "      <td>205</td>\n",
              "      <td>123</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>housemaid</th>\n",
              "      <td>165</td>\n",
              "      <td>109</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>management</th>\n",
              "      <td>1265</td>\n",
              "      <td>1301</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>retired</th>\n",
              "      <td>262</td>\n",
              "      <td>516</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>self-employed</th>\n",
              "      <td>218</td>\n",
              "      <td>187</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>services</th>\n",
              "      <td>554</td>\n",
              "      <td>369</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>student</th>\n",
              "      <td>91</td>\n",
              "      <td>269</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>technician</th>\n",
              "      <td>983</td>\n",
              "      <td>840</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unemployed</th>\n",
              "      <td>155</td>\n",
              "      <td>202</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unknown</th>\n",
              "      <td>36</td>\n",
              "      <td>34</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9584e58-69f7-4b2a-847c-6356d044bdcf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a9584e58-69f7-4b2a-847c-6356d044bdcf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a9584e58-69f7-4b2a-847c-6356d044bdcf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c4b8b35f-2420-4835-b7f0-a43989456948\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c4b8b35f-2420-4835-b7f0-a43989456948')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c4b8b35f-2420-4835-b7f0-a43989456948 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "成約の有無            no   yes\n",
              "仕事                       \n",
              "admin.          703   631\n",
              "blue-collar    1236   708\n",
              "entrepreneur    205   123\n",
              "housemaid       165   109\n",
              "management     1265  1301\n",
              "retired         262   516\n",
              "self-employed   218   187\n",
              "services        554   369\n",
              "student          91   269\n",
              "technician      983   840\n",
              "unemployed      155   202\n",
              "unknown          36    34"
            ]
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# prompt: #仕事と and 成約の有無のクロス集計表を作成\n",
        "\n",
        "import pandas as pd\n",
        "pd.crosstab(data['仕事'], data['成約の有無'])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 565
        },
        "id": "NpWvMg28TRGy",
        "outputId": "8ab9c190-0ab4-4e42-af37-0ec9af526ab9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Axes: title={'center': '仕事 and 成約'}, xlabel='仕事'>"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "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",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#仕事 and 成約の可視化\n",
        "j_df = pd.DataFrame()\n",
        "\n",
        "j_df['yes'] = data[data['成約の有無']== 'yes'][\"仕事\"].value_counts()\n",
        "j_df['no'] = data[data['成約の有無'] == 'no'][\"仕事\"].value_counts()\n",
        "\n",
        "j_df.plot.bar(title = '仕事 and 成約')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 174
        },
        "id": "kvIonwDHq6gs",
        "outputId": "d886d93a-f637-4d82-d83c-d1bd295adde4"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"\\u7d50\\u5a5a\\u72b6\\u6cc1\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"divorced\",\n          \"married\",\n          \"single\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1493,\n        \"min\": 671,\n        \"max\": 3596,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          671,\n          3596,\n          1606\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1074,\n        \"min\": 622,\n        \"max\": 2755,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          622,\n          2755,\n          1912\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-10f7c83c-386d-44f6-b1b0-8f1d9a2af924\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>成約の有無</th>\n",
              "      <th>no</th>\n",
              "      <th>yes</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>結婚状況</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>divorced</th>\n",
              "      <td>671</td>\n",
              "      <td>622</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>married</th>\n",
              "      <td>3596</td>\n",
              "      <td>2755</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>single</th>\n",
              "      <td>1606</td>\n",
              "      <td>1912</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-10f7c83c-386d-44f6-b1b0-8f1d9a2af924')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-10f7c83c-386d-44f6-b1b0-8f1d9a2af924 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-10f7c83c-386d-44f6-b1b0-8f1d9a2af924');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f70959fc-bd48-434a-ae77-cbb4079cb20b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f70959fc-bd48-434a-ae77-cbb4079cb20b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f70959fc-bd48-434a-ae77-cbb4079cb20b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "成約の有無       no   yes\n",
              "結婚状況                \n",
              "divorced   671   622\n",
              "married   3596  2755\n",
              "single    1606  1912"
            ]
          },
          "execution_count": 15,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# prompt: 結婚状況と成約の有無のクロス集計\n",
        "\n",
        "import pandas as pd\n",
        "pd.crosstab(data['結婚状況'], data['成約の有無'])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 531
        },
        "id": "e8c8YCCNTRDp",
        "outputId": "449ba1bd-c0e2-4efb-8d85-db7ef157c08f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Axes: title={'center': '結婚状況 and 成約'}, xlabel='結婚状況'>"
            ]
          },
          "execution_count": 16,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjAAAAHwCAYAAAC48VVGAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABL50lEQVR4nO3deVwVdf///+dhdUFQFFEOIK6pmHpZppVLYYgmtrhcWpZGqVlqXpLmUm4tmuVyWbZ4pZmVbdqimWkq1WV+UkvqcsdcEDioQCrHFeQw3z/8cX6dQBMDDwOP++02t5vznvfMec25uOLJvN8zYzEMwxAAAICJeLi7AAAAgOIiwAAAANMhwAAAANMhwAAAANMhwAAAANMhwAAAANMhwAAAANMhwAAmlJ+fX2R7Xl6eTp06dY2rwZU4d+6cLly4UKx9HA5HKVUDmB8BBjCZH374QTfffHORIea7775T27ZtL7v/sWPHNH369L/8nPT0dP3666+X3D5y5EhNmTLFpe3s2bNq2rSpbDabzp49q9OnTxe5744dO/THZ2ieO3dOp0+fvuRSHp63effdd+u5556TJP3yyy+aPXv2ZfsfP35c9erV0759+1zaV6xYoddff73U6gTMggADmMzrr7+um266SR4eV/d/3507d2rp0qUubd98843mz5+vMWPG6N5771VYWJgiIiI0bNgw/f7770Ue59SpUzpz5oxLW35+vpKSknThwgUNHjxYo0aNKnK/22+/Xf3791dOTo4kqWPHjqpWrdoll8OHD1/VuZakd955RxaL5ar3r1WrljIzMyVdDHrTpk3TtGnTLtn/5ZdfVosWLdSkSRPl5eU525ctW6YdO3ZcdR1AeUGAAUzi6NGjSkpK0po1a/TMM89owYIFstlsysnJ0fnz53X+/HlduHBBhmE418+fP+8MCQX27dunJk2auLQNHTpUP//8s+rVq6eaNWuqXbt2On36tDZv3qyaNWu69M3KyrqiesePH68lS5boxx9/dGmvVq2a1q5dqw0bNui+++5zDpP85z//0blz51yWK/2ssiQvL8/l+y9YatasqbS0NKWlpalevXqaNWuWvL29lZaWphMnTjj3X7lypdauXauFCxfq9ddf17fffqvIyEjl5OTIMAx9++236tixo/Ly8lwWoKLxcncBAK5Mnz59lJaWpueee05paWkaNWqU2rRpo8jISGVnZ7v0rVy5svPf9erVU3Jyso4cOaJdu3YpISFBnp6eWr9+vSTplltukSQNGzZM7du319q1azVlyhRlZGQ4jxEcHCxvb2+99tprWrZsmb777ru/rLdly5a67777tHPnTt18880u22644QatWrVKU6ZMcc4L8fb2VqVKlVz6mfEX84gRI7RgwYJLbv/6669d1idPnqxHHnnEuc/KlSu1aNEi/ec//1FoaKhiY2M1ePBg+fr6avPmzUpPT9eAAQM0YMAAl+Ps2bNHTZs2LfkTAsooAgxgEh999JE6d+6s0NBQDRs2TNOmTVPbtm118uRJZ5/169drxIgR2rt3b6H9t23bpqlTp2r37t2yWq0aP368tm3bJpvNJknq3Lmzc4gkJydH7du3l5fXxf9EfPnll7r++ut111136V//+pfL3Bibzeaco3L27FlJF68WeXl56fnnn5enp6cyMzMVFBTk7OPj4+MMS+VR//799eqrr7q0JSQkaMiQITp58uRlh6IWLFig7OxsrVq1SsnJyapVq5aefPJJ57ZevXrptddec/Y/d+6cGjRoIG9v79I5GaCMYggJMInQ0FB9/fXXiouLk9VqVZMmTZSUlKT8/HznMELBxN4/Di0UhIvY2Fj99NNPqlSpkpYtW6ZvvvlGFovFGSy+//5753BHnz599PTTTys5OVkbNmzQ9ddfL0kKCwtTt27d9P777zvratiwocLCwhQWFqbrrrtOknTzzTc759GEhYWpb9++zv7Dhg1TTEyMy7BJSfjyyy914403qkqVKmrSpInmz5/vsr1gDktGRobi4uJUo0YN1a5dW4899pjOnTvn0vfnn39W586dVblyZYWGhmrKlCnFuhrk6+urWrVquSzt27eX3W7XoUOHnP0GDBig5cuXu+zr6empd999V6mpqXr77bc1evRoPfroo9q7d68++OADjRs3TnXq1HEu1atXlyT5+PgU8xsDzI0AA5jIvn37VK9ePS1atEgZGRmaNm2annjiCXl7e8vb21sxMTFKSkpyrnt7e+vjjz927r9//36dPXtWkZGRSktLk9VqdfnL/bffftP8+fP16KOPasqUKTp8+LDGjBmjFStWOPvcc8892rJli3P9/PnzMgxDhmHof//7nyTpxRdfdLYZhuEy5DRmzBj99ttv6tq1q+x2u7P97NmzOnnypMvy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c64AAKCcsBiXmlRSVGeLRbVr13a5g6hAWlqapIu3Wk+ePFm7du1STk6OGjdurOnTp+v222936Tt8+HD99NNP8vDwUN++ffXiiy+6XNHZuHGj4uPjlZ6eripVqmjs2LEaOnToFZ+Y3W5XQECAsrOzy/TVmIjxX7m7hL+UXOl+d5dwZaZmu7sCAMDfdKW/v4sVYMyEAFNyCDAAgGvlSn9/8y4kAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOsUOMIsWLVJkZKSsVquaNWum//znPy7bc3JyNH78eDVq1EghISG6++67lZ6e7tLHZrOpX79+ioiIkNVqVXx8vHJzc136bN68WR07dlR4eLgaN26st9566ypODwAAlEfFCjDvvfeepk6dqk8++UQ2m02fffaZJk+erA8//NDZZ/jw4dqyZYu2bdumlJQUNW7cWN27d5fD4ZAk5ebmKjo6WuHh4Tpw4IB27dqlxMRExcfHO4+RlJSkmJgYjR49WikpKVq5cqUmT56s5cuXl9BpAwAAMytWgNm8ebNeeuklRUZGSpKaNWumAQMGaNmyZZKklJQULV68WLNnz1ZAQIC8vLw0ffp02Ww2rV69WpK0bNkyZWRkaPr06fL09FT16tU1Z84cLVy4UFlZWZKkWbNmqXPnzurVq5fzc8aOHasZM2aU2IkDAADzKlaAee2113Tfffe5tO3YsUP+/v6SpO+//17BwcFq06aNc7uPj49iYmL09ddfS5ISEhLUtWtXeXt7O/u0adNGgYGBSkhIcPaJjY11+ZyePXsqMTFRGRkZxSkZAACUQ15Xu+OFCxcUHx+vH3/8UT/++KOki3NbQkJCCvUNCQnRvn37nH1atGhRqI/VapXNZrvkcQrWbTabateuXWj/nJwc5eTkONftdvtVnhkAACjrruoupJSUFHXs2FEb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AADAdAgwAADAdAgwAADAdAgwAADAdAgwAADAdAgwAADAdAgwAADAdAgwAADAdAgwAADAdAgwAADAdAgwAADAdAgwAADAdAgwAADAdAgwAADAdLzcXQAAAOXC1AB3V/DXpma7u4ISwxUYAABgOgQYAABgOgQYAABgOgQYAABgOkziBQCUeRHjv3J3CX8puZK7K6hYuAIDAABMhwADAABMhwADAABMhwADAABMhwADAABMhwADAABMp1QCTGJiory9vRUaGuqyfP7555KknJwcjR8/Xo0aNVJISIjuvvtupaenuxzDZrOpX79+ioiIkNVqVXx8vHJzc0ujXAAAYDKlEmDS0tLUpk0bpaWluSz33nuvJGn48OHasmWLtm3bppSUFDVu3Fjdu3eXw+GQJOXm5io6Olrh4eE6cOCAdu3apcTERMXHx5dGuQAAwGRKJcDYbDaFhYUVuS0lJUWLFy/W7NmzFRAQIC8vL02fPl02m02rV6+WJC1btkwZGRmaPn26PD09Vb16dc2ZM0cLFy5UVlZWaZQMAABMpNSuwISHhxe57fvvv1dwcLDatGnjbPPx8VFMTIy+/vprSVJCQoK6du0qb29vZ582bdooMDBQCQkJRR43JydHdrvdZQEAAOVTqV2BOXHihO699141aNBAbdu21aJFi5zbQkJCCu0TEhIim8122T5Wq9XZ589mzJihgIAA53KpK0AAAMD8SuVdSBaLRRkZGZo/f74iIiL0888/6+6771ZeXp68vb3l4VE4N1ksFhmGIUlX1OfPJkyY4DJHxm63E2IAACinSiXALF682GW9bdu2GjVqlBYvXqzRo0cXuuNIktLT02W1WiVJoaGhf9nnz3x9feXr61sC1QMAgLKuVIaQirpK4nA4ZLFYFBUVpYyMDG3fvt25LS8vTwkJCerWrZskKSYmRuvWrVNeXp6zz65du5SZmamoqKjSKBkAAJhIqQSYnj17asyYMTp79qwk6eeff9a8efM0ZMgQBQUFKS4uTvHx8bLb7XI4HJo4caICAwPVo0cPSVJsbKyCgoI0adIkORwOZWdna+TIkYqLi1NQUFBplAwAAEykVALMggULlJmZqeuuu07BwcG6//77NXnyZD388MOSpFdeeUXXX3+9mjdvrtDQUCUlJWnNmjXy8ro4ouXl5aU1a9Zo9+7dCgsLU2RkpFq1aqV58+aVRrkAAMBkSmUOjNVq1ZIlSy653dfXV3PnztXcuXMv2Sc0NFQrVqwojfIAAIDJ8S4kAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOmU6wLzzzjtq0aKFQkNDddNNN2nTpk3uLgkAAJQBZTbAvP/++5o4caKWL1+utLQ0jRs3Tj169NChQ4fcXRoAAHCzMhtgpk2bpjFjxqhp06aSpN69e6tTp06aP3++mysDAADu5uXuAoqSmpqq/fv3KzY21qW9Z8+emjt3rmbPnl1on5ycHOXk5DjXs7OzJUl2u710i/2b8nPOuruEv2S3GO4u4cqU8f+tzcIMP5OSSX4u+ZksMWb4ueRnsmQU/N42jL/4Po0y6McffzQkGadOnXJpX7VqleHv71/kPlOmTDEksbCwsLCwsJSDJTU19bJZoUxegfH29pYkeXi4jnBZLJZLJrIJEyYoPj7euZ6fn6/jx4+rZs2aslgspVdsOWe32xUWFqbU1FT5+/u7uxxAEj+XKHv4mSw5hmHo1KlTCgkJuWy/MhlgQkNDJUnp6elq1KiRsz09PV1Wq7XIfXx9feXr6+vSVr169VKrsaLx9/fn/5Qoc/i5RFnDz2TJCAgI+Ms+ZXISb3BwsFq1aqXVq1e7tK9du1bdunVzU1UAAKCsKJMBRpLGjRunl156Sfv27ZMkffHFF/rmm280YsQIN1cGAADcrUwOIUnSfffdJ7vdrtjYWJ0+fVpWq1WrVq1Sw4YN3V1aheLr66spU6YUGp4D3ImfS5Q1/ExeexbjUrNiAQAAyqgyO4QEAABwKQQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAABgOgQYAKbicDh08OBBSdKFCxfcXA0Ad+E5MHB69tlnr6jf5MmTS7kSoLDz58/rqaee0oIFC+Tn56fff/9dPXv21NixY9WpUyd3l4cK4uGHH76ifm+//XYpV4Iy+yReXHvffvut89/5+fnatGmTWrVqJX9/fx07dkw2m009evRwY4WoyMaPH699+/Zp69atuueeeyRdDN0jR47UDz/84N7iUGH88W/+8+fP64svvtCdd94pf39/HT16VJs2bdKwYcPcWGHFwRUYFGnatGny9/fX6NGjnW1PPvmkgoOD9dRTT7mxMlRU9evX186dO1W1alU1aNDAOYxUr149HT582M3VoSIaOXKkbr31VvXv39/ZNmfOHB05ckQvv/yyGyurGAgwKFKTJk2UlJQki8XibMvJyVGzZs2cvziAayk8PFz79u1TpUqVVL9+fR06dEinT59WixYtlJyc7O7yUAH9MUgXcDgcql+/vlJSUtxUVcXBJF4U6dSpUzp37pxLW25ubqE24Frp0qWL7r//fmVlZclisSgvL0+jRo1St27d3F0aKqjc3FxlZWW5tGVmZio/P99NFVUsBBgUqWvXrurdu7f27t2rnJwc7dixQ71792YODNxm1qxZSk1NVd26dZWamqqAgAAdOHBAM2bMcHdpqKD69u2rmJgYrVmzRklJSfryyy/VvXt3DRgwwN2lVQgMIaFIJ0+e1MMPP6wvvvjCOYwUExOjjz/+WNWqVXNzdaioDMPQpk2bZLPZ1LBhQ914443uLgkVWE5OjiZMmKC33npLZ86cka+vr+Li4jRv3jx5e3u7u7xyjwCDy8rMzNTBgwdVt25dhYeHu7scACiTjh07pho1asjHx8fdpVQY3EaNSzIMQ3v27FFycrLatWunpKQkXXfdde4uCxXI7bff7jKR/FISEhKuQTVAYWfOnNGnn36q1NRUPf300/ruu+/UuXPnK/q5xd/DFRgUKSUlRffcc49SU1NlsViUkZGhf/7zn7rjjjs0dOhQd5eHCmLatGlX1G/KlCmlXAlQ2M6dO9WtWzfVrl1b6enpOnr0qIYOHap69erp6aefdnd55R4BBkW655571KJFCz377LNq2LChDh06pGPHjumOO+7Qjh073F0eALhdly5d1L9/fw0ZMsR5a7/dblfbtm2VlJTk7vLKPe5CQpG2bdum559/Xh4eHs5LocHBwcrOznZzZaionnzySUnSiRMnXNoPHjyo/v37a8yYMcrNzXVHaaigkpKSNGTIEEly/nfS399fZ8+edWdZFQYBBkXy9fUt9CCm5ORkValSxU0VoaLbunWrWrVqpZo1ayoiIkI7d+6UdDHYWCwWHT58mKEkXFPVqlXT9u3bXdp27NihGjVquKmiioUAgyI99NBDio6O1ueff668vDxt2rRJ/fv31+DBg91dGiqogIAADRs2TKdPn9aTTz7pfM3Frl27NGfOHC1atEjLly93c5WoSEaNGqWuXbtq7ty5On/+vJYuXapevXopPj7e3aVVCMyBQZEcDofzzb9nz55VtWrV9MQTT2jatGny8CD34toLCwtTamqqc73gMe5hYWFKTk6Wp6cn70XCNffqq6/qlVdeUVpamho1aqR//etfeuSRR9xdVoVAgMFlXbhwQcePH1dwcLC7S0EFFxkZqQ8//FAtW7bU1q1bNWDAAO3evVsBAQHas2ePAgMD1bJlSx06dMjdpQK4BvhTGpfl7e1NeEGZ8Pzzz6tjx45q3769unbtqrZt26p58+bq3r277rnnHkVFRfFeJFxTp0+f1uTJk53rDodDDz74oH7//Xc3VlVx8CA7OIWHhzsn7tavX/+SD2LibdRwh3vvvVctW7ZUYmKiWrVqpcaNG2vVqlW6/fbb9c0332jr1q08ewPXVHx8vM6dOyeHwyFPT095enqqUaNGGjVqlN5//313l1fuMYQEp+XLl6tPnz6SpCVLllyy36BBg65VSQBQZoWHh2v//v0urw9wOBxq0KABc7GuAQIMinTs2DGGjlDmrF69Wjt37tT58+dd2v94GR+4VsLCwnT48GGXGxtyc3PVoEEDpaWlubGyioEAgyJFREQoOTnZ3WUATo8//rjee+89tWzZ0uUvXovFwruQ4BZ9+/ZV3bp1NWfOHHl5ecnhcGjUqFHKyMjQJ5984u7yyj0CDIo0d+5cORwOjRkzxt2lAJIuPgn6559/VlhYmLtLASRdfGdc586ddfr0aecrV6pWrar//ve/Cg0NdXd55R4BBkWaMGGCtmzZoiNHjuimm26Sp6enc9vbb7/txspQUTVp0kT79u1zdxmAi7Nnz+qzzz5TSkqK6tWrp3vvvZcnll8jBBgUKS4u7pLbFi9efA0rAS564YUXlJ+fr0mTJrm7FECSNG7cOM2cOdPdZVRYBBgApnDfffdp5cqVCgsLU0hIiMs25sDAHTp06KBly5apbt267i6lQuI5MChS586d9f3337u7DMCpadOmatq0qbvLAJyWLFmiqVOnKioqqtBQe3h4uBsrqxi4AoMiPfDAAxo2bJg6dOjg7lIAoEz64+3TBQ/+NAxDFotFDofDXWVVGFyBQZH69++v6dOnKzw8XO3atXP5y2LgwIFurAwAygbeu+VeXIFBkerXr19ku8Vi4VUCuGZ4vQWAS+EKDIrEXxYoC+bMmeP899SpU91XCHAJ69ev16xZs5ScnKzw8HDFx8fzUtFrhCswKJa8vDx5eZF7ce0lJSXp/PnzatWqlex2u8aPHy+73e4c6gSutYSEBPXs2VODBw9W06ZNtWfPHr399tv67LPP1LVrV3eXV+4RYFAku92uF154Qb/++qsuXLgg6eIDm/bt26fjx4+7uTpURDExMRo4cKAGDBigRx55REePHtU//vEP/fDDD/ruu+/cXR4qoFtvvVXPPvusunTp4mz79ttvNWHCBG3evNmNlVUMBBgUqX///rLZbOrbt6+ef/55Pfvss1q0aJFmz56tTp06ubs8VEB169bVkSNHZLfb1bBhQx08eFDVqlVzmScDXEuX+tnjZ/La8PjrLqiIfvjhB61fv15PPPGEqlSpomHDhmn58uWaMmWKu0tDBeXn56fDhw9r7ty56tmzp6pVq6asrCxuV4Xb+Pn5FQoqhw8f5lUC1wiTGVAkT09P5ebmytfXV5UrV9aJEydUr149/fbbb+4uDRXUpEmT1LhxYwUFBen//u//JEnTp0/XAw884ObKUFENGzZMMTExevHFF3Xddddp3759mjBhgh599FF3l1YhMISEIj311FP64YcftHHjRj3yyCPy8fHR9ddfrzfeeEO7d+92d3mooE6fPi0fHx/5+PhIko4eParAwEDnOnAtGYahZ555RvPmzdPZs2dVuXJlDR8+XDNnzrzkLf8oOQQYFCkvL09Lly7VoEGDtG/fPt111106c+aMlixZoqioKHeXBwBuZ7fb5e/vrwsXLigzM1NBQUHy9vZ2d1kVBgEGAICr4OfnpwcffFAjRoxQZGSku8upcJjEiyJt375dt9xyi6pUqSJPT0+XBQAgrVmzRnl5ebr11lt12223afny5crPz3d3WRUGV2BQpBtuuEG33XabunXrVmh+QefOnd1UFQCUPefOndPnn3+u999/X3v27NHgwYP19NNPu7usco+7kFCkI0eOaPbs2e4uAwDKvMqVK6tp06Zq0qSJEhMT9cMPP7i7pAqBISQU6fbbb9cnn3zi7jIAoMw6ceKEXn31VbVu3VrR0dHy9PTUDz/8oK+//trdpVUIDCGhSDabTW3atFGdOnVUs2ZNl20JCQluqgoAyo5KlSqpefPmevzxxzVgwABVrlzZ3SVVKAwhoUgPPvigmjRpos6dO3NbIAAUISEhQbfccou7y6iwuAKDItWuXVtHjx6VhwejjABQYMuWLWrXrp0kXfZ9R7whvfRxBQZFioyMVFJSkpo1a+buUgCgzOjTp49SU1MlSREREbJYLCq4DlDwb4vFwju6rgECDIrUqVMndenSRffff7/8/f1dtk2ePNlNVQGAe23evNn570OHDrmxEjCEhCLdfvvtRbZbLBYm8QKosN59990r6jdw4MBSrgQEGAAArlD9+vVd1lNTU1WjRg35+fnp5MmTcjgcatGihfON6Sg9DCEBAHCF/jhs9Prrr+vQoUN6+eWXJUk5OTl66KGH1L17d3eVV6FwBQYAgKvQvHlz/e9//3N51MTp06d1ww03KCkpyY2VVQzcIwsAwFU4ceJEoUdN+Pj4KDs7200VVSwEGAAArkL79u01dOhQnTlzRpKUnZ2tIUOG6NZbb3VzZRUDQ0gAAFwFm82me++9V7/88otq1aqlrKwsNW/eXGvXrlWdOnXcXV65R4ABAOAq5efna9u2bTp48KDq1q2rDh068ATza4QAAwAATIeYCAAATIcAAwAATIcAA6DE5eXlqW3btsrKynJpP3/+vEJDQ4vc5+2339Y777xTqD0jI0PffvutZs6cqYkTJ6qoUe/Tp08X6+V5v//+u3Jycq64P4CyhwADoMQtWrRIzZo107lz55Sfn39F+/zvf/+Tr6+vcz0qKkpNmjRRbGys7rnnHnl6eiomJqbIoBIbG6sff/zRuX706FGFhobKbrfr9ddfL9T/ueeeU5cuXXT8+HElJyfL29tbERERLkv16tX1/PPPX8XZA7gWeJUAgBKTk5OjqKgo2e12rV+/XtHR0Zo4caKeeeYZSZJhGDp69KgaNWrk3Gfp0qWKjIzU7t271bt3b50+fVqVKlXSwYMHtXPnTvn5+alRo0YaPXq0PD09XT5v//79Lsf6Mz8/P61YsUIeHh4aNmyYs33WrFl64IEHdM899+jdd99VvXr1tH//fpd9p06dWgLfCIDSQoABUGJ8fX3Vr18/ff7551q5cqVCQkLUv39/9e/fX9LFIaRGjRq5hIX/+7//U+vWrXXo0CEdOnRIGRkZzqGkW265RR4eHjpy5IiaNWumKlWqqEaNGvr222914sQJderUSTt27LhkPR4eHnr11Vf1008/ubR7eXnpvffe06ZNm0r+SwBwTTCEBKBEPfHEE/L29taYMWM0ZMgQHT169LL9b7nlFv30009q2rSp9u/fr+joaAUHB0u6GG5+/fVXffLJJ2rXrp1+/fVXvfjii5KkGjVqqG/fvlqwYIEk6dNPP1WdOnVUp04dtWzZUkeOHFGdOnXUqVMnPfnkk+rVq5ckKSsrSyNGjNCFCxd02223ld4XAaBUEWAAlLgbbrhB48aN07lz5/T666+rT58+atq0qVq1aqVjx46padOmatq0qfr06SNJ+vnnn3XzzTdLkg4fPqyIiAjl5+dr6dKlGjJkiLKzs3X8+HHNmjVLAwcO1IULFyRJ999/v3755RdJUu/evXX06FEdPXpUK1asUH5+vr7++mtn22effSbp4lWZHTt2qFu3bjp37pwbvh0AJYEhJAAlZu/evVq4cKFef/11xcTE6L333lNOTo4OHjx42f02b96sW265RXl5ec4hpFtvvVX5+fmaMGGCGjRooLvvvlvjxo3T6NGjnW//bdeunT755BPdfvvtLsfbs2ePgoODlZCQoH/84x8u2wIDA7V27Vp1795dGzduVPPmzXX+/Hn5+voqICBAeXl5ysnJUY0aNfTUU0+V7BcEoMRwBQZAialevbqOHDmixx9/XJs2bdJbb72liIgIpaenX3a/devWqWbNmtq6datuuOEGPf3006pUqZJee+013XXXXWrRooXatWun7777TnfddZfLvlu2bNG+fftc2rZu3aoxY8bo448/LvLzKlWqpPXr1+u2225TaGio0tLS1L59e61YsUKvvPKK+vbtq7S0ND3xxBN/7wsBUGoIMABKTJ06dTRo0CANGzZMVapUkc1m04wZM3Tw4EH5+fk5h46aNm0qPz8//fzzzzp9+rRSU1M1c+ZMPfbYY865KocOHdLy5cu1c+dO5+Ln56fc3FxJUlpamh555BE9+OCDqlKlirOGCxcu6NNPP1Xv3r1Vo0YNrV+/vsha09LSXObAHD16VP7+/qX35QAoUQQYACVq1qxZyszMlHRxvsnbb78tSbrtttu0d+9e59KhQwdJF291/vbbb/X2229r7969ev/993Xy5ElJUv/+/dW+fXvnsmvXLufn7Ny5U2fOnNHWrVtdHo737rvvqnXr1qpfv77GjRun4cOH68yZM4XqHD9+vLp06SJJOnHihNLS0tSwYcNS+U4AlDzmwAAoMQ6HQ9u3b1fjxo0lSZ07d9bEiRP14IMPXna/sLAw3XHHHZo1a5ZOnjypuXPnSpI++ugjNW3a1Nmvffv2zn9369ZN3bp1czlOZmamxo8f75ywGxUVpZYtW+qhhx7Shx9+KC+vi//JW716tTZs2OC8g+mNN95Qhw4dVKlSJZfjvfzyy6pSpYqGDx9+NV8HgFJEgAFQYk6ePKmBAwfKz89PklS7dm398ssv+vXXX/Xf//5XLVq0cPY9fPiwpIuvHbjvvvt08uRJPfbYY/Ly8pLD4VCXLl101113ycfHx7nP5SYD//7774qJidH999+vjh07OtvfeOMN3XTTTbr//vv1ySefKC0tTQMHDtS///1v+fv766uvvtL06dO1YcMGSZLFYtGpU6d04cIFJSYm6qabbirR7whAySDAACgxNWvW1EsvvaTz58872wrCTKdOnbRq1Spne8HVEw8PD9ntdq1YscJ5haTgibsrV6685BWYP1u/fr2aNGmiOXPmuLTXqlVL69ev16+//ipJ2rdvn2JiYvTAAw9o0aJFGjt2rD766CO1a9dOktSiRQuNGTNGlStXVlhYmCZNmnS1XweAUmQxinozGgBcQ/n5+fLw+PtT8q70OIZhyGKxyG63Kzs7W2FhYX/7swFcWwQYAABgOtyFBAAATIcAAwAATIcAAwAATIcAAwAATIcAAwAATIcAAwAATIcAAwAATIcAAwAATIcAAwAATOf/AVWx99LYwNiQAAAAAElFTkSuQmCC",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#結婚 and 成約の可視化\n",
        "j_df = pd.DataFrame()\n",
        "\n",
        "j_df['yes'] = data[data['成約の有無']== 'yes'][\"結婚状況\"].value_counts()\n",
        "j_df['no'] = data[data['成約の有無'] == 'no'][\"結婚状況\"].value_counts()\n",
        "j_df.plot.bar(title = '結婚状況 and 成約')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "LInpelfpraxT",
        "outputId": "5574a1bb-44dd-4801-98ac-945799a413ae"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"\\u6700\\u7d42\\u5b66\\u6b74\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"secondary\",\n          \"unknown\",\n          \"primary\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1195,\n        \"min\": 245,\n        \"max\": 3026,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3026,\n          245,\n          909\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1065,\n        \"min\": 252,\n        \"max\": 2450,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2450,\n          252,\n          591\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-3f77b2f5-3de3-4262-81b1-5021f8accb97\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>成約の有無</th>\n",
              "      <th>no</th>\n",
              "      <th>yes</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>最終学歴</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>primary</th>\n",
              "      <td>909</td>\n",
              "      <td>591</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>secondary</th>\n",
              "      <td>3026</td>\n",
              "      <td>2450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tertiary</th>\n",
              "      <td>1693</td>\n",
              "      <td>1996</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unknown</th>\n",
              "      <td>245</td>\n",
              "      <td>252</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f77b2f5-3de3-4262-81b1-5021f8accb97')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3f77b2f5-3de3-4262-81b1-5021f8accb97 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3f77b2f5-3de3-4262-81b1-5021f8accb97');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-decbaa1a-57a0-475b-861e-1e2d66ba5ac4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-decbaa1a-57a0-475b-861e-1e2d66ba5ac4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-decbaa1a-57a0-475b-861e-1e2d66ba5ac4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "成約の有無        no   yes\n",
              "最終学歴                 \n",
              "primary     909   591\n",
              "secondary  3026  2450\n",
              "tertiary   1693  1996\n",
              "unknown     245   252"
            ]
          },
          "execution_count": 17,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pd.crosstab(data['最終学歴'], data['成約の有無'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 541
        },
        "id": "FJy6UsbPTQ_9",
        "outputId": "192d7008-5e7e-4ae3-c1ba-d39ebf540229"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Axes: title={'center': '最終学歴 and 成約'}, xlabel='最終学歴'>"
            ]
          },
          "execution_count": 18,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "#最終学歴 and 成約\n",
        "j_df = pd.DataFrame()\n",
        "\n",
        "j_df['yes'] = data[data['成約の有無']== 'yes'][\"最終学歴\"].value_counts()\n",
        "j_df['no'] = data[data['成約の有無'] == 'no'][\"最終学歴\"].value_counts()\n",
        "j_df.plot.bar(title = '最終学歴 and 成約')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H1TTweAjU4TW"
      },
      "source": [
        "実際に 2 変数をクロス集計や散布図を用いて描画することによって、データのさらなる理解が深まりました。\n",
        "- 「ブルーカラー」や「サービス業」の仕事に就いている顧客は、定期預金を申し込む可能性が低い。\n",
        "- 既婚の顧客は定期預金を契約する可能性が低くなります。\n",
        "- 学歴は成約すうとあまり関係がなさそう\n",
        "- Retire（退職）している人の成約率が高い\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_RDKkpSmGOwx"
      },
      "source": [
        "ここまでデータの理解を進めました。\n",
        "クロス集計や散布図を用いて可視化を行いデータの分析を行うことを探索的分析といいます。  \n",
        "本章では探索的分析ではなく、分析や検定について紹介します。\n",
        "\n",
        "### 検定とは（推測統計）\n",
        "本章では統計的仮説検定について学習します。検定を行うことで、仮説が正しいと言ってよいのかを判断できます。\n",
        "\n",
        "これだけではわかりにくいので具体例を用いて考えましょう\n",
        "\\"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "Ut2AuIiyVDif",
        "outputId": "4d29797e-3c9c-4f3f-aa48-bf5181372f78"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"b_df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"\\u9280\\u884c\\u6b8b\\u9ad8_yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28278.69619815639,\n        \"min\": -3058.0,\n        \"max\": 81204.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1804.2679145396105,\n          733.0,\n          5289.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9280\\u884c\\u6b8b\\u9ad8_no\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23584.659490832575,\n        \"min\": -6847.0,\n        \"max\": 66653.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1280.2271411544355,\n          414.0,\n          5873.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "b_df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-2bfc16e0-c778-436e-805e-76755940573d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>銀行残高_yes</th>\n",
              "      <th>銀行残高_no</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>5289.000000</td>\n",
              "      <td>5873.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1804.267915</td>\n",
              "      <td>1280.227141</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3501.104777</td>\n",
              "      <td>2933.411934</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-3058.000000</td>\n",
              "      <td>-6847.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>210.000000</td>\n",
              "      <td>64.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>733.000000</td>\n",
              "      <td>414.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2159.000000</td>\n",
              "      <td>1324.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>81204.000000</td>\n",
              "      <td>66653.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2bfc16e0-c778-436e-805e-76755940573d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2bfc16e0-c778-436e-805e-76755940573d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2bfc16e0-c778-436e-805e-76755940573d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cedfaf69-cfc3-461f-a920-9c1250779f7f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cedfaf69-cfc3-461f-a920-9c1250779f7f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cedfaf69-cfc3-461f-a920-9c1250779f7f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_249e3b86-82e8-4f89-9f10-d19869e2ccc7\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('b_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_249e3b86-82e8-4f89-9f10-d19869e2ccc7 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('b_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "           銀行残高_yes       銀行残高_no\n",
              "count   5289.000000   5873.000000\n",
              "mean    1804.267915   1280.227141\n",
              "std     3501.104777   2933.411934\n",
              "min    -3058.000000  -6847.000000\n",
              "25%      210.000000     64.000000\n",
              "50%      733.000000    414.000000\n",
              "75%     2159.000000   1324.000000\n",
              "max    81204.000000  66653.000000"
            ]
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#銀行残高と成約の統計情報を確認する\n",
        "\n",
        "b_df = pd.DataFrame()\n",
        "b_df['銀行残高_yes'] = (data[data['成約の有無'] == 'yes'][['成約の有無','銀行残高']].describe())['銀行残高']\n",
        "b_df['銀行残高_no'] = (data[data['成約の有無'] == 'no'][['成約の有無','銀行残高']].describe())['銀行残高']\n",
        "\n",
        "b_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 491
        },
        "id": "ZBX5Kpt4VccR",
        "outputId": "a1ab0605-1b3c-4630-8edc-5ddf850794fe"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'Balance and deposit statistics'}>"
            ]
          },
          "execution_count": 20,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "b_df.drop(['count', '25%', '50%', '75%']).plot.bar(title = 'Balance and deposit statistics')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "beY80_UZVhGA",
        "outputId": "5306373d-2c2d-4076-b282-d5b584544dce"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"a_df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"\\u5e74\\u9f62_yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1855.6087794435216,\n        \"min\": 13.497781462199924,\n        \"max\": 5289.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          41.670069956513515,\n          38.0,\n          5289.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5e74\\u9f62_no\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2062.507273201568,\n        \"min\": 10.264815411328792,\n        \"max\": 5873.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          40.83739145240933,\n          39.0,\n          5873.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "a_df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-590d0f99-865c-41c9-a281-a998b4c43254\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>年齢_yes</th>\n",
              "      <th>年齢_no</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>5289.000000</td>\n",
              "      <td>5873.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>41.670070</td>\n",
              "      <td>40.837391</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>13.497781</td>\n",
              "      <td>10.264815</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>18.000000</td>\n",
              "      <td>18.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>31.000000</td>\n",
              "      <td>33.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>38.000000</td>\n",
              "      <td>39.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>50.000000</td>\n",
              "      <td>48.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>95.000000</td>\n",
              "      <td>89.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-590d0f99-865c-41c9-a281-a998b4c43254')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-590d0f99-865c-41c9-a281-a998b4c43254 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-590d0f99-865c-41c9-a281-a998b4c43254');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-398f2b98-95ba-4f26-a34d-6eb35103d24c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-398f2b98-95ba-4f26-a34d-6eb35103d24c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-398f2b98-95ba-4f26-a34d-6eb35103d24c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_b53b3563-8a51-4b74-80de-ab0ff8f08392\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('a_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_b53b3563-8a51-4b74-80de-ab0ff8f08392 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('a_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "            年齢_yes        年齢_no\n",
              "count  5289.000000  5873.000000\n",
              "mean     41.670070    40.837391\n",
              "std      13.497781    10.264815\n",
              "min      18.000000    18.000000\n",
              "25%      31.000000    33.000000\n",
              "50%      38.000000    39.000000\n",
              "75%      50.000000    48.000000\n",
              "max      95.000000    89.000000"
            ]
          },
          "execution_count": 21,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 年齢と成約の関係\n",
        "a_df = pd.DataFrame()\n",
        "a_df['年齢_yes'] = (data[data['成約の有無'] == 'yes'][['成約の有無','年齢']].describe())['年齢']\n",
        "a_df['年齢_no'] = (data[data['成約の有無'] == 'no'][['成約の有無','年齢']].describe())['年齢']\n",
        "\n",
        "a_df\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 491
        },
        "id": "9rgyq86XVxDQ",
        "outputId": "4b79555e-9944-4d57-cecd-7098c8879b4a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'Age and deposit statistics'}>"
            ]
          },
          "execution_count": 22,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "a_df.drop(['count', '25%', '50%', '75%']).plot.bar(title = 'Age and deposit statistics')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DfU2ljZ7WKlM"
      },
      "source": [
        "- 定期預金を契約している人は、残高や年齢の値が大きい傾向があります"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oE5vOG6gWWY7"
      },
      "source": [
        "## 一次分析のまとめ\n",
        "- 「ブルーカラー」や「サービス業」の仕事に就いている顧客は、定期預金を申し込む可能性が低いです。\n",
        "- 既婚の顧客は定期預金を契約する可能性が低くなります。\n",
        "- 定期預金している人は残高や年齢の値が大きい傾向がある。\n",
        "\n",
        "### 仮説をたてて分析を行い統計的に証明する\n",
        "以下の仮説を調べる\n",
        "- 結婚状況と成約の有無は関連性があるのではないか\n",
        "- 最も売上の良い営業と売上の最も引くい営業では営業力に差があるのではないか"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-YtsseTmbzIA"
      },
      "source": [
        "### カイ二乗検定を使用して関連性を証明する"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WwC7QbcKW9IA",
        "outputId": "161cd2bb-c8c8-47d9-cfbc-3ecf8fa103cc"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "成約の有無       no   yes\n",
            "結婚状況                \n",
            "divorced   671   622\n",
            "married   3596  2755\n",
            "single    1606  1912\n",
            "結婚状況と定期預金加入の有無との間には、統計的に有意な関係がある。\n"
          ]
        }
      ],
      "source": [
        "# カイ二乗検定を実装し、成約率と最終学歴の関連性があるかどうか調べる\n",
        "\n",
        "import pandas as pd\n",
        "import scipy.stats as stats\n",
        "\n",
        "contingency_table = pd.crosstab(data['結婚状況'], data['成約の有無'])\n",
        "print(contingency_table.head())\n",
        "chi2, p, _, _ = stats.chi2_contingency(contingency_table)\n",
        "\n",
        "if p < 0.05:\n",
        "    print(\"結婚状況と定期預金加入の有無との間には、統計的に有意な関係がある。\")\n",
        "else:\n",
        "    print(\"結婚状況と定期預金加入の有無との間には、統計的に有意な関連は見られない。\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TOaKxWgYavMj"
      },
      "source": [
        "### 営業マンの力量をT検定する。"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YhTu7AHjDXfJ",
        "outputId": "b10d69f3-d52b-4eb5-fedc-d6491e7cc731"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "担当営業マン\n",
              "A    8.358587\n",
              "B    8.838254\n",
              "C    8.455569\n",
              "D    8.409461\n",
              "E    9.043657\n",
              "Name: 売上, dtype: float64"
            ]
          },
          "execution_count": 24,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "salse=data.groupby('担当営業マン')['売上'].mean()\n",
        "salse.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bXXCUmjugJY1",
        "outputId": "6453d780-fe83-4502-f8df-3107b4c262eb"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "担当営業マン  成約の有無\n",
              "A       no       1199\n",
              "        yes      1073\n",
              "B       no       1140\n",
              "        yes      1037\n",
              "C       no       1133\n",
              "        yes      1045\n",
              "D       no       1161\n",
              "        yes      1067\n",
              "E       no       1240\n",
              "        yes      1067\n",
              "Name: count, dtype: int64"
            ]
          },
          "execution_count": 25,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# prompt: 営業マンごとの成約数の値をみる\n",
        "\n",
        "salse2=data.groupby('担当営業マン')['成約の有無'].value_counts()\n",
        "salse2.head(10)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ckTIk1JPhkD1",
        "outputId": "bc9a10f2-e68c-43ae-8933-c64ad58a770e"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"salse2\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"\\u62c5\\u5f53\\u55b6\\u696d\\u30de\\u30f3\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"B\",\n          \"E\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44,\n        \"min\": 1133,\n        \"max\": 1240,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1140,\n          1240,\n          1133\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 1037,\n        \"max\": 1073,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1037,\n          1067,\n          1073\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "salse2"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-23b6e20f-878f-43ee-812f-ed5dff5bd87b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>no</th>\n",
              "      <th>yes</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>担当営業マン</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>A</th>\n",
              "      <td>1199</td>\n",
              "      <td>1073</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>B</th>\n",
              "      <td>1140</td>\n",
              "      <td>1037</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C</th>\n",
              "      <td>1133</td>\n",
              "      <td>1045</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>D</th>\n",
              "      <td>1161</td>\n",
              "      <td>1067</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>E</th>\n",
              "      <td>1240</td>\n",
              "      <td>1067</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-23b6e20f-878f-43ee-812f-ed5dff5bd87b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-23b6e20f-878f-43ee-812f-ed5dff5bd87b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-23b6e20f-878f-43ee-812f-ed5dff5bd87b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9596aa45-a119-438c-a100-03954d5e2da0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9596aa45-a119-438c-a100-03954d5e2da0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9596aa45-a119-438c-a100-03954d5e2da0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "          no   yes\n",
              "担当営業マン            \n",
              "A       1199  1073\n",
              "B       1140  1037\n",
              "C       1133  1045\n",
              "D       1161  1067\n",
              "E       1240  1067"
            ]
          },
          "execution_count": 26,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# テーブル化\n",
        "\n",
        "salse2 = salse2.unstack(fill_value=0)\n",
        "salse2.columns = ['no', 'yes']\n",
        "salse2.head()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9EDu1TmiiJXc",
        "outputId": "cee7233a-e642-4de5-9df6-503fd0637735"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"salse_merge\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"\\u62c5\\u5f53\\u55b6\\u696d\\u30de\\u30f3\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"B\",\n          \"E\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u58f2\\u4e0a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.30282619827570406,\n        \"min\": 8.358587147887324,\n        \"max\": 9.043656845753901,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          8.838254478640332,\n          9.043656845753901,\n          8.45556880733945\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44,\n        \"min\": 1133,\n        \"max\": 1240,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1140,\n          1240,\n          1133\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 1037,\n        \"max\": 1073,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1037,\n          1067,\n          1073\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "salse_merge"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-4a7c3095-d44c-4414-98f0-ec5ecd4bec8a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>売上</th>\n",
              "      <th>no</th>\n",
              "      <th>yes</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>担当営業マン</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>A</th>\n",
              "      <td>8.358587</td>\n",
              "      <td>1199</td>\n",
              "      <td>1073</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>B</th>\n",
              "      <td>8.838254</td>\n",
              "      <td>1140</td>\n",
              "      <td>1037</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>C</th>\n",
              "      <td>8.455569</td>\n",
              "      <td>1133</td>\n",
              "      <td>1045</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>D</th>\n",
              "      <td>8.409461</td>\n",
              "      <td>1161</td>\n",
              "      <td>1067</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>E</th>\n",
              "      <td>9.043657</td>\n",
              "      <td>1240</td>\n",
              "      <td>1067</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4a7c3095-d44c-4414-98f0-ec5ecd4bec8a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4a7c3095-d44c-4414-98f0-ec5ecd4bec8a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4a7c3095-d44c-4414-98f0-ec5ecd4bec8a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d15d15b3-738b-41d2-b887-471529d2789d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d15d15b3-738b-41d2-b887-471529d2789d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d15d15b3-738b-41d2-b887-471529d2789d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "              売上    no   yes\n",
              "担当営業マン                      \n",
              "A       8.358587  1199  1073\n",
              "B       8.838254  1140  1037\n",
              "C       8.455569  1133  1045\n",
              "D       8.409461  1161  1067\n",
              "E       9.043657  1240  1067"
            ]
          },
          "execution_count": 27,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# prompt: salse2 とsalse テーブルを結合する\n",
        "\n",
        "import pandas as pd\n",
        "salse_merge = pd.merge(salse, salse2, on='担当営業マン')\n",
        "salse_merge.head()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7vsPQLyakM7i",
        "outputId": "b0827bfd-2857-4f1b-909b-029a7aebc740"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['売上', 'no', 'yes'], dtype='object')"
            ]
          },
          "execution_count": 28,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "salse_merge.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mwoNf4sNlHym"
      },
      "outputs": [],
      "source": [
        "salse_merge.reset_index(inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pkBB56YBk3t8",
        "outputId": "11f8c9d0-d168-4fa1-f25f-6e4686bacbd5"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"salse_merge\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"\\u62c5\\u5f53\\u55b6\\u696d\\u30de\\u30f3\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"B\",\n          \"E\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u58f2\\u4e0a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.30282619827570406,\n        \"min\": 8.358587147887324,\n        \"max\": 9.043656845753901,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          8.838254478640332,\n          9.043656845753901,\n          8.45556880733945\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"no\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44,\n        \"min\": 1133,\n        \"max\": 1240,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1140,\n          1240,\n          1133\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"yes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 1037,\n        \"max\": 1073,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1037,\n          1067,\n          1073\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "salse_merge"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-1b3e3737-2778-4988-acb8-a2cb21f075fb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>担当営業マン</th>\n",
              "      <th>売上</th>\n",
              "      <th>no</th>\n",
              "      <th>yes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>A</td>\n",
              "      <td>8.358587</td>\n",
              "      <td>1199</td>\n",
              "      <td>1073</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>B</td>\n",
              "      <td>8.838254</td>\n",
              "      <td>1140</td>\n",
              "      <td>1037</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>C</td>\n",
              "      <td>8.455569</td>\n",
              "      <td>1133</td>\n",
              "      <td>1045</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>D</td>\n",
              "      <td>8.409461</td>\n",
              "      <td>1161</td>\n",
              "      <td>1067</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>E</td>\n",
              "      <td>9.043657</td>\n",
              "      <td>1240</td>\n",
              "      <td>1067</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b3e3737-2778-4988-acb8-a2cb21f075fb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1b3e3737-2778-4988-acb8-a2cb21f075fb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1b3e3737-2778-4988-acb8-a2cb21f075fb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-62b4a5e3-74c9-44af-abea-5f58798c1eff\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-62b4a5e3-74c9-44af-abea-5f58798c1eff')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-62b4a5e3-74c9-44af-abea-5f58798c1eff button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "  担当営業マン        売上    no   yes\n",
              "0      A  8.358587  1199  1073\n",
              "1      B  8.838254  1140  1037\n",
              "2      C  8.455569  1133  1045\n",
              "3      D  8.409461  1161  1067\n",
              "4      E  9.043657  1240  1067"
            ]
          },
          "execution_count": 30,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "salse_merge.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v7VUUmjFldle",
        "outputId": "8003aef6-d900-41a9-fbdc-d6157b484eff"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['担当営業マン', '売上', 'no', 'yes'], dtype='object')"
            ]
          },
          "execution_count": 31,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "salse_merge.columns"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JkISXD4nnWQ-"
      },
      "source": [
        "キャンペーンを売っていないときと今回のデータを使用してT検定を行います。\n",
        "今回のキャンペーンが効果があったと言えるかどうかを検定を行い検証しましょうｌ．\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zJ4b9mPuPsql"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# 乱数のシードを設定して再現性を保つ\n",
        "np.random.seed(42)\n",
        "\n",
        "# サンプルサイズ\n",
        "n = 1000\n",
        "\n",
        "# 年齢データを作成（18歳から95歳までの乱数）\n",
        "age = np.random.randint(18, 96, n)\n",
        "\n",
        "# 職業データを作成（'admin.', 'blue-collar', 'technician', 'services', 'management', 'retired', 'entrepreneur', 'self-employed', 'housemaid', 'unemployed', 'student', 'unknown'）\n",
        "occupations = ['admin.', 'blue-collar', 'technician', 'services', 'management', 'retired', 'entrepreneur', 'self-employed', 'housemaid', 'unemployed', 'student', 'unknown']\n",
        "occupation = np.random.choice(occupations, n)\n",
        "\n",
        "# 婚姻状態データを作成（'married', 'single', 'divorced', 'unknown'）\n",
        "marital_statuses = ['married', 'single', 'divorced', 'unknown']\n",
        "marital_status = np.random.choice(marital_statuses, n)\n",
        "\n",
        "# 学歴データを作成（'basic.4y', 'basic.6y', 'basic.9y', 'high.school', 'professional.course', 'university.degree', 'unknown'）\n",
        "educations = ['basic.4y', 'basic.6y', 'basic.9y', 'high.school', 'professional.course', 'university.degree', 'unknown']\n",
        "education = np.random.choice(educations, n)\n",
        "\n",
        "# デフォルト情報データを作成（'yes', 'no', 'unknown'）\n",
        "defaults = ['yes', 'no', 'unknown']\n",
        "default = np.random.choice(defaults, n)\n",
        "\n",
        "# 住宅ローンデータを作成（'yes', 'no', 'unknown'）\n",
        "housings = ['yes', 'no', 'unknown']\n",
        "housing = np.random.choice(housings, n)\n",
        "\n",
        "# 個人ローンデータを作成（'yes', 'no', 'unknown'）\n",
        "loans = ['yes', 'no', 'unknown']\n",
        "loan = np.random.choice(loans, n)\n",
        "\n",
        "# 連絡方法データを作成（'telephone', 'cellular'）\n",
        "contacts = ['telephone', 'cellular']\n",
        "contact = np.random.choice(contacts, n)\n",
        "\n",
        "# 連絡時間データを作成（'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'）\n",
        "months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\n",
        "month = np.random.choice(months, n)\n",
        "\n",
        "# 連絡曜日データを作成（'mon', 'tue', 'wed', 'thu', 'fri'）\n",
        "days = ['mon', 'tue', 'wed', 'thu', 'fri']\n",
        "day_of_week = np.random.choice(days, n)\n",
        "\n",
        "# 最後の接触からの日数データを作成（0から365までの乱数）\n",
        "campaign = np.random.randint(0, 366, n)\n",
        "\n",
        "# 最後の接触回数データを作成（0から10までの乱数）\n",
        "pdays = np.random.randint(0, 11, n)\n",
        "\n",
        "# 前回のキャンペーン後の結果データを作成（0から7までの乱数）\n",
        "previous = np.random.randint(0, 8, n)\n",
        "\n",
        "# 通知の結果データを作成（'failure', 'nonexistent', 'success'）\n",
        "poutcomes = ['failure', 'nonexistent', 'success']\n",
        "poutcome = np.random.choice(poutcomes, n)\n",
        "\n",
        "# 顧客の年間連絡回数データを作成（-3.4から1.4までの乱数）\n",
        "emp_var_rate = np.random.uniform(-3.4, 1.4, n)\n",
        "\n",
        "# 消費者物価指数データを作成（92から95までの乱数）\n",
        "cons_price_idx = np.random.uniform(92, 95, n)\n",
        "\n",
        "# 消費者信頼感指数データを作成（-50から-25までの乱数）\n",
        "cons_conf_idx = np.random.uniform(-50, -25, n)\n",
        "\n",
        "# 雇用者の雇用指数データを作成（0.6から5.0までの乱数）\n",
        "euribor3m = np.random.uniform(0.6, 5.0, n)\n",
        "\n",
        "# サポートされている連絡データを作成（4900から5200までの乱数）\n",
        "nr_employed = np.random.randint(4900, 5201, n)\n",
        "\n",
        "# 最終的な購入の結果データを作成（'yes', 'no'）\n",
        "y_values = ['yes', 'no']\n",
        "y = np.random.choice(y_values, n)\n",
        "\n",
        "# データフレームを作成\n",
        "data = pd.DataFrame({\n",
        "    'age': age,\n",
        "    'job': occupation,\n",
        "    'marital': marital_status,\n",
        "    'education': education,\n",
        "    'default': default,\n",
        "    'housing': housing,\n",
        "    'loan': loan,\n",
        "    'contact': contact,\n",
        "    'month': month,\n",
        "    'day_of_week': day_of_week,\n",
        "    'campaign': campaign,\n",
        "    'pdays': pdays,\n",
        "    'previous': previous,\n",
        "    'poutcome': poutcome,\n",
        "    'emp.var.rate': emp_var_rate,\n",
        "    'cons.price.idx': cons_price_idx,\n",
        "    'cons.conf.idx': cons_conf_idx,\n",
        "    'euribor3m': euribor3m,\n",
        "    'nr.employed': nr_employed,\n",
        "    'y': y\n",
        "})\n",
        "\n",
        "data.head()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3OMO0FXUrTlt",
        "outputId": "c312587f-17c6-4866-f2fd-945bc9864b5e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "AとEの売上には差がない\n",
            "-0.8582443340668331\n",
            "0.39080249077419926\n"
          ]
        }
      ],
      "source": [
        "# prompt: data テーブルの営業マン列のAとEで売上に差があるかどうか検定\n",
        "\n",
        "import scipy.stats as stats\n",
        "\n",
        "# 帰無仮説：AとEの売上には差がない（差があるとはいえない）\n",
        "# 対立仮説：AとEの売上には差がある\n",
        "\n",
        "# AとEの売上を抽出\n",
        "a_sales = data[data['担当営業マン'] == 'A']['売上']\n",
        "e_sales = data[data['担当営業マン'] == 'E']['売上']\n",
        "\n",
        "# 二標本t検定の実行\n",
        "t_stat, p_value = stats.ttest_ind(a_sales, e_sales)\n",
        "\n",
        "\n",
        "# 有意水準α=0.05で検定\n",
        "if p_value < 0.05:\n",
        "    print('AとEの売上には差がある')\n",
        "else:\n",
        "    print('AとEの売上には差がない')\n",
        "\n",
        "print(t_stat)\n",
        "print(p_value)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f2RE8N48sbkr"
      },
      "source": [
        "売上の最も高たったEと低かったAさんでは差がないということが言えないということが検定結果からわかります。営業マンによる成約率の上下はあまりなさそうです。\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xVaZvzUHcmWp"
      },
      "source": [
        "### 相関分析\n",
        "年齢が上がるほど、銀行残高が上がるのかどうか相関関係を分析する"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BztNNGlkf1RZ"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mPu9L68df7XS",
        "outputId": "b4de453c-7fcf-40e4-d14b-edeedd50fb1c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                年齢      銀行残高       day     pdays  previous        売上\n",
            "年齢        1.000000  0.112300 -0.000762  0.002774  0.020169  0.101262\n",
            "銀行残高      0.112300  1.000000  0.010467  0.017411  0.030805  0.727254\n",
            "day      -0.000762  0.010467  1.000000 -0.077232 -0.058981 -0.011110\n",
            "pdays     0.002774  0.017411 -0.077232  1.000000  0.507272  0.060419\n",
            "previous  0.020169  0.030805 -0.058981  0.507272  1.000000  0.063562\n",
            "売上        0.101262  0.727254 -0.011110  0.060419  0.063562  1.000000\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# 数値データのみを抽出\n",
        "numerical_data = data.select_dtypes(include=['int64', 'float64'])\n",
        "numerical_data.drop(['列1','連絡で接触した時間（秒数'], axis=1, inplace=True)\n",
        "# 相関分析の実行\n",
        "correlation_matrix = numerical_data.corr()\n",
        "# ,'Unnamed: 18','Unnamed: 19'\n",
        "# データフレームに変換\n",
        "correlation_df = pd.DataFrame(correlation_matrix)\n",
        "\n",
        "# 相関分析の結果を表示\n",
        "print(correlation_df)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VVxP_4bsj-16"
      },
      "source": [
        "- 年齢と銀行残高に相関関係はなさそう。\n",
        "- 売上と銀行残高には相関関係がある\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7eHfjKNNgFIx"
      },
      "source": [
        "因果関係について\n",
        "因果関係とは、相関分析は非常に強力な手法ですが、これにはいくつか注意点があります。相関は 2 つの変数間に因果関係があれば強く出ます。ここに注目すべき点があり、相関はお互いの影響度合いを見ている点には注意が必要です。\n",
        "\n",
        "\n",
        "たまたま相関がある場合に注意しましょう。このような本当は関係はないが、相関があるように結果が出てしまうことを擬似相関（見せかけの相関）と言います。\n",
        "\n",
        "この疑似相関は様々な要因で発生する可能性があります。\n",
        "\n",
        "関係は全く無いが相関が発生する場合\n",
        "第 3 の要因が 2 変数それぞれに影響している場合\n",
        "第 3 の要因が 2 変数の間に介在している場合\n",
        "関係は全く無いが相関が発生する場合\n",
        "\n",
        "具体例を用いて考えてみましょう。\n",
        "\n",
        "じゃがいもの生産量と自民党の支持率には正の相関があると言われています。この、じゃがいもの生産量と自民党の支持率には何かの因果関係が存在するのでしょうか。\n",
        "\n",
        "回答としては No です。ここにはたまたま相関が見つかっていますが、何かの理由（因果関係）があるわけではありません。\n",
        "\n",
        "第 3 の要因が 2 変数それぞれに影響している場合\n",
        "\n",
        "学力テストの結果と身長には正の相関があると言われています。このとき、この 2 つには因果関係が存在するのでしょうか。\n",
        "\n",
        "回答としては No だと分かります。実は、身長・テストの点数には、第 3 の要因となる「年齢」が紐付いています。つまり、年齢（C） ⇒ 身長（A）、年齢（C） ⇒ テストの点数（B）の様な関係性になっているのです。\n",
        "\n",
        "また、今回の年齢（C）の様な要因を交絡因子と呼びます。\n",
        "\n",
        "第 3 の要因が 2 変数の間に介在している場合\n",
        "\n",
        "実は、「ウォーキングをすると体重が増える」には相関があるのですが、これも相関を使用して説明ができます。もちろんこれには直接的な因果関係はなく、ウォーキングをする（A） ⇒ 空腹から過剰に食べる（C） ⇒ 体重が増える（B）という関係になっています。\n",
        "\n",
        "実際には因果関係がないものでも相関が出てしまい、因果関係があるように見えてしまうことが多々あります。これを解決する方法は様々あるのですが、第一に疑う姿勢を持つことを大切にしましょう。\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fimuJpfDFYxq"
      },
      "source": [
        "メモ：受講者にも演習として検定を行っていただく。"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tm0hhv5KwZOE"
      },
      "source": [
        "## 機械学習を行い分析を行う\n",
        "売上予測の重回帰モデルを作成して、売上の要因→成約の要因を探す\n",
        "成約している人のみに注目し、売上に影響（成約）与える要因を探索する。\n",
        "\n",
        "期待すること\n",
        "- 売上の高い→優良顧客の発見\n",
        "- 成約はするが売上の低い顧客属性の発見\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_0Ubm6Yjrh4K",
        "outputId": "2a94fd3f-f25f-428f-e753-9b2af8025f8c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['仕事', '結婚状況', '最終学歴', '債務不履行の有無', '持ち家の有無', 'ローンの有無', '客へ最後に連絡した際の連絡手段', 'month', '成約の有無', '担当営業マン']\n"
          ]
        }
      ],
      "source": [
        "# prompt: data から文字列の列を抽出してください\n",
        "\n",
        "string_cols = data.select_dtypes(include='object').columns.tolist()\n",
        "print(string_cols)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 347
        },
        "id": "5eXV3tXbfn5u",
        "outputId": "51ec815d-b004-4b37-9719-fdfd1474afe4"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 11165,\n  \"fields\": [\n    {\n      \"column\": \"\\u52171\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3222.3361866819546,\n        \"min\": 0.0,\n        \"max\": 11161.0,\n        \"num_unique_values\": 11162,\n        \"samples\": [\n          5527.0,\n          4541.0,\n          1964.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5e74\\u9f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.913369192215526,\n        \"min\": 18.0,\n        \"max\": 95.0,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          54.0,\n          47.0,\n          30.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u4ed5\\u4e8b\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"self-employed\",\n          \"unknown\",\n          \"admin.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u7d50\\u5a5a\\u72b6\\u6cc1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"married\",\n          \"single\",\n          \"divorced\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6700\\u7d42\\u5b66\\u6b74\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"tertiary\",\n          \"unknown\",\n          \"secondary\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u50b5\\u52d9\\u4e0d\\u5c65\\u884c\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"yes\",\n          \"no\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9280\\u884c\\u6b8b\\u9ad8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3225.413325946151,\n        \"min\": -6847.0,\n        \"max\": 81204.0,\n        \"num_unique_values\": 3805,\n        \"samples\": [\n          3026.0,\n          1792.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6301\\u3061\\u5bb6\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u30ed\\u30fc\\u30f3\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"yes\",\n          \"no\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5ba2\\u3078\\u6700\\u5f8c\\u306b\\u9023\\u7d61\\u3057\\u305f\\u969b\\u306e\\u9023\\u7d61\\u624b\\u6bb5\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"unknown\",\n          \"cellular\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.420739541006451,\n        \"min\": 1.0,\n        \"max\": 31.0,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          10.0,\n          27.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"apr\",\n          \"mar\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9023\\u7d61\\u3067\\u63a5\\u89e6\\u3057\\u305f\\u6642\\u9593\\uff08\\u79d2\\u6570\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 347.12838571630584,\n        \"min\": 2.0,\n        \"max\": 3881.0,\n        \"num_unique_values\": 1428,\n        \"samples\": [\n          597.0,\n          346.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pdays\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.75828197197696,\n        \"min\": -1.0,\n        \"max\": 854.0,\n        \"num_unique_values\": 472,\n        \"samples\": [\n          294.0,\n          148.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"previous\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2920072186705047,\n        \"min\": 0.0,\n        \"max\": 58.0,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          30.0,\n          14.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6210\\u7d04\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u62c5\\u5f53\\u55b6\\u696d\\u30de\\u30f3\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"E\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u58f2\\u4e0a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.692649866909434,\n        \"min\": 0.0,\n        \"max\": 812.04,\n        \"num_unique_values\": 2256,\n        \"samples\": [\n          4.36,\n          75.85000000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "data"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-c2bf0f42-60e8-4ff4-b6b3-d9d0eedad6e9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>列1</th>\n",
              "      <th>年齢</th>\n",
              "      <th>仕事</th>\n",
              "      <th>結婚状況</th>\n",
              "      <th>最終学歴</th>\n",
              "      <th>債務不履行の有無</th>\n",
              "      <th>銀行残高</th>\n",
              "      <th>持ち家の有無</th>\n",
              "      <th>ローンの有無</th>\n",
              "      <th>客へ最後に連絡した際の連絡手段</th>\n",
              "      <th>day</th>\n",
              "      <th>month</th>\n",
              "      <th>連絡で接触した時間（秒数</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>成約の有無</th>\n",
              "      <th>担当営業マン</th>\n",
              "      <th>売上</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>2343.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>1042.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>B</td>\n",
              "      <td>23.43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>45.0</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>1467.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>E</td>\n",
              "      <td>0.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>technician</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>1270.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>1389.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>A</td>\n",
              "      <td>12.70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>2476.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>579.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>D</td>\n",
              "      <td>24.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>tertiary</td>\n",
              "      <td>no</td>\n",
              "      <td>184.0</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>673.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>yes</td>\n",
              "      <td>E</td>\n",
              "      <td>1.84</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c2bf0f42-60e8-4ff4-b6b3-d9d0eedad6e9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c2bf0f42-60e8-4ff4-b6b3-d9d0eedad6e9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c2bf0f42-60e8-4ff4-b6b3-d9d0eedad6e9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-90c39624-bb13-4314-86c3-06f64decea0b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-90c39624-bb13-4314-86c3-06f64decea0b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-90c39624-bb13-4314-86c3-06f64decea0b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "    列1    年齢          仕事     結婚状況       最終学歴 債務不履行の有無    銀行残高 持ち家の有無 ローンの有無  \\\n",
              "0  0.0  59.0      admin.  married  secondary       no  2343.0    yes     no   \n",
              "1  1.0  56.0      admin.  married  secondary       no    45.0     no     no   \n",
              "2  2.0  41.0  technician  married  secondary       no  1270.0    yes     no   \n",
              "3  3.0  55.0    services  married  secondary       no  2476.0    yes     no   \n",
              "4  4.0  54.0      admin.  married   tertiary       no   184.0     no     no   \n",
              "\n",
              "  客へ最後に連絡した際の連絡手段  day month  連絡で接触した時間（秒数  pdays  previous 成約の有無 担当営業マン  \\\n",
              "0         unknown  5.0   may        1042.0   -1.0       0.0   yes      B   \n",
              "1         unknown  5.0   may        1467.0   -1.0       0.0   yes      E   \n",
              "2         unknown  5.0   may        1389.0   -1.0       0.0   yes      A   \n",
              "3         unknown  5.0   may         579.0   -1.0       0.0   yes      D   \n",
              "4         unknown  5.0   may         673.0   -1.0       0.0   yes      E   \n",
              "\n",
              "      売上  \n",
              "0  23.43  \n",
              "1   0.45  \n",
              "2  12.70  \n",
              "3  24.76  \n",
              "4   1.84  "
            ]
          },
          "execution_count": 36,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XSnPPX9rf-0v"
      },
      "source": [
        "二値の値はラベルエンコーディング"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 160
        },
        "id": "-Unao5rhf7Mq",
        "outputId": "aaa3af6f-d950-4218-d9bb-5c6fb96e60f4"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"df_obj\",\n  \"rows\": 11165,\n  \"fields\": [\n    {\n      \"column\": \"\\u4ed5\\u4e8b\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"self-employed\",\n          \"unknown\",\n          \"admin.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u7d50\\u5a5a\\u72b6\\u6cc1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"married\",\n          \"single\",\n          \"divorced\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6700\\u7d42\\u5b66\\u6b74\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"tertiary\",\n          \"unknown\",\n          \"secondary\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u50b5\\u52d9\\u4e0d\\u5c65\\u884c\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"yes\",\n          \"no\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6301\\u3061\\u5bb6\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u30ed\\u30fc\\u30f3\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"yes\",\n          \"no\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5ba2\\u3078\\u6700\\u5f8c\\u306b\\u9023\\u7d61\\u3057\\u305f\\u969b\\u306e\\u9023\\u7d61\\u624b\\u6bb5\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"unknown\",\n          \"cellular\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"apr\",\n          \"mar\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6210\\u7d04\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u62c5\\u5f53\\u55b6\\u696d\\u30de\\u30f3\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"E\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "df_obj"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-ab1eb3fd-f297-49a4-b032-768a9f4248d9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>仕事</th>\n",
              "      <th>結婚状況</th>\n",
              "      <th>最終学歴</th>\n",
              "      <th>債務不履行の有無</th>\n",
              "      <th>持ち家の有無</th>\n",
              "      <th>ローンの有無</th>\n",
              "      <th>客へ最後に連絡した際の連絡手段</th>\n",
              "      <th>month</th>\n",
              "      <th>成約の有無</th>\n",
              "      <th>担当営業マン</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>may</td>\n",
              "      <td>yes</td>\n",
              "      <td>B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>may</td>\n",
              "      <td>yes</td>\n",
              "      <td>E</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>technician</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>may</td>\n",
              "      <td>yes</td>\n",
              "      <td>A</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ab1eb3fd-f297-49a4-b032-768a9f4248d9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ab1eb3fd-f297-49a4-b032-768a9f4248d9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ab1eb3fd-f297-49a4-b032-768a9f4248d9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-56d42f8f-8078-4376-b117-5d59a487c4a9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-56d42f8f-8078-4376-b117-5d59a487c4a9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-56d42f8f-8078-4376-b117-5d59a487c4a9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "           仕事     結婚状況       最終学歴 債務不履行の有無 持ち家の有無 ローンの有無 客へ最後に連絡した際の連絡手段  \\\n",
              "0      admin.  married  secondary       no    yes     no         unknown   \n",
              "1      admin.  married  secondary       no     no     no         unknown   \n",
              "2  technician  married  secondary       no    yes     no         unknown   \n",
              "\n",
              "  month 成約の有無 担当営業マン  \n",
              "0   may   yes      B  \n",
              "1   may   yes      E  \n",
              "2   may   yes      A  "
            ]
          },
          "execution_count": 37,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# カテゴリカル変数を含んだデータのみを抽出\n",
        "df_obj = data.select_dtypes(include='object')\n",
        "df_obj.head(3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xoNDPu22gFbx",
        "outputId": "49cfc03b-7763-46d3-f8c7-f9543a7f971d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "仕事                 12\n",
              "結婚状況                3\n",
              "最終学歴                4\n",
              "債務不履行の有無            2\n",
              "持ち家の有無              2\n",
              "ローンの有無              2\n",
              "客へ最後に連絡した際の連絡手段     3\n",
              "month              12\n",
              "成約の有無               2\n",
              "担当営業マン              5\n",
              "dtype: int64"
            ]
          },
          "execution_count": 38,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_uni = df_obj.nunique()\n",
        "df_uni"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5PN4GDS_gHri"
      },
      "outputs": [],
      "source": [
        "# モデルの宣言\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M3cjOXspgT0m",
        "outputId": "16ff7dff-458e-4906-f48c-e789938f6034"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['債務不履行の有無', '持ち家の有無', 'ローンの有無', '成約の有無'], dtype='object')"
            ]
          },
          "execution_count": 40,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# ユニークな値が 2 種類の列名のみ取得\n",
        "df_cols = df_uni[df_uni == 2].index\n",
        "df_cols"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lEXkrZHEgLyP"
      },
      "outputs": [],
      "source": [
        "for col in df_cols:\n",
        "  le = LabelEncoder()\n",
        "  le.fit(data[col])\n",
        "  data[col] = le.transform(data[col])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 347
        },
        "id": "7VwLhPsTgU19",
        "outputId": "e3759f8c-f3fa-4cc9-ffaf-766b686c5866"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 11165,\n  \"fields\": [\n    {\n      \"column\": \"\\u52171\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3222.3361866819546,\n        \"min\": 0.0,\n        \"max\": 11161.0,\n        \"num_unique_values\": 11162,\n        \"samples\": [\n          5527.0,\n          4541.0,\n          1964.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5e74\\u9f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.913369192215526,\n        \"min\": 18.0,\n        \"max\": 95.0,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          54.0,\n          47.0,\n          30.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u4ed5\\u4e8b\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"self-employed\",\n          \"unknown\",\n          \"admin.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u7d50\\u5a5a\\u72b6\\u6cc1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"married\",\n          \"single\",\n          \"divorced\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6700\\u7d42\\u5b66\\u6b74\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"tertiary\",\n          \"unknown\",\n          \"secondary\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u50b5\\u52d9\\u4e0d\\u5c65\\u884c\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9280\\u884c\\u6b8b\\u9ad8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3225.413325946151,\n        \"min\": -6847.0,\n        \"max\": 81204.0,\n        \"num_unique_values\": 3805,\n        \"samples\": [\n          3026.0,\n          1792.0,\n          566.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6301\\u3061\\u5bb6\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u30ed\\u30fc\\u30f3\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5ba2\\u3078\\u6700\\u5f8c\\u306b\\u9023\\u7d61\\u3057\\u305f\\u969b\\u306e\\u9023\\u7d61\\u624b\\u6bb5\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"unknown\",\n          \"cellular\",\n          \"telephone\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.420739541006451,\n        \"min\": 1.0,\n        \"max\": 31.0,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          10.0,\n          27.0,\n          17.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"apr\",\n          \"mar\",\n          \"may\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9023\\u7d61\\u3067\\u63a5\\u89e6\\u3057\\u305f\\u6642\\u9593\\uff08\\u79d2\\u6570\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 347.12838571630584,\n        \"min\": 2.0,\n        \"max\": 3881.0,\n        \"num_unique_values\": 1428,\n        \"samples\": [\n          597.0,\n          346.0,\n          1422.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pdays\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.75828197197696,\n        \"min\": -1.0,\n        \"max\": 854.0,\n        \"num_unique_values\": 472,\n        \"samples\": [\n          294.0,\n          148.0,\n          76.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"previous\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2920072186705047,\n        \"min\": 0.0,\n        \"max\": 58.0,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          30.0,\n          14.0,\n          27.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6210\\u7d04\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u62c5\\u5f53\\u55b6\\u696d\\u30de\\u30f3\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"E\",\n          \"C\",\n          \"A\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u58f2\\u4e0a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.692649866909434,\n        \"min\": 0.0,\n        \"max\": 812.04,\n        \"num_unique_values\": 2256,\n        \"samples\": [\n          4.36,\n          75.85000000000001,\n          13.09\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "data"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-9ee3a902-8fe1-42ed-93b3-c55693575693\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>列1</th>\n",
              "      <th>年齢</th>\n",
              "      <th>仕事</th>\n",
              "      <th>結婚状況</th>\n",
              "      <th>最終学歴</th>\n",
              "      <th>債務不履行の有無</th>\n",
              "      <th>銀行残高</th>\n",
              "      <th>持ち家の有無</th>\n",
              "      <th>ローンの有無</th>\n",
              "      <th>客へ最後に連絡した際の連絡手段</th>\n",
              "      <th>day</th>\n",
              "      <th>month</th>\n",
              "      <th>連絡で接触した時間（秒数</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>成約の有無</th>\n",
              "      <th>担当営業マン</th>\n",
              "      <th>売上</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>0</td>\n",
              "      <td>2343.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>1042.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>B</td>\n",
              "      <td>23.43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>1467.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>E</td>\n",
              "      <td>0.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>technician</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>0</td>\n",
              "      <td>1270.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>1389.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>A</td>\n",
              "      <td>12.70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>0</td>\n",
              "      <td>2476.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>579.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>D</td>\n",
              "      <td>24.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>54.0</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>tertiary</td>\n",
              "      <td>0</td>\n",
              "      <td>184.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>673.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>E</td>\n",
              "      <td>1.84</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9ee3a902-8fe1-42ed-93b3-c55693575693')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9ee3a902-8fe1-42ed-93b3-c55693575693 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9ee3a902-8fe1-42ed-93b3-c55693575693');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1dfe8420-eca0-4f51-970d-95906d0772e5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1dfe8420-eca0-4f51-970d-95906d0772e5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1dfe8420-eca0-4f51-970d-95906d0772e5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "    列1    年齢          仕事     結婚状況       最終学歴  債務不履行の有無    銀行残高  持ち家の有無  \\\n",
              "0  0.0  59.0      admin.  married  secondary         0  2343.0       1   \n",
              "1  1.0  56.0      admin.  married  secondary         0    45.0       0   \n",
              "2  2.0  41.0  technician  married  secondary         0  1270.0       1   \n",
              "3  3.0  55.0    services  married  secondary         0  2476.0       1   \n",
              "4  4.0  54.0      admin.  married   tertiary         0   184.0       0   \n",
              "\n",
              "   ローンの有無 客へ最後に連絡した際の連絡手段  day month  連絡で接触した時間（秒数  pdays  previous  成約の有無  \\\n",
              "0       0         unknown  5.0   may        1042.0   -1.0       0.0      1   \n",
              "1       0         unknown  5.0   may        1467.0   -1.0       0.0      1   \n",
              "2       0         unknown  5.0   may        1389.0   -1.0       0.0      1   \n",
              "3       0         unknown  5.0   may         579.0   -1.0       0.0      1   \n",
              "4       0         unknown  5.0   may         673.0   -1.0       0.0      1   \n",
              "\n",
              "  担当営業マン     売上  \n",
              "0      B  23.43  \n",
              "1      E   0.45  \n",
              "2      A  12.70  \n",
              "3      D  24.76  \n",
              "4      E   1.84  "
            ]
          },
          "execution_count": 42,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yq14nC0ugh3P"
      },
      "outputs": [],
      "source": [
        "data.drop(['列1'], axis=1, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 347
        },
        "id": "wDAG_yqIgtdP",
        "outputId": "9d699087-c4e7-4063-d9a3-4c2226221933"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 11165,\n  \"fields\": [\n    {\n      \"column\": \"\\u5e74\\u9f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.913369192215526,\n        \"min\": 18.0,\n        \"max\": 95.0,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          54.0,\n          47.0,\n          30.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u4ed5\\u4e8b\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"self-employed\",\n          \"unknown\",\n          \"admin.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u7d50\\u5a5a\\u72b6\\u6cc1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"married\",\n          \"single\",\n          \"divorced\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6700\\u7d42\\u5b66\\u6b74\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"tertiary\",\n          \"unknown\",\n          \"secondary\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u50b5\\u52d9\\u4e0d\\u5c65\\u884c\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9280\\u884c\\u6b8b\\u9ad8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3225.413325946151,\n        \"min\": -6847.0,\n        \"max\": 81204.0,\n        \"num_unique_values\": 3805,\n        \"samples\": [\n          3026.0,\n          1792.0,\n          566.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6301\\u3061\\u5bb6\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u30ed\\u30fc\\u30f3\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5ba2\\u3078\\u6700\\u5f8c\\u306b\\u9023\\u7d61\\u3057\\u305f\\u969b\\u306e\\u9023\\u7d61\\u624b\\u6bb5\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"unknown\",\n          \"cellular\",\n          \"telephone\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.420739541006451,\n        \"min\": 1.0,\n        \"max\": 31.0,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          10.0,\n          27.0,\n          17.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"apr\",\n          \"mar\",\n          \"may\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9023\\u7d61\\u3067\\u63a5\\u89e6\\u3057\\u305f\\u6642\\u9593\\uff08\\u79d2\\u6570\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 347.12838571630584,\n        \"min\": 2.0,\n        \"max\": 3881.0,\n        \"num_unique_values\": 1428,\n        \"samples\": [\n          597.0,\n          346.0,\n          1422.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pdays\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.75828197197696,\n        \"min\": -1.0,\n        \"max\": 854.0,\n        \"num_unique_values\": 472,\n        \"samples\": [\n          294.0,\n          148.0,\n          76.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"previous\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2920072186705047,\n        \"min\": 0.0,\n        \"max\": 58.0,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          30.0,\n          14.0,\n          27.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6210\\u7d04\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u62c5\\u5f53\\u55b6\\u696d\\u30de\\u30f3\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"E\",\n          \"C\",\n          \"A\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u58f2\\u4e0a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.692649866909434,\n        \"min\": 0.0,\n        \"max\": 812.04,\n        \"num_unique_values\": 2256,\n        \"samples\": [\n          4.36,\n          75.85000000000001,\n          13.09\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "data"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-0dcd9b81-0441-4c05-b2ed-45266862aecd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>年齢</th>\n",
              "      <th>仕事</th>\n",
              "      <th>結婚状況</th>\n",
              "      <th>最終学歴</th>\n",
              "      <th>債務不履行の有無</th>\n",
              "      <th>銀行残高</th>\n",
              "      <th>持ち家の有無</th>\n",
              "      <th>ローンの有無</th>\n",
              "      <th>客へ最後に連絡した際の連絡手段</th>\n",
              "      <th>day</th>\n",
              "      <th>month</th>\n",
              "      <th>連絡で接触した時間（秒数</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>成約の有無</th>\n",
              "      <th>担当営業マン</th>\n",
              "      <th>売上</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>59.0</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>0</td>\n",
              "      <td>2343.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>1042.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>B</td>\n",
              "      <td>23.43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>56.0</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>1467.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>E</td>\n",
              "      <td>0.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>41.0</td>\n",
              "      <td>technician</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>0</td>\n",
              "      <td>1270.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>1389.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>A</td>\n",
              "      <td>12.70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>55.0</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>0</td>\n",
              "      <td>2476.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>579.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>D</td>\n",
              "      <td>24.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>54.0</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>tertiary</td>\n",
              "      <td>0</td>\n",
              "      <td>184.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5.0</td>\n",
              "      <td>may</td>\n",
              "      <td>673.0</td>\n",
              "      <td>-1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>E</td>\n",
              "      <td>1.84</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0dcd9b81-0441-4c05-b2ed-45266862aecd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0dcd9b81-0441-4c05-b2ed-45266862aecd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0dcd9b81-0441-4c05-b2ed-45266862aecd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a2391975-d10d-4c3d-bcdb-4cdeb5531aa0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a2391975-d10d-4c3d-bcdb-4cdeb5531aa0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a2391975-d10d-4c3d-bcdb-4cdeb5531aa0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "     年齢          仕事     結婚状況       最終学歴  債務不履行の有無    銀行残高  持ち家の有無  ローンの有無  \\\n",
              "0  59.0      admin.  married  secondary         0  2343.0       1       0   \n",
              "1  56.0      admin.  married  secondary         0    45.0       0       0   \n",
              "2  41.0  technician  married  secondary         0  1270.0       1       0   \n",
              "3  55.0    services  married  secondary         0  2476.0       1       0   \n",
              "4  54.0      admin.  married   tertiary         0   184.0       0       0   \n",
              "\n",
              "  客へ最後に連絡した際の連絡手段  day month  連絡で接触した時間（秒数  pdays  previous  成約の有無 担当営業マン  \\\n",
              "0         unknown  5.0   may        1042.0   -1.0       0.0      1      B   \n",
              "1         unknown  5.0   may        1467.0   -1.0       0.0      1      E   \n",
              "2         unknown  5.0   may        1389.0   -1.0       0.0      1      A   \n",
              "3         unknown  5.0   may         579.0   -1.0       0.0      1      D   \n",
              "4         unknown  5.0   may         673.0   -1.0       0.0      1      E   \n",
              "\n",
              "      売上  \n",
              "0  23.43  \n",
              "1   0.45  \n",
              "2  12.70  \n",
              "3  24.76  \n",
              "4   1.84  "
            ]
          },
          "execution_count": 44,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1tiRyr3YxC48"
      },
      "outputs": [],
      "source": [
        "data.drop(['previous','pdays','債務不履行の有無','連絡で接触した時間（秒数','month','担当営業マン','客へ最後に連絡した際の連絡手段'], axis=1, inplace=True)\n",
        "# 'Unnamed: 18','Unnamed: 19','Unnamed: 20'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6a0U16E5xUnI"
      },
      "outputs": [],
      "source": [
        "mldata = pd.get_dummies(data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SLWIN1mLxVo9",
        "outputId": "ce4b5931-a679-4f61-d6c7-cc96a60ef5c8"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(11165, 26)"
            ]
          },
          "execution_count": 50,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "mldata.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 342
        },
        "id": "5AdJpR4JxVlP",
        "outputId": "eaaacd29-d54d-4ce8-8559-e3226856207d"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "mldata"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-6331a0cc-555d-4195-8a84-a37708106971\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>年齢</th>\n",
              "      <th>銀行残高</th>\n",
              "      <th>持ち家の有無</th>\n",
              "      <th>ローンの有無</th>\n",
              "      <th>day</th>\n",
              "      <th>成約の有無</th>\n",
              "      <th>売上</th>\n",
              "      <th>仕事_admin.</th>\n",
              "      <th>仕事_blue-collar</th>\n",
              "      <th>仕事_entrepreneur</th>\n",
              "      <th>...</th>\n",
              "      <th>仕事_technician</th>\n",
              "      <th>仕事_unemployed</th>\n",
              "      <th>仕事_unknown</th>\n",
              "      <th>結婚状況_divorced</th>\n",
              "      <th>結婚状況_married</th>\n",
              "      <th>結婚状況_single</th>\n",
              "      <th>最終学歴_primary</th>\n",
              "      <th>最終学歴_secondary</th>\n",
              "      <th>最終学歴_tertiary</th>\n",
              "      <th>最終学歴_unknown</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>59.0</td>\n",
              "      <td>2343.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>23.43</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>56.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.45</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>41.0</td>\n",
              "      <td>1270.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>12.70</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>55.0</td>\n",
              "      <td>2476.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>24.76</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>54.0</td>\n",
              "      <td>184.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.84</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 26 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6331a0cc-555d-4195-8a84-a37708106971')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6331a0cc-555d-4195-8a84-a37708106971 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6331a0cc-555d-4195-8a84-a37708106971');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ba710849-bb1e-4149-8c45-62a3e69d1bc6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ba710849-bb1e-4149-8c45-62a3e69d1bc6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ba710849-bb1e-4149-8c45-62a3e69d1bc6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "     年齢    銀行残高  持ち家の有無  ローンの有無  day  成約の有無     売上  仕事_admin.  仕事_blue-collar  \\\n",
              "0  59.0  2343.0       1       0  5.0      1  23.43       True           False   \n",
              "1  56.0    45.0       0       0  5.0      1   0.45       True           False   \n",
              "2  41.0  1270.0       1       0  5.0      1  12.70      False           False   \n",
              "3  55.0  2476.0       1       0  5.0      1  24.76      False           False   \n",
              "4  54.0   184.0       0       0  5.0      1   1.84       True           False   \n",
              "\n",
              "   仕事_entrepreneur  ...  仕事_technician  仕事_unemployed  仕事_unknown  \\\n",
              "0            False  ...          False          False       False   \n",
              "1            False  ...          False          False       False   \n",
              "2            False  ...           True          False       False   \n",
              "3            False  ...          False          False       False   \n",
              "4            False  ...          False          False       False   \n",
              "\n",
              "   結婚状況_divorced  結婚状況_married  結婚状況_single  最終学歴_primary  最終学歴_secondary  \\\n",
              "0          False          True        False         False            True   \n",
              "1          False          True        False         False            True   \n",
              "2          False          True        False         False            True   \n",
              "3          False          True        False         False            True   \n",
              "4          False          True        False         False           False   \n",
              "\n",
              "   最終学歴_tertiary  最終学歴_unknown  \n",
              "0          False         False  \n",
              "1          False         False  \n",
              "2          False         False  \n",
              "3          False         False  \n",
              "4           True         False  \n",
              "\n",
              "[5 rows x 26 columns]"
            ]
          },
          "execution_count": 51,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "mldata.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QAHsawfcHFQ1",
        "outputId": "9848d81b-c2b2-44be-c31f-c3d050daa9d6"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "年齢                  3\n",
              "銀行残高                3\n",
              "持ち家の有無              0\n",
              "ローンの有無              0\n",
              "day                 3\n",
              "成約の有無               0\n",
              "売上                  0\n",
              "仕事_admin.           0\n",
              "仕事_blue-collar      0\n",
              "仕事_entrepreneur     0\n",
              "仕事_housemaid        0\n",
              "仕事_management       0\n",
              "仕事_retired          0\n",
              "仕事_self-employed    0\n",
              "仕事_services         0\n",
              "仕事_student          0\n",
              "仕事_technician       0\n",
              "仕事_unemployed       0\n",
              "仕事_unknown          0\n",
              "結婚状況_divorced       0\n",
              "結婚状況_married        0\n",
              "結婚状況_single         0\n",
              "最終学歴_primary        0\n",
              "最終学歴_secondary      0\n",
              "最終学歴_tertiary       0\n",
              "最終学歴_unknown        0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 52,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# 欠損値の数を確認\n",
        "mldata.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z9vrCIaGHtcL",
        "outputId": "9e24782a-5d28-4bba-d259-72ae18a32a6e"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "年齢                  0\n",
              "銀行残高                0\n",
              "持ち家の有無              0\n",
              "ローンの有無              0\n",
              "day                 0\n",
              "成約の有無               0\n",
              "売上                  0\n",
              "仕事_admin.           0\n",
              "仕事_blue-collar      0\n",
              "仕事_entrepreneur     0\n",
              "仕事_housemaid        0\n",
              "仕事_management       0\n",
              "仕事_retired          0\n",
              "仕事_self-employed    0\n",
              "仕事_services         0\n",
              "仕事_student          0\n",
              "仕事_technician       0\n",
              "仕事_unemployed       0\n",
              "仕事_unknown          0\n",
              "結婚状況_divorced       0\n",
              "結婚状況_married        0\n",
              "結婚状況_single         0\n",
              "最終学歴_primary        0\n",
              "最終学歴_secondary      0\n",
              "最終学歴_tertiary       0\n",
              "最終学歴_unknown        0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 53,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "mldata= mldata.dropna()\n",
        "mldata.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 185
        },
        "id": "oryV5griIFBw",
        "outputId": "0a844f91-eda0-45ac-d5ff-5b8a3b78e3d2"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-01e21a67-69e4-4b83-bc37-0bcf92757903\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>年齢</th>\n",
              "      <th>銀行残高</th>\n",
              "      <th>持ち家の有無</th>\n",
              "      <th>ローンの有無</th>\n",
              "      <th>day</th>\n",
              "      <th>成約の有無</th>\n",
              "      <th>売上</th>\n",
              "      <th>仕事_admin.</th>\n",
              "      <th>仕事_blue-collar</th>\n",
              "      <th>仕事_entrepreneur</th>\n",
              "      <th>...</th>\n",
              "      <th>仕事_technician</th>\n",
              "      <th>仕事_unemployed</th>\n",
              "      <th>仕事_unknown</th>\n",
              "      <th>結婚状況_divorced</th>\n",
              "      <th>結婚状況_married</th>\n",
              "      <th>結婚状況_single</th>\n",
              "      <th>最終学歴_primary</th>\n",
              "      <th>最終学歴_secondary</th>\n",
              "      <th>最終学歴_tertiary</th>\n",
              "      <th>最終学歴_unknown</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>0 rows × 26 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-01e21a67-69e4-4b83-bc37-0bcf92757903')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-01e21a67-69e4-4b83-bc37-0bcf92757903 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-01e21a67-69e4-4b83-bc37-0bcf92757903');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [年齢, 銀行残高, 持ち家の有無, ローンの有無, day, 成約の有無, 売上, 仕事_admin., 仕事_blue-collar, 仕事_entrepreneur, 仕事_housemaid, 仕事_management, 仕事_retired, 仕事_self-employed, 仕事_services, 仕事_student, 仕事_technician, 仕事_unemployed, 仕事_unknown, 結婚状況_divorced, 結婚状況_married, 結婚状況_single, 最終学歴_primary, 最終学歴_secondary, 最終学歴_tertiary, 最終学歴_unknown]\n",
              "Index: []\n",
              "\n",
              "[0 rows x 26 columns]"
            ]
          },
          "execution_count": 54,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# prompt: mldata からNaN\n",
        "\n",
        "mldata[mldata.isnull().any(axis=1)]\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 342
        },
        "id": "JBMtntrFQkc8",
        "outputId": "65d1580a-4ce4-4ca3-f787-ffabfe21d2d8"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "mldata"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-08a77d1c-2360-4931-bf93-ef3721b46434\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>年齢</th>\n",
              "      <th>銀行残高</th>\n",
              "      <th>持ち家の有無</th>\n",
              "      <th>ローンの有無</th>\n",
              "      <th>day</th>\n",
              "      <th>成約の有無</th>\n",
              "      <th>売上</th>\n",
              "      <th>仕事_admin.</th>\n",
              "      <th>仕事_blue-collar</th>\n",
              "      <th>仕事_entrepreneur</th>\n",
              "      <th>...</th>\n",
              "      <th>仕事_technician</th>\n",
              "      <th>仕事_unemployed</th>\n",
              "      <th>仕事_unknown</th>\n",
              "      <th>結婚状況_divorced</th>\n",
              "      <th>結婚状況_married</th>\n",
              "      <th>結婚状況_single</th>\n",
              "      <th>最終学歴_primary</th>\n",
              "      <th>最終学歴_secondary</th>\n",
              "      <th>最終学歴_tertiary</th>\n",
              "      <th>最終学歴_unknown</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>59.0</td>\n",
              "      <td>2343.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>23.43</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>56.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.45</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>41.0</td>\n",
              "      <td>1270.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>12.70</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>55.0</td>\n",
              "      <td>2476.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>24.76</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>54.0</td>\n",
              "      <td>184.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.84</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 26 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-08a77d1c-2360-4931-bf93-ef3721b46434')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-08a77d1c-2360-4931-bf93-ef3721b46434 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-08a77d1c-2360-4931-bf93-ef3721b46434');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-88684878-4a84-4066-b0da-f44ca7b961d9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-88684878-4a84-4066-b0da-f44ca7b961d9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-88684878-4a84-4066-b0da-f44ca7b961d9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "     年齢    銀行残高  持ち家の有無  ローンの有無  day  成約の有無     売上  仕事_admin.  仕事_blue-collar  \\\n",
              "0  59.0  2343.0       1       0  5.0      1  23.43       True           False   \n",
              "1  56.0    45.0       0       0  5.0      1   0.45       True           False   \n",
              "2  41.0  1270.0       1       0  5.0      1  12.70      False           False   \n",
              "3  55.0  2476.0       1       0  5.0      1  24.76      False           False   \n",
              "4  54.0   184.0       0       0  5.0      1   1.84       True           False   \n",
              "\n",
              "   仕事_entrepreneur  ...  仕事_technician  仕事_unemployed  仕事_unknown  \\\n",
              "0            False  ...          False          False       False   \n",
              "1            False  ...          False          False       False   \n",
              "2            False  ...           True          False       False   \n",
              "3            False  ...          False          False       False   \n",
              "4            False  ...          False          False       False   \n",
              "\n",
              "   結婚状況_divorced  結婚状況_married  結婚状況_single  最終学歴_primary  最終学歴_secondary  \\\n",
              "0          False          True        False         False            True   \n",
              "1          False          True        False         False            True   \n",
              "2          False          True        False         False            True   \n",
              "3          False          True        False         False            True   \n",
              "4          False          True        False         False           False   \n",
              "\n",
              "   最終学歴_tertiary  最終学歴_unknown  \n",
              "0          False         False  \n",
              "1          False         False  \n",
              "2          False         False  \n",
              "3          False         False  \n",
              "4           True         False  \n",
              "\n",
              "[5 rows x 26 columns]"
            ]
          },
          "execution_count": 55,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# prompt: 成約の有無列がyesだけのデータを取得\n",
        "mldata.head()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 342
        },
        "id": "C948-uIqRHUg",
        "outputId": "5691d358-9273-4a65-bca8-e14c8bbb00cb"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "mldata_yes"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-19e43678-eb8d-46ef-8ebb-bb2c7ac56adf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>年齢</th>\n",
              "      <th>銀行残高</th>\n",
              "      <th>持ち家の有無</th>\n",
              "      <th>ローンの有無</th>\n",
              "      <th>day</th>\n",
              "      <th>成約の有無</th>\n",
              "      <th>売上</th>\n",
              "      <th>仕事_admin.</th>\n",
              "      <th>仕事_blue-collar</th>\n",
              "      <th>仕事_entrepreneur</th>\n",
              "      <th>...</th>\n",
              "      <th>仕事_technician</th>\n",
              "      <th>仕事_unemployed</th>\n",
              "      <th>仕事_unknown</th>\n",
              "      <th>結婚状況_divorced</th>\n",
              "      <th>結婚状況_married</th>\n",
              "      <th>結婚状況_single</th>\n",
              "      <th>最終学歴_primary</th>\n",
              "      <th>最終学歴_secondary</th>\n",
              "      <th>最終学歴_tertiary</th>\n",
              "      <th>最終学歴_unknown</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>59.0</td>\n",
              "      <td>2343.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>23.43</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>56.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.45</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>41.0</td>\n",
              "      <td>1270.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>12.70</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>55.0</td>\n",
              "      <td>2476.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>24.76</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>54.0</td>\n",
              "      <td>184.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.84</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>...</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 26 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-19e43678-eb8d-46ef-8ebb-bb2c7ac56adf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-19e43678-eb8d-46ef-8ebb-bb2c7ac56adf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-19e43678-eb8d-46ef-8ebb-bb2c7ac56adf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c902c21c-a779-4da4-bb11-b3e30c6399a8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c902c21c-a779-4da4-bb11-b3e30c6399a8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c902c21c-a779-4da4-bb11-b3e30c6399a8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "     年齢    銀行残高  持ち家の有無  ローンの有無  day  成約の有無     売上  仕事_admin.  仕事_blue-collar  \\\n",
              "0  59.0  2343.0       1       0  5.0      1  23.43       True           False   \n",
              "1  56.0    45.0       0       0  5.0      1   0.45       True           False   \n",
              "2  41.0  1270.0       1       0  5.0      1  12.70      False           False   \n",
              "3  55.0  2476.0       1       0  5.0      1  24.76      False           False   \n",
              "4  54.0   184.0       0       0  5.0      1   1.84       True           False   \n",
              "\n",
              "   仕事_entrepreneur  ...  仕事_technician  仕事_unemployed  仕事_unknown  \\\n",
              "0            False  ...          False          False       False   \n",
              "1            False  ...          False          False       False   \n",
              "2            False  ...           True          False       False   \n",
              "3            False  ...          False          False       False   \n",
              "4            False  ...          False          False       False   \n",
              "\n",
              "   結婚状況_divorced  結婚状況_married  結婚状況_single  最終学歴_primary  最終学歴_secondary  \\\n",
              "0          False          True        False         False            True   \n",
              "1          False          True        False         False            True   \n",
              "2          False          True        False         False            True   \n",
              "3          False          True        False         False            True   \n",
              "4          False          True        False         False           False   \n",
              "\n",
              "   最終学歴_tertiary  最終学歴_unknown  \n",
              "0          False         False  \n",
              "1          False         False  \n",
              "2          False         False  \n",
              "3          False         False  \n",
              "4           True         False  \n",
              "\n",
              "[5 rows x 26 columns]"
            ]
          },
          "execution_count": 56,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# prompt: mldata の成約の有無が1のデータを取り出し\n",
        "\n",
        "mldata_yes = mldata[mldata['成約の有無'] == 1]\n",
        "mldata_yes.head()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "blVPAMhEC4aM"
      },
      "source": [
        "### 重回帰分析\n",
        "重回帰分析を行い、売上に影響力のある特徴を算出する"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oMJvGuahxViF"
      },
      "outputs": [],
      "source": [
        "from re import X\n",
        "x = mldata_yes.drop(columns = ['売上','成約の有無']).values\n",
        "t = mldata_yes[['売上']].values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "667--8oSy20H",
        "outputId": "ac12cded-4fa7-4f4a-d8d1-6cd8a226ca18"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "決定係数（r2）:0.999\n",
            "平均誤差（MAE）:0.322\n",
            "平均二乗偏差(RMSE):0.999\n"
          ]
        }
      ],
      "source": [
        "\n",
        "from sklearn.metrics import r2_score, mean_absolute_error,mean_squared_error\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "std_scaler = StandardScaler()\n",
        "std_scaler.fit(x)\n",
        "# 標準化\n",
        "x_train_std = std_scaler.transform(x)\n",
        "# x_test_std = std_scaler.transform(x_test)\n",
        "\n",
        "# モデルの宣言\n",
        "from sklearn.linear_model import LinearRegression\n",
        "model = LinearRegression()\n",
        "model.fit(x,  t,)\n",
        "pred_y = model.predict(x)\n",
        "# モデルの検証\n",
        "print('決定係数（r2）:{}'.format(round(r2_score(t, pred_y),3)))\n",
        "print('平均誤差（MAE）:{}'.format(round(mean_absolute_error(t, pred_y),3)))\n",
        "print('平均二乗偏差(RMSE):{}'.format(round(np.sqrt(mean_squared_error(t, pred_y)),3)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2kgSe7frKASx",
        "outputId": "177db2d5-e448-462d-ed09-ca64f8c190bb"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[ 0.00053038,  0.0099747 ,  0.23074688,  0.45746109, -0.00058006,\n",
              "        -0.06684301, -0.0075477 ,  0.30136415, -0.1284604 , -0.0705586 ,\n",
              "        -0.01391888,  0.15260955,  0.05611743, -0.0738067 ,  0.01946247,\n",
              "        -0.1068266 , -0.06159173,  0.05494255, -0.04260205, -0.01234051,\n",
              "         0.05797679,  0.00055555, -0.01971352, -0.03881882]])"
            ]
          },
          "execution_count": 61,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model.coef_"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 511
        },
        "id": "9UygrB0pRssM",
        "outputId": "4ffd8dd1-beed-4d4a-ded0-c7239e959119"
      },
      "outputs": [
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA7gAAAIgCAYAAACve8XBAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAADlYklEQVR4nOzdd3hP9///8Xt2zMQOSYhRDVKjsWuE0loliFJbKbFnWkqJVZSP2tqaVdQeNVo7tWfFaMVMQkgQJJFEIuP9+8PP+9t3E7yj1HrcrutcV87rvMbznLja65nX67yOhcFgMCAiIiIiIiLyirN80QGIiIiIiIiIPAtKcEVEREREROS1oARXREREREREXgtKcEVEREREROS1oARXREREREREXgtKcEVEREREROS1oARXREREREREXgtKcEVEREREROS1oARXREREREREXgtKcEVERN5gHTt2xMvLK8PtvLy8nqrdf+nmzZv4+Pjg6OiIm5sbK1euJC4ujs8++4zcuXOTP39+pk+f/qLDFBGRZ0gJroiIyAu2cOFCLCwsyJMnD0lJSenWSUxMJFeuXFhYWLBw4cL/NsB/6cCBAzRr1oy8efNib29PkSJF6NGjB8HBwc913O7du3PmzBk2b97M//73P8qUKcOIESPYtGkTy5cvZ8GCBVSqVAkLCwv8/f0z1LeXlxdubm7PJW6AhIQEFi9e/Nz6FxF5XVm/6ABERETkgZSUFH755ReaN2+e5tr69evJnDkzt2/ffgGRPb3p06fTr18/mjRpwqJFi3ByciIoKIgJEyZQvnx5tm7diqen53MZe/v27YwcOZKqVaualLVs2ZL3338fgKSkJM6cOUPu3Lkz1PeiRYse+ceIZ+Gbb75h/vz5tG3b9rmNISLyOtIMroiIyEvio48+Yv78+elemz9/Pq1bt/6PI/p3duzYQd++fRk4cCBr1qyhXr16lC1bllatWrF3714KFizIgAEDntv40dHRODg4mJRFRUWZlNnY2ODu7p7hBLdgwYIULVr0mcSZntTU1OfWt4jI60wJroiIyEuiZcuWbNmyhatXr5qUh4WFsW3btkcmuPv376d27dpkyZIFR0dHmjZtSlBQUJp6S5cupWTJktjZ2eHh4cGyZcvS7e/GjRt06NCBXLly4ejoSJ06dTh06FCG7+err77C1dWVr7/+Os21LFmy8Msv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R/j444/Zu3cv27dvp379+ty5c4fJkycDYGFhwcSJE9m/fz/t2rXjwIEDrF27lg8//JCSJUua9DdgwACKFy9O8+bNmTFjBseOHeOHH36gWbNmZM2aNUP30bhxY8aNG8f06dON79GeOHGCtWvXUrt2bQICAliwYAFWVlZkzZqViRMnsnLlSnr27MnBgwfZsGED9erVI1u2bIwaNQqA7NmzM2HCBPbt28dHH33E9u3b2bNnD97e3mzbto2cOXNm8GmbypIlC9988w2rVq2iS5cu7N27l507d1K/fn02b96Mvb19uu1GjRpFzpw5qV27Nj/++CPHjh3jm2++oVu3bmTPnj3DcRQoUIBr166xdetW5s2bR3JyMkOHDqVixYqsXLmSkydPMmXKFGxsbChXrty/umcRkdfKi93jSkRERP6+i/JDO3fuNACGI0eOmJSTzs7AAQEBhho1ahgyZcpkyJYtm+Gjjz4ynD59Os04y5cvN5QoUcJga2treOeddwzr1683DB06NM1uyDdv3jR07drVkC9fPoOdnZ3hnXfeSTPmk3ZR/ru9e/camjVrZsiTJ4/B2tra4OLiYvjss88MoaGhaequXr3a4OnpabCzszPkzJnT0Lp1a8Ply5fT1Fu1apWhQoUKBjs7O0OuXLkMrVu3NoSFhT3xWT1pF+WHVqxYYXj33XcNtra2hrx58xo+/fRTQ2Rk5GPv/9KlS4ZWrVoZcubMaciUKZOhYsWKhg0bNqQZv0OHDiZl6cUQHR1tqFmzpiFLliyG999/3xAeHm64e/euwc/Pz+Di4mL8vaxfvz7NsxEReZNZGAyP+KCbiIiIiIiIyCtES5RFRERERETktaAEV0RERERERF4LSnBFRERERETktaAEV0RERERERF4LSnBFRERERETktaAEV0RERERERF4L1i86AJFHSU1N5dq1a2TLlg0LC4sXHY6IiIiIiLwgBoOBu3fvUqBAASwtHz1PqwRXXlrXrl3D1dX1RYchIiIiIiIviStXruDi4vLI60pw5aWVLVs24ME/4uzZs7/gaERERERE5EWJiYnB1dXVmCM8ihJceWk9XJacPXt2JbjyxvD0W/SiQxAREREB4NjE9i86hDSe9OqiNpmSdEVERFCnTh2z60dGRrJly5bnGJGIiIiIiMjjaQb3DRAfH8+VK1ewsrKiUKFC2NjYPLHNrl27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/RQfHx/WrVuHhYUFVapUIXPmzPzwww90796dYcOGGTeHunz5Ms7OzgBUr16d48ePM2jQIG7evMnAgQMJCAhg6dKlXLlyhTx58gDwzTffEBYWlubw8PBg1apVacoPHDhgjC08PBw3Nzesra1Zt24djo6OAGzevJmqVauycuVKSpcuzZQpU564gdXf3bp1y/hzbGwskZGRFCpUyFhmzvu8GTFo0CACAgJYuXIloaGhxvea/+6fY+bNmxcfHx9++uknli9f/sTvDIuIiIiIiDytV3qTqb/buHEjVlZWDB482Fg2d+5c3n77bQoXLkyHDh0AuH79OvDgs0IApUuXZs+ePdy9e5fq1avj7u6On59fusnb00hOTiYoKIhixYoBcO7cOaKioozXN2/ebLyWUb169WLOnDnY29szYMAAypUrh6en57MIO12xsbEUKlSIIkWKEBsby4QJEwCIj48nc+bMj2zXu3dvWrVqxb1792jWrNlzi09ERERERN5sr/QMrsFgoEaNGpw5c4Zq1arRpk0bjh49CsDNmzfp27cv7777LpaWljRt2pQDBw5w+/ZtvL29jX14e3szbdo0smXLRlBQEG3atKFPnz68//77HDp0KN1xb9y4wfXr10lISCAmJuax36/dtWsXJUqUeC7vk3p7e1OpUiVcXFy4du0aa9aseeaztn83duxYbt26hbOzM5UrV6ZFixa89dZbnD59+rHtKlasSPbs2WnTpk26m0uJiIiIiIg8CxYGg8HwooP4N65cuUK+fPmMidPgwYNJSEhg+fLl9OvXDz8/PwwGA9999x2bN29m3bp12NjYEBQUhK+vLwEBAWn6TE1NZcmSJezYsYOFCxemub5t2zbatm1LVFQUbm5uHDp0yLjs+J969+7NW2+9xf79+43J9+O0bt2aUaNGPbZOQEAAtWrV4lX51d27d48CBQpw6NAhihcvbna7mJgYHBwciI6O1oZT8sbw9Fv0okN4KR2b2P5FhyAiIiIvkLm5wSuf4D5KXFyc8durL1JsbCwAWbNmNbvN5MmTmTx5crrXRo4cSdGiRV+ZBPfOnTv4+/sTFBTEli1bMtRWCa6IiIiIiIAS3NfaqzSDW79+fe7cucOyZctwc3PLUFsluCIiIiIiAkpw5TWgBFdERERERMD83OCV3mRKRERERERE5KHX5jNBIiKvA20yZUqbS4mIiEhGaAZXREREREREXgtKcEVEREREROS1oAQ3A1JTU/9Vex8fH9atW/dsghERERERERETSnAzYPDgwYwaNcp4npycjIWFBQkJCS8wKhEREREREQFtMmU2g8HAqlWr+PHHH59Y9/79+1SsWDFNeUhICMeOHcPf39+kvFy5cixYsOBZhfqvtWjRAldXVyZPnvyiQxERERERETGbElwzbdmyBTs7O6pXr/7Eura2tgQGBrJr1y6OHTtmLF+0aBGenp6UKlXKWObj44Obm9vzCPmprVy58kWHICIiIiIikmFaomym8ePH06RJkwy1Wb9+PbGxsXh5eeHl5UWePHnw8PAwnu/cuZOgoKDnFPGrJzExkZiYGJNDRERERETEXEpwzbB69Wp+//13rK2tqVu3Lo6Ojjg6OpI7d24AnJycjGWOjo7Gdvny5WPdunX4+vri6+vL8ePHmT17tvH8ypUrZM2a1awYDAYD/fv3p2DBguTPn59PP/3UmADGxcUxYMAA3NzccHV1pV27dty6dcvY1svLi++++46BAwfy1ltvMXLkSDw9PU36HzNmDFWrVjXW//sy6suXL+Pj44OLiwsuLi506dKFu3fvGq9/9913uLu7U6BAAWrVqsWpU6eM144ePYqnpycFChSgdOnSbNiw4ZH3OG7cOBwcHIyHq6urWc9GREREREQElOA+UXh4OL1796ZmzZoAbNu2jaioKKKiooiMjAQgIiLCWBYVFQXAjRs3KFy4MIMHD2bQoEEMGjSI4sWL4+3tbTwfOnQoOXPmNCuO3377jY0bN3L+/HlCQkIoUaIE9+/fB6B9+/YcOHCAo0ePcvHiRSwtLenUqZNJ+xUrVlChQgXOnz9P9+7dOX36NCdOnDBe//HHH+nVq1eacePi4qhRowb58uUjODiYCxcucO/ePSZMmADA9OnTGT58OD///DPXrl2jVatW1KtXz5gA9+zZk549e3Lt2jXmzJlDbGzsI+9xyJAhREdHG48rV66Y9WxERERERERA7+A+0bVr1/Dz8yM6Oprk5GSz2yUlJRkT4IceLsF9WL5lyxYuXLhAyZIln9ifk5MT169fZ926dTRr1gw/Pz8AwsLCWLNmDUePHjXOKE+ZMoXcuXMTEhJifL/X2tqaVq1aAZA3b158fHyYN28e06ZNY9++fdy9excfH580465du5a7d+/y7bffYmNj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Tz31FL169aJVq1ZG+fz582ncuDG9evXiiy++wGw2069fP+bMmUP58uXZtGkTU6ZMYceOHcD10dirV6+SlZXFDz/8QOPGje943Q0aNCA0NJQXX3yRcuXKMWHCBLy8vPJ38/6ft956i+eff5433niDUqVKUblyZfr27cvIkSNz1e3QoQORkZGMHj2a06dPU6pUKQIDA43VqUVERERERApbvhPcnj17EhgYyPvvv88jjzzCsWPHGD58OP/973/vRXyFplKlSkyfPp309HSj7Eay++STT950irKNjQ3JycmsX7+ekiWv36obCzR9+eWX1KlTx2jTtGnTW557+/bteHl5MWvWLKvyypUrs337dqKjowE4duwYTz31FH369OGTTz4hJCSEFStW0KRJEwC8vb0ZM2YMpUuXxs3NLU/Tf1u0aME333xz02NxcXFW+zc+H3SDn5+fUZadnc2UKVMYN24cwcHBAOzbt4+AgACeeuop6tWrl6t9586djSndIiIiIiIi95rJ8ves5A6ysrIYMGAAy5cvx2QyARAUFMSSJUusRjSLi5ycnFtOw70X/VgsFkwmE8nJySQlJeHm5nbb+rNmzcqVON8wceJEBg0aVKB4/+7q1atUrFiRhQsX0rt3b+D695GfeeYZfv31V5ycnArlPH+VnJyMg4MDSUlJWnBKRERERORfLK+5Qb4T3BtOnz7NyZMnqVGjRoEWLJKiZ/369UyZMsX4tJKnpyeTJ0+2mnZdmJTgioiIiIgI3IMENzExkStXruDh4WFVHhMTQ6VKlahWrdrdRSzyN0pwRUREREQE8p4b5GnubUJCAg0aNODjjz/OdezLL7+kcePGnDt3ruDRioiIiIiIiNylPI3gvvjii9jY2LBgwYKbHh83bhzJycnMnTu30AOUfy+N4EpR5Buy+K7aH5rRr5AiERERESk+8pob5GkV5a1bt/LTTz/d8vi4ceN4/PHH8x+liIiIiIiISCHJ0xTla9euUa5cuVseL1OmDGlpaYUWlIiIiIiIiEh+5SnBLV26NKdPn77l8ZMnT1KqVKlCC6qoysnJuav2QUFBrFu3rnCCERERERER+ZfJU4Lbo0cPXnjhBf78889cxzIzM3nppZfo0aNHoQdX1ISGhjJp0iRjPzs7G5PJRHp6+n2MSkRERERE5N8hT+/gvvHGG/j5+VGrVi1efvll6tat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J0+epEWLFqxcuRJXV1fMZjObNm266fnGjh2Ls7Mzp06d4ptvvmHevHm56r7zzjt88cUXzJgxg2HDhrF48WJjdeojR47w22+/0a/fzb/zOXXqVBwcHIzNzc3tttcvIiIiIiLyV8UmwS1XrhzDhg2jSpUqHDx4kO+//54zZ85QunRpFixYYLV98skndO3alR49enD06FG2bt1KbGwsLVq0YODAgQQHB9OrVy/69+9P69atiYqKIjY2lnr16pGamnrLGJo2bcrZs2f59ttvGThw4E3rZGVlsWjRIipWrEjbtm3x8fFh69atDB48mP/9738AvPLKK1SsWJF58+bl+z5kZmayYMECpk2bhoeHByaTifDwcOLj4/nmm2+MemfOnCEkJASTyZTnviMjI3n33XcpWbIk7u7utG7dmujoaKs6bdq0wcXFBYB+/fpx6dIl47zLli3j2WefpWLFijftf+zYsSQlJRlbfHx8Pq9eRERERET+zYpNgvtXEydOZObMmbRp04YmTZrw8ccf4+bmRkxMDMuXLyclJYVq1aphMpl45plnOHHiBADjxo3D09OTWrVq8e2332I2m3nsscdYv349ixcv5vDhwzz00EO89tpruLq65tpiY2OJiIjAy8vLqvzGNGKAlJQUgoODef/996lXrx5NmzbFycmJgIAAKlasSN++fSlRogTvv/8+r776ar6v/fLly6SlpfHqq6/i7u6Ou7s7Dz/8MHB9GvENjRs3zldyC7B161a6du1KrVq1qFmzJtu2bSMrK8uqTpMmTYzfDz30EAMGDGDhwoVYLBaWL19+208v2dvbU758eatNREREREQkr4rNO7h/9fzzz1OyZElOnjyJj48PzZo1o0yZMnz00UcsXryY8ePHG4tDnTp1yhhxbNWqFYcPH2bMmDGcPXuW0aNH07VrV4YMGUL79u2NKbPTp09n+vTpuc7boEED3n//fVq2bHnL2M6ePYu7uzslS5Zk3bp1dOnSBYDNmzezceNG7OzsWLlyJS+88MJN31O9EycnJ8qWLcvy5ctp1arVLevd6f3evzObzXTs2JF58+bRr18/SpcuTY8ePe7Y79ChQ3niiSfo2bMnDz30EE8++WS+zisiIiIiIpJXxXIEd+PGjWzYsIGOHTsaZREREYwfP56srCz69+8PwLlz54DrnxWC6wsg/fjjj1y9epVWrVrR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ejpdunShU6dOvPPOO0b5kSNH2L9/P9HR0Rw7dozvv//eSFjPnj1L06ZNadasGSdPniQ6OppTp04REBCAxWKhZ8+ebNq0ybjuVatWUbNmTVavXg3A4cOHSUlJ4amnngKuJ9iffvop3333HfHx8SQmJjJ9+vRbXtfUqVNxcHAwNjc3t0K7ZyIiIiIiUvw9kAluuXLlGDZsGFWqVOHgwYN8//33nDlzhtKlS7NgwQKr7ZNPPqFr16706NGDo0ePsnXrVmJjY2nRogUDBw4kODiYXr160b9/f1q3bk1UVBSxsbHUq1eP1NTUW8bQtGlTzp49y7fffsvAgQNvWicrK4tFixZRsWJF2rZti4+PD1u3bmXw4MH873//A+CVV16hYsWKzJs3r9Duz8svv0yjRo0A6Ny5MxcvXuTcuXPG8ZycHJ577jkaNWrEjBkzrNra2try3nvvYWdnR4UKFWjZsiUxMTEAfPrpp7i4uDB27FhsbGwoV64cH3/8Md9++y379u2jTZs2mEwm9u/fz59//smePXsICwvj888/B2DDhg0888wzxrTxrKwsPvjgA8qVK0epUqVo3769ca6bGTt2LElJScYWHx9faPdMRERERESKvwcywf2riRMnMnPmTNq0aUOTJk34+OOPcXNzIyYmhuXLl5OSkkK1atUwmUw888wznDhxAoBx48bh6elJrVq1+PbbbzGbzTz22GOsX7+exYsXc/jwYR566CFee+01XF1dc22xsbFERETg5eVlVd6sWTMjtpSUFIKDg3n//fepV68eTZs2xcnJiYCAACpWrEjfvn0pUaIE77//Pq+++mqh3RMXFxfj942Ftv46QvzFF18QExNDWlparrYVKlQwpiPfaH+jbVxcHI888ohV/cqVK1O5cmXi4uIoUaIEQUFBfPnll3z99df4+fnxzDPPcPDgQc6dO8eGDRvo2bPnbWO93Ui2vb095cuXt9pERERERETy6oFPcJ9//nmCgoJYt24dJpOJZs2aUaZMGT766COGDBnC+PHjjcWhTp06ZSRUrVq14vDhw4wZM4YLFy4wevRooqKi+Oyzz4iPj6dKlSoATJ8+HbPZnGvz9vZm1apVucr37dtnxHb27Fnc3d0pWbIk69atw9HREYDNmzfTvHlzVq5cyWOPPcacOXPuuIAVQKlSpcjKyrIqO3nyZL7v2X/+8x/+7//+j6+//prPPvssz+1q1KjBsWPHrMouXbrExYsXqVGjBgA9e/Zk48aNfPnll/Ts2ZOHHnqIgIAAPv74Y+Lj42nbtm2+4xURERERESkMD3yCu3HjRjZs2EDHjh2NsoiICMaPH09WVhb9+/cHMKboli5dGoDHHnuMH3/8katXr9KqVSs6derE6dOn2bZtW6G825mdnU1sbCy1atUC4NixYyQmJhrHN2/eTExMDDExMYwYMSJPfT722GMkJCRw+PBhAObPn8/+/fvzHVvFihVxdHRk4cKFDBkyhF9//TVP7QYOHMjJkyeZPn06FouF1NRUXnrpJRo3bmx8GqlFixYkJSWxc+dOnn76aQB69erFjBkz6NatW54W0xIREREREbkXHsgE12Kx8OSTT3L06FFatmxJ7969OXjwIAAXLlzg1Vdf5fHHH8fGxoZnnnmGffv2cfnyZQIDA40+AgMDee+99yhXrhyxsbH07t2bV155hXbt2t0yaTx//jznzp0jPT2d5OTk236/dteuXdStW7dQp9HWq1eP6dOn06lTJzw8PPjtt98YMmRIgftr27YtL7zwAt27d8/1eaObcXV1Zd++fURFReHm5oa3tzdVq1bl66+/xmQyAWAymfjvf/9LmzZtjNWon3rqKWxtbenRo0eBYxUREREREblbJsvfl999QMTHx+Pk5GS8YxoaGkp6ejqff/45I0aMICQkBIvFwoIFC9i8eTPr1q3D1taW2NhYgoODiYqKytVnTk4Oy5YtY8eOHcZnd/5q27Zt9OnTh8TERNzd3dm/f78x7fjvhg8fTu3atdm7d6+RfN9Or169mDRpUn5uwb9ecnIyDg4OJCUl6X1cyTffkMX3O4QCOTSj3/0OQUREROSBk9fc4IFNcG8lNTWVhx566H6HQUpKCgBly5bNc5tZs2Yxa9asmx6bOHEigwYNKpTYigsluHI3lOCKiIiIFB/FNsGVfw8luCIiIiIiAnnPDR7Id3BFRERERERE8ksJroiIiIiIiBQLSnBFRERERESkWCh5vwMQEblbRXVBqZvRIlMiIiIiBacRXBERERERESkWlOCKiIiIiIhIsVCkE9zs7GyeeOIJLl68aFWenp6Oq6vrTdt8+umnLFy4MFf5+fPn2bVrF++88w5vvPEGN/t6UkpKCteuXctzfJcuXSIjIyPP9UVERERERKTginSC+8knn1C3bl3+/PNPcnJy8tTmxx9/xN7e3thv27YtXl5edOrUicDAQEqUKMFTTz1100S2U6dO7Nu3z9hPSEjA1dWV5ORkPvjgg1z1J0+eTLt27bh8+TJxcXHY2tri7u5utTk6OhIeHl6AqxcREREREZG/KpIJbkZGBi1atOD9999nxowZBAQE8MUXX1CrVi1q1apF/fr1SUhIMPZr1arF/v37SUlJ4ZdffsHFxYWUlBSys7M5fvw4P/zwAwcOHKBKlSqMHDmS1q1bU7Lk/7/+1u+//37beMqWLcv69etZsGCBVfnMmTNxdXUlMDAQgJo1axIXF2e1jRgxorBvzz3RrFkzZs2aVeD2UVFRmEymQoxIRERERETEWpFcRdne3p4ePXqwdu1avvzyS6pXr07Pnj3p2bMncH2Kcq1atawS071799KgQQNOnDjBiRMnOH/+vDFVuXnz5tjY2HD27Fnq1q1LmTJlqFChArt27eLKlSs8+eST/PTTT7eMx8bGhrlz5/J///d/VuUlS5ZkyZIlfPfdd4V/E/5hfx25FhEREREReRAVyRFcgFdeeQVbW1vGjBnD4MGDSUhIuG395s2b83//93/UqVOH33//nQ4dOuDk5ARcT36jo6P54osvaNKkCdHR0UybNg2AChUq0L17dz788EMAVq9ejbOzM87Ozjz22GOcPXsWZ2dnnnzySUaPHk23bt0AuHjxIsOGDSMrKws/P797dyOKkYyMDJKTk602ERERERGRvCqyCS6Ar68vr7/+On/++ScffPABQUFB1KlTBx8fH86dO0edOnWoU6cOQUFBABw8eJBmzZoBcPLkSdzd3cnJyWHZsmUMHjyYpKQkLl++zMyZM+nXrx9ZWVkA9OrVi8OHDwPw7LPPkpCQQEJCAuvXrycnJ4evvvrKKFuzZg1wfVT3p59+wt/fnz///LNQrjcqKgpnZ2fef/99PDw8cHJyIiIigq+++op69erh7OzM6NGjrRbI2r9/P02bNqV69ep4eXmxevVq49jChQtp2rQpO3fupG7duqxevZq4uDhMJhO///47LVq0ICQkBAB3d3erxbmOHDlC+/btjX7nz59vFev69evx9vamevXq+Pn5ceTIkTte39SpU3FwcDA2Nze3u7xjIiIiIiLyb1IkpyjHxsYSERHBBx98wFNPPcWSJUvIyMjg+PHjt233/fff07x5c7Kzs40pyi1atCAnJ4exY8fy8MMP07VrV15//XVGjhyJra0tAE2aNOGLL76gTZs2Vv0dPXoUJycndu7cScOGDa2OVaxYkS1btvD000/zzTffUK9ePdLT07G3t8fBwYHs7GwyMjKoUKECr732Wp6v/dKlS/zyyy/88ccfbNmyhW7dutG8eXO+//57UlJSeOSRR+jQoQP+/v5kZmbSv39/JkyYQK9evfjyyy/p0aMHfn5+VKpUCYDU1FSWL19OdHQ09vb2xMXFAfDOO+/wxRdf4OLikisGs9lMq1atCA0NZevWrRw/fpw2bdpQtWpVnn32WX744Qd69OjBmjVr6NixIydOnDDeQ76dsWPHMmrUKGM/OTlZSa6IiIiIiORZkRzBdXR05OzZs7z88st89913fPzxx7i7u3PmzJnbttu2bRuVKlXiwIED+Pr6Mm7cOEqVKsW8efPo0qUL3t7eNGnShKioKLp06WLVdv/+/Rw7dsyq7MCBA4wZM4bPP//8pucrVaoU27dvx8/PD1dXV8xmM02bNmX9+vW89957dO/eHbPZzCuvvJLna8/OzmbatGnY2NjQvn170tPTefnllylfvjzVq1fn0UcfJTo6GgA7Ozt++uknevXqBUCXLl0oVaoUsbGxRn8///wzb731ltXK0gBt2rS5aXIL10d+a9SowdixY7GxsaFWrVqMGTOGuXPnAhAREUHnzp3p2LEjAB4eHkyePPmO12Zvb0/58uWtNhERERERkbwqkiO4zs7O9O/fn4cffphVq1Zx+vRppk6dyvHjx/Hy8rL6Bq7ZbCYqKoo6deoQHx/PO++8Q2pqKmPGjAHgxIkTrFq1ijp16hhtmjZtSmZmptH+rbfeYs+ePZQpU8aok5WVxerVqzlw4ADbtm1j+/bttG/fPlesZrOZ5557jr179wLXPy10t4nbjfY3RphvjMbC9aQ2PT3d2P/oo49Yvnw5p0+fxmKxcPXqVWPqNYCLi8tNvxncpEmTW57fbDZz4sQJ3N3djbLs7GzKli0LwPHjx/Hx8blpzCIiIiIiIvdKkUxw4foneCZOnAhcf9/1008/pW/fvvj5+bFx40ajnr+/P3D9Uz67du0iPT0dHx8fli5dSufOnQHo2bMnpUqVMtr8/PPPxu+YmBhSU1M5cOAAzzzzjFG+ePFiGjRogIeHB6+//jpDhgzhhx9+4KGHHrKKMzQ0lHbt2gFw5coVzGYznp6exju999KKFSsYP34869evp2XLltjY2BgLa91QokSJm7a9VTmAp6cnTZo0YceOHTc9Xq1atVyj3XdaBExERERERORuFckpyteuXePIkSPUrl0bgNatW7Nz5847tnNzc2PIkCHMnDmTli1bMnv2bOB6Ivj9998bW/369Y02/v7+rFixggoVKhhlFy5cIDQ0lAkTJgDQtm1bHnvsMQYMGEB2drZRb/PmzezYscNYqGn+/Pm0bNnSKpkGmDFjBvPmzSvg3bi1lJQUHBwcjNHUOXPmkJiYSFpa2l31269fP44cOcIHH3zAtWvXsFgsfP755wwbNgyAwYMHs2nTJjZs2ADA4cOHCQsLu6tzioiIiIiI3EmRHMFNTEykX79+xpTYqlWrcvjwYaKjo9mzZw/e3t5G3ZMnTwLXp9A+99xzJCYmMmTIEEqWLMm1a9do164dXbp0wc7Ozmhzu8WqLl26xFNPPUWvXr1o1aqVUT5//nwaN25Mr169+OKLLzCbzfTr1485c+ZQvnx5Nm3axJQpU4xRT5PJZEwX/uGHH2jcuHGh3iO4noh+9913eHl5UbZsWQYNGkT//v2JiYkx3o8tCCcnJ6KioggJCeHtt9+mRIkSPPHEE8yaNQu4/kmmtWvXEhoayqBBg6hfvz7Tp0+na9euhXVpIiIiIiIiuZgsf/2mTBGTnp5OnTp1jJV/v/32W6ZNm5ZrinJ4eDiPP/44Tz/9NB9//DE1atQwjvv5+bFgwYJc7+CuWLHC6h3TG3UfffRRLly4wLJly3JN4z1+/DjR0dF069aNnTt38sknn7Bs2TI++eQTQkJCWLx4MZ06dQLgxx9/xN/fnwsXLuDm5samTZuoV69eId+hoi05ORkHBweSkpL0Dq+IiIiIyL9YXnODIp3g5ldOTg42Nnc/Kzuv/VgsFkwmE8nJySQlJd3xkzezZs0yRkH/buLEiQwaNKhA8RZVSnBFRERERASU4EoxoARXREREREQg77lBkVxkSkREREREROTviuQiUyJS9PiGLL7fIRQJh2b0u98hiIiIiBRZGsEVERERERGRYkEJroiIiIiIiBQLSnD/Iicn567aBwUFsW7dusIJRkRERERERPJFCe5fhIaGMmnSJGM/Ozsbk8lEenr6fYxKRERERERE8kKLTP0/FouFVatWsWjRojvWzczMpHHjxrnK4+LiOHToEGFhYVblDRs2JDIysrBCvaWoqCgGDBhAXFzcPT+XiIiIiIjIg0YJ7v+zZcsW7O3tadWq1R3r2tnZER0dza5duzh06JBRvnjxYnx9falfv75RFhQUhLu7+70IWURERERERP5CU5T/n2nTptG1a9d8tVm/fj0pKSn4+fnh5+dHlSpV8Pb2NvZ37txJbGzsPYq4+MnIyCA5OdlqExERERERySsluMDq1avZvXs3JUuWpEOHDjg6OuLo6EjlypUBcHZ2NsocHR2Ndk5OTqxbt47g4GCCg4M5fPgw8+fPN/bj4+MpW7ZsnmKIi4vDZDJZTS9euHCh1ejvgAEDGDVqFCNGjMDDwwNnZ2erd4b/ymKx0LNnT9q2bUtaWprR/44dO2jcuDFOTk40bdqUY8eOGW2Sk5MZPnw4Dz/8MDVq1CAwMJA//vgDgKVLl/Lwww8bdRMSEihRogTr1683yvr27cuYMWMAMJlMrF27ljZt2lCtWjW8vb35/vvvb3sPpk6dioODg7G5ubnl6d6JiIiIiIiAElzOnj3L8OHDad26NQDbtm0jMTGRxMRELl68CFxP5m6UJSYmAnD+/Hk8PDwIDQ1lzJgxjBkzBi8vLwIDA439cePGUbFixUKN98MPP+TRRx/lxIkTbNy4kbCwMGJiYnLVGz16NAkJCWzcuJEyZcoY5WFhYWzcuJGzZ8/i7OzMG2+8AVxPiDt27IjZbObIkSPExcXRuHFjmjZtSkJCAl27diUhIcE415o1a/Dw8ODzzz8H4Nq1a2zevJmePXsa5xo3bhwRERGcPXuWNm3aMGzYsNte29ixY0lKSjK2+Pj4u75fIiIiIiLy7/GvT3DPnDlDSEgIfn5++WqXlZXFxYsXrbYbU2xv7C9btow1a9YUarzNmzdn0KBBADRq1AhnZ+dcCe6sWbPYv38/mzZtskpu4fpU7KpVq2JjY0PHjh2Ntnv37mXv3r1ERERQtmxZbGxseOONN6hWrRqffvop5cqVo2PHjmzYsAGAVatW8c4777Bp0yb+/PNPvvvuOypUqECjRo2Mc40bNw5PT08AOnfufNNE/K/s7e0pX7681SYiIiIiIpJX//pFpnx9ffH19c218vHtbNq0icmTJ+cqP3XqFGlpaRw5cgSA06dPc+DAAVasWMHWrVupXr36Xcfr4uJitW9nZ2f1GaOzZ8/y4YcfUqpUKUqUKHHb9n9tGxcXR+XKlalUqZJV/Tp16hjTpnv27Mn//vc/XnjhBX7//XeeeeYZ5s6dy6ZNm9i/fz89evS47bkyMjIKdtEiIiIiIiJ58K9PcAsiICCAgICAXOVBQUH06dOHwMBAAMLDwwEYP378HfssVaoUcH1k+IaTJ0/mOzYHBwd+/PFH/vvf//LKK6/w0Ucf5aldjRo1uHjxIpcvX7aaVv3rr7/SvXt34Pp1v/DCCyxatIhu3bphY2NDr169WLt2LdHR0Sxfvjzf8YqIiIiIiBSWf/0U5YKKjo6mQYMGVtv27dsZOXKksT9v3rw89+fk5ISzszObN28GYP/+/SxYsCDfcZUpU4ZSpUoRERHB+vXr+eyzz/LUrkWLFjzxxBO8+OKLpKamYrFYmD59OvHx8QwcOBCA0qVL06lTJ8LDw413bYOCgti6dSsAjz32WL7jFRERERERKSxKcP8mMjLytqsov/322wA0aNCA6OhooqOjOXDgANHR0bRp04bZs2cb5bGxsQwfPjxP5zWZTCxdupT58+fj4uLC1KlTmTJlSoGvo2rVqkRERPDSSy/x66+/3rG+jY0NW7ZsoXLlytSvX58aNWqwZ88e9u7dazXVuGfPnlSoUIGmTZsCULFiRZo3b85///vfAscqIiIiIiJSGEwWi8Vyv4N4EISFhZGdnW1MK86PCRMmEBERQWpqKlFRUTRs2PAeRPjvk5ycjIODA0lJSVpwqhjwDVl8v0MoEg7N6He/QxARERF54OQ1N1CC+w/Zt2+f8S7r3/n7+xMREfEPR/TgU4IrIiIiIiKQ99xAi0z9Q5o1a4bZbL7fYYiIiIiIiBRbegdXREREREREigWN4IpIodK7tndH7+CKiIiIFJxGcEVERERERKRYUIIrIiIiIiIixYIS3EKSk5NzV+2DgoJYt25d4QQjIiIiIiLyL6QEt5CEhoYyadIkYz87OxuTyUR6evp9jEpEREREROTfQ4tMFQKLxcKqVatYtGjRHetmZmbSuHHjXOVxcXEcOnSIsLAwq/KGDRsSGRlZWKEawsLCiIqKIioqqkDtZ82axcqVK9m3b1/hBiYiIiIiIlJASnALwZYtW7C3t6dVq1Z3rGtnZ0d0dDS7du3i0KFDRvnixYvx9fWlfv36RllQUBDu7u73IuS7NmrUKEaNGnW/wxARERERETFoinIhmDZtGl27ds1Xm/Xr15OSkoKfnx9+fn5UqVIFb29vY3/nzp3Exsbeo4gfTBkZGSQnJ1ttIiIiIiIieaUE9y6tXr2a3bt3U7JkSTp06ICjoyOOjo5UrlwZAGdnZ6PM0dHRaOfk5MS6desIDg4mODiYw4cPM3/+fGM/Pj6esmXL5jmO/fv307RpU6pXr46XlxerV682juXk5BAeHk7NmjVxc3Ojd+/eXL582aq9n58fEyZMMJJtPz8/zGYzvXr1olq1ajRs2JDo6GijflhYGH5+fsb+gAEDGDVqFCNGjMDDwwNnZ2erd5LzYurUqTg4OBibm5tbvtqLiIiIiMi/m6Yo34WzZ88yfPhwWrduDcC2bduMY9nZ2dja2pKQkECpUqWs2p0/fx4PDw9CQ0ONsjlz5tCyZUsaNWpklFWsWDFPcWRmZtK/f38mTJhAr169+PLLL+nRowd+fn5UqlSJ999/nw8//JCoqCg8PT3ZsWMHQUFB+Pj4WPXz0UcfsX37durUqYOfnx+PP/447777Lp999hmjRo0iODiY77///pZxfPjhh7z33nvMmTOHgwcP0rhxY7p164a3t3eermPs2LFW056Tk5OV5IqIiIiISJ4pwb0LZ86cISQkhKSkJLKzs/PcLisri4sXL1qV3Ziee6N8y5Yt/P7779SrV++O/dnZ2fHTTz9ha2sLQJcuXShVqhSxsbG0aNGCBQsWEBoaiqenJwDt2rVj4MCB/PDDD1b99OrVy0hGW7duTVJSEs899xwA/v7+fPDBB7eNo3nz5gwaNAiARo0a4ezsTExMTJ4TXHt7e+zt7fNUV0RERERE5O+U4N4FX19ffH19c618fDubNm1i8uTJucpPnTpFWloaR44cAeD06dMcOHCAFStWsHXrVqpXr37bfj/66COWL1/O6dOnsVgsXL16laysLACOHz/Oww8/bFW/fPnyufr4a5mtrS2VKlUy9u3s7MjIyLhtDC4uLlb7dnZ2+kySiIiIiIj8Y5Tg/sMCAgIICAjIVR4UFESfPn0IDAwEIDw8HIDx48ffsc8VK1Ywfvx41q9fT8uWLbGxscHJyck4Xq1aNY4dO8bTTz9tlCUkJNzllYiIiIiIiDxYlODeB9HR0QwYMMCq7O/fwT137hxDhw7NU38pKSk4ODgY79TOmTOHxMRE0tLSAAgODmbmzJn4+/vj5eXFihUrWLlyJY8++mihXZOIiIiIiMj9plWUC1FkZORtV1F+++23AWjQoAHR0dFER0dz4MABoqOjadOmDbNnzzbKY2NjGT58eJ7O269fP9q0aYOXlxe1a9cmLS2N/v37ExMTA8Brr73GsGHD6NChA9WrV2fr1q2MHTv23tyEW1i5ciWurq6YzeZ/9LwiIiIiIvLvYbJYLJb7HURRFxYWRnZ2tjGtOD8mTJhAREQEqampREVF0bBhw3sQYdGUnJyMg4MDSUlJN31nWB5MviGL73cIRdqhGf3udwgiIiIiD5y85gZKcIuAffv20b1795se8/f3JyIi4h+O6J+hBFdERERERCDvuYHewS0CmjVrpqm9IiIiIiIid6B3cEVERERERKRYUIIrIiIiIiIixYKmKIvIXdGiUoVLi0yJiIiIFJxGcEVERERERKRYKDIJbk5Ozl21DwoKYt26dYUTjIiIiIiIiDxwikyCGxoayqRJk4z97OxsTCYT6enp9zEqEREREREReVAUiXdwLRYLq1atYtGiRXesm5mZSePGjXOVx8XFcejQIcLCwqzKGzZsSGRkZGGFKiIiIiIiIvdJkUhwt2zZgr29Pa1atbpjXTs7O6Kjo9m1axeHDh0yyhcvXoyvry/169c3yoKCgnB3d78XIcvf/Oc//+Hjjz+mZs2a9zsUEREREREpporEFOVp06bRtWvXfLVZv349KSkp+Pn54efnR5UqVfD29jb2d+7cSWxs7D2KWP5u27ZtWCyW29bJyMggOTnZahMREREREcmrBz7BXb16Nbt376ZkyZJ06NABR0dHHB0dqVy5MgDOzs5GmaOjo9HOycmJdevWERwcTHBwMIcPH2b+/PnGfnx8PGXLls1zHCaTiY8++ghvb28qVqxIcHAwf/zxB82bN8fJyYnOnTtz+fJlo35CQgLPPvss1atXx83NjTfffNM4FhcXh8lkYseOHTRu3BgnJyeaNm3KsWPH8tQeYO3atdSrVw8XFxcCAgJo2bIlI0eOBK6/nxweHo6npycuLi506dKFkydPGm0HDBjA0KFDCQwMxMnJiccff5zffvuNV199FRcXF7y8vNi+fbvV+RYsWECdOnWoXr06bdq04aeffjKOhYWF0bNnT8LDw6lduzZVqlRhyJAhRkJ7Y9S8WbNmuLq6kpaWdtN7PHXqVBwcHIzNzc0tz89HRERERETkgU5wz549y/Dhw2ndujVwfRQwMTGRxMRELl68CFxPBG+UJSYmAnD+/Hk8PDwIDQ1lzJgxjBkzBi8vLwIDA439cePGUbFixXzFs2TJEr755huOHj3KZ599hr+/P5GRkcTHx3Px4kWmT59u1B07dizOzs6cOnWKb775hnnz5rFp0yar/sLCwti4cSNnz57F2dmZN954I0/t//jjD/r378+yZcs4ffo0AQEBJCUlMXv2bABef/11Fi1axPbt2zGbzXh7exMYGMi1a9eM/hcvXsyIESM4d+4cXl5etGjRAmdnZ06fPs2wYcPo27evkaDOnTuXCRMmsHz5cs6cOUPPnj3x9/fn6tWrRn9ffvkl2dnZ/Prrrxw6dIglS5YY8f78888A7Nu3D7PZTJkyZW56f8eOHUtSUpKxxcfH5+v5iIiIiIjIv9sDneCeOXOGkJAQ/Pz88tUuKyuLixcvWm03pr/e2F+2bBlr1qzJV78hISFUqFABJycnHn30Ufz9/XnkkUews7OjTZs2REdHG3UjIyN59913KVmyJO7u7rRu3drqOFyfel21alVsbGzo2LEjMTExeWp/6NAh6tSpQ8OGDQHo378/MTExXLp0iczMTBYsWMC0adPw8PDAZDIRHh5OfHw833zzjdF/hw4djPvarl07rl27xpgxYwDw9/cnISGBc+fOAfDuu+/y+uuvG+d76aWXqFq1KqtXrzb6c3V15a233sLGxoYaNWrw2GOPWV1PXtjb21O+fHmrTUREREREJK8e6EWmfH198fX1zbXy8e1s2rSJyZMn5yo/deoUaWlpHDlyBIDTp09z4MABVqxYwdatW6levfod+/5rwmVra0ulSpWMfTs7O6tPFm3dupV3332XX3/9laysLC5duoSPj49Vfy4uLgVq7+PjQ2xsLPv376dx48Z8+umnuLm5UbFiRc6dO0daWhqvvvoqo0ePtjpfXFzcLa+lXLly2NraGrEARjxms5kZM2Ywd+5co01aWhqnTp0y9qtXr47JZLrl9YiIiIiIiNxrD3SCWxABAQEEBATkKg8KCqJPnz4EBgYCEB4eDsD48eMLPQaz2UzHjh2ZN28e/fr1o3Tp0vTo0aPQ2teuXZuAgAB69erFtWvX8PT0ZMOGDZhMJpycnChbtizLly/P06rTeeHp6UloaCh9+/YtlP5ERERERETuhQd6inJBRUdH06BBA6tt+/btjBw50tifN2/ePTv/n3/+ybVr12jatCmlS5dm9+7dbN++/ZaLK+W3/caNGzlw4AC//PILcXFx7NixwxjdNZlMxujtiRMnADh37hzdu3fn6NGjBbqekSNHEhYWZox+JycnM3jwYHbu3JnnPkqXLs358+e5cuVKgWIQERERERG5kyI1ghsZGWmsFHyDs7Oz8TskJIRx48bRoEED433VzMxM7OzseOaZZ+jfv78xgpuUlHTP4qxduzazZ8+mY8eO2NjY4Ofnx7Rp01i7dm2htG/Tpg0+Pj44OjpSqVIlSpcuTf369Zk5cya1atUiLCyM8uXL4+/vT2pqKg4ODgwbNoy6desW6HpeeOEFbGxs6N27N5cvX6ZMmTL069fPWPwrL1555RUCAgLw8vJix44dlCpVqkCxiIiIiIiI3IrJcqePkz4AwsLCjE/f5NeECROIiIggNTWVqKgoY6GkomzNmjVMnDiRtWvX4ubmxvnz5xk9ejQ5OTl88cUX9zu8QpOcnIyDgwNJSUlacOoB5huy+H6HUKwcmtHvfocgIiIi8sDJa25QJEZw87PI1N9NmjSJSZMm3bbOvn376N69+02P+fv7ExERUeDz3wv79++nZMmSVK5c2VggKjs7mxo1atzv0ORfSAmZiIiIiDwoikSCe681a9YMs9l8v8PIszfeeIPExEQee+wxrl27hp2dHUFBQUycOPF+hyYiIiIiInLfFIkpyvLvpCnKIiIiIiICec8NiuUqyiIiIiIiIvLvoynKIpIvWlTq3tI7zSIiIiIFpxFcERERERERKRaU4IqIiIiIiEixoAS3gHJycu6qfVBQEOvWrSucYEREREREREQJbkGFhoZafV83Ozsbk8lEenr6fYxKRERERETk30uLTBWAxWJh1apVLFq06I51MzMzady4ca7yuLg4Dh06RFhYmFV5w4YNiYyMLKxQC2zAgAEALFy48L7GISIiIiIikldKcAtgy5Yt2Nvb06pVqzvWtbOzIzo6ml27dnHo0CGjfPHixfj6+lK/fn2jLCgoCHd397uKbcOGDezevZuZM2feVT+F7UGNS0REREREig9NUS6AadOm0bVr13y1Wb9+PSkpKfj5+eHn50eVKlXw9vY29nfu3ElsbOxdx3bo0CEuXrx41/0UtrzElZGRQXJystUmIiIi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7860adPu92XIbeTnGUvRk5/n+/XXX5OSkoKPj0+ufkaNGsWoUaPuwxXI7eTn+YaFhVGtWjWee+45Ll++TIkSJWjTpg0fffTR/b4MuQX9/fzvYbJYtPKFiIiIiIiIFH16B1dERERERESKBSW4IiIiIiIiUiwowRUREREREZFiQQmuiIiIiIiIFAtKcEVERERERKRYUIIrIiIiIiIixYISXBERERERESkWlOCKiIiIiIhIsaAEV0REpJhIS0vjzTffpHbt2ri4uFCjRg1eeOEFzp49W6jnmTdvHjVr1sTNzY13332X3bt38+ijj+Lq6kqPHj1o1qwZs2bNylNfs2bNolmzZoUa361kZmZSpUoVFixYcNPj3t7ejB8//o79LFy4EHd390KOTkRECoPJYrFY7ncQIiIicnfS0tJo06YNjo6OfPzxx9SoUYOkpCRee+01vvrqK6Kjo6lYseJdn+fUqVO4u7tz4MABHn/8cVJSUnj88ccJDg5mzJgxJCYm4ujoePcXVEDHjx9n6NChfPXVVzc9Pnr0aL777ju+//57q/L/+7//o2nTphw/fpyaNWve9hwLFy4kLCyMuLi4wgpbREQKiUZwRUREioGJEydy6tQpVq9eTY0aNQBwcHBgwYIF9OrViytXrhTKeeLi4rBYLPj6+mJjY0P58uU5fvw4vr6+APc1uYXrCfjRo0dvefyFF15g//79ueosXLgQf3//Oya3IiLyYFOCKyIiUsRZLBYiIyMZMmQIZcuWtTpmMpmYNm0anp6ewPVpuhMmTKB27dq4ubnRvn17fvjhB6s2a9aswcfHh2rVqvHEE0+wZ88eAFauXMmzzz4LgJubGx4eHri6umKxWPjvf/+Lq6srZrMZd3d3Fi5caPQXExPDf/7zH1xcXKhZsyavvfYaWVlZAISFheHn52fUTU1NZdSoUbi7u+Pm5kbfvn25dOmScdzPz4933nmHfv364ebmhqurKxEREQD88ssvdO/eHbPZjKurKwEBAbnuVd26dWnZsiWRkZFGWUZGBitWrOCll14yyvbv30/Tpk2pXr06Xl5erF69+pb338/Pj7CwsFz3PSoq6o73VERECpcSXBERkSLu4sWLXLhwgXr16t2x7sCBA9mxYwffffcd8fHx9O/fn5YtWxITEwPAl19+SZ8+fZg5cyZnz54lLCyMzp07c+rUKbp3787KlSsBMJvNnDhxArPZDFxPfm8kln91+vRpWrVqRZs2bTCbzRw5coSDBw+yaNGim8bXr18/9u3bx8GDB/njjz+wsbFh4MCBVnWmTp3Kc889R3x8PO+++y5Dhw7l0qVL1KtXj5UrVxqJ9qZNm256jsGDB7N06VKuXbtmXHPp0qWNhDgzM5P+/fvzyiuvcObMGWbOnEmfPn2sEu38uN09FRGRwqUEV0REpIjLyckBwNbW9rb1zGYzn332GXPnzqVq1aoA9O3bl/bt2/Pee+8B8N577zFo0CA6dOgAQEBAAG3btuXTTz8tUGyRkZG4uroyduxYTCYTDg4OfP3117zwwgs3jW/NmjW8//77VK5cGTs7O+bMmcOmTZus3nft3r07Tz/9NACdO3cmMzOT3377Lc8xde/enbS0NL7++mvg+vTkF154gRIlSgBgZ2fHTz/9RK9evQDo0qULpUqVIjY2tkD3oLDvqYiI3FrJ+x2AiIiI3J0qVapQoUIFfvnlF7p27XrLeidPngSgTp06VuV16tQhOjoauJ5kRkdHs2HDBuN4eno6lSpVKlBsJ0+epG7dulZldnZ2N617YzT4xjToGxwcHDh+/LixcrGLi0uuvtLT0/McU+nSpenduzcLFy6kcePG7Nixgw8//NCqzkcffcTy5cs5ffo0FouFq1evGtOq86uw76mIiNyaElwREZEizsbGhj59+vDBBx8wcuRISpUqZXX87bffpnPnzsbiU8eOHaNBgwbG8djYWOOYp6cnvXv35s033yyU2GrWrGlMa74hOzubEiVKYDKZrMpvvCf8zTff4ObmVijnv5XBgwfTtGlTmjRpwlNPPWU1tXrFihWMHz+e9evX07JlS2xsbHBycrplX6VKlbJKfm/8Q8INhX1PRUTk1jRFWUREpBgIDw+nUqVKdOnSxZjOm5qayrhx4/jggw+oVKkSbm5uBAUFMXz4cC5evAjA8uXL2bZtG0OHDgVgxIgRvPvuu8YiSOnp6YwdO5YlS5YUKK4BAwZw8uRJ3n77ba5du0ZGRgZDhgy56fdmq1SpQu/evQkODub8+fMA/PHHH3Tq1IkLFy7k6XxlypQhKSmJzMzM264c3aBBAx599FHCwsKsFpcCSElJwcHBAR8fHwDmzJlDYmIiaWlpN+3Lx8eHHTt2kJGRQXJyMkOGDLGaLl7Y91RERG5NCa6IiEgxUL58eb799lueeOIJOnTogKurKw0bNiQxMZGDBw8a03qXLFlCy5Ytadq0Ka6urnz44YdERUXRsGFDADp06EBkZCSjR4+mevXq1KtXj4yMDIKCggoUl6urK9999x3ffPMNrq6ueHl5YWtryxtvvHHT+h999BGPPvoozZo1MxLygQMHUqVKlTydr2HDhjRs2BB3d/dbnuOGwYMHU6lSJfz9/a3K+/XrR5s2bfDy8qJ27dqkpaXRv39/YyGuv3v99depWrUqNWrUoFWrVrz88stW3xwu7HsqIiK3ZrJYLJb7HYSIiIiIiIjI3dIIroiIiIiIiBQLSnBFRERERESkWFCCKyIiIiIiIsWCElwREREREREpFpTgioiIiIiISLGgBFdERERERESKBSW4IiIiIiIiUiwowRUREREREZFiQQmuiIiIiIiIFAtKcEVERERERKRYUIIrIiIiIiIixcL/B5VwInLAXwVuAAAAAElFTkSuQmCC",
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# prompt: model の重みを可視化してください。\n",
        "\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "coefs = model.coef_.tolist()[0]\n",
        "\n",
        "# Create a list of column names\n",
        "column_names = mldata_yes.drop(columns=['売上', '成約の有無']).columns.tolist()\n",
        "\n",
        "# Create a DataFrame with the column names and coefficients\n",
        "coef_df = pd.DataFrame({'Column Name': column_names, 'Coefficient': coefs})\n",
        "\n",
        "# Sort the DataFrame by the coefficient values\n",
        "coef_df = coef_df.sort_values(by='Coefficient', ascending=False)\n",
        "\n",
        "# Plot the coefficients\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Coefficient', y='Column Name', data=coef_df)\n",
        "plt.title('Model Coefficients')\n",
        "plt.xlabel('Coefficient Value')\n",
        "plt.ylabel('Column Name')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MT_AqL9AWSWP"
      },
      "source": [
        "- すでにローンを持っていたり、起業家,自営業などの職業の人が成約後、預金金額（売上の）多い傾向にあることがわかった。\n",
        "- 起業家、自営業の成約率は高くない\n",
        "- Retired は成約率は高いが売上はあまり上がらない（成約してもそこまで預金しない）ことがわかった。\n",
        "- 家政婦や無職の人は成約を行っても預金が少ない（売上が低い）ことがわかった。\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TTHYN6l_Cwdc"
      },
      "source": [
        "### 高度な分析の実装（決定木＆XG_Boost を実装）→Excelで実装できないため講座の最後におみせする\n",
        "高度な分析を行い、成約に影響力の高い特徴を調べる"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 605
        },
        "id": "7yqteruBznMh",
        "outputId": "1b9bf211-7ac6-4967-8ac6-4d8fda11ef61"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy: 0.6516753270023293\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1500x1000 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# 決定木\n",
        "\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# データの用意\n",
        "X = mldata.drop(['成約の有無','売上'], axis=1)\n",
        "y = mldata['成約の有無']\n",
        "\n",
        "# モデルの宣言\n",
        "model = DecisionTreeClassifier(max_depth=7,min_samples_split=842)\n",
        "\n",
        "# モデルの学習\n",
        "model.fit(X, y)\n",
        "\n",
        "# モデルの予測\n",
        "y_pred = model.predict(X)\n",
        "\n",
        "# モデルの評価\n",
        "accuracy = accuracy_score(y, y_pred)\n",
        "print('Accuracy:', accuracy)\n",
        "\n",
        "# 決定木の可視化\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.tree import plot_tree\n",
        "\n",
        "plt.figure(figsize=(15, 10))\n",
        "plot_tree(model, feature_names=X.columns, class_names=['no', 'yes'], fontsize=10, filled=True)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zabRoa-31P0l",
        "outputId": "4031061a-024a-4291-df33-9ff4e68627fa"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Collecting optuna\n",
            "  Downloading optuna-3.6.1-py3-none-any.whl (380 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m380.1/380.1 kB\u001b[0m \u001b[31m4.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting alembic>=1.5.0 (from optuna)\n",
            "  Downloading alembic-1.13.1-py3-none-any.whl (233 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m233.4/233.4 kB\u001b[0m \u001b[31m10.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting colorlog (from optuna)\n",
            "  Downloading colorlog-6.8.2-py3-none-any.whl (11 kB)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from optuna) (1.25.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (24.0)\n",
            "Requirement already satisfied: sqlalchemy>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (2.0.29)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from optuna) (4.66.2)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from optuna) (6.0.1)\n",
            "Collecting Mako (from alembic>=1.5.0->optuna)\n",
            "  Downloading Mako-1.3.3-py3-none-any.whl (78 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m78.8/78.8 kB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna) (4.11.0)\n",
            "Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy>=1.3.0->optuna) (3.0.3)\n",
            "Requirement already satisfied: MarkupSafe>=0.9.2 in /usr/local/lib/python3.10/dist-packages (from Mako->alembic>=1.5.0->optuna) (2.1.5)\n",
            "Installing collected packages: Mako, colorlog, alembic, optuna\n",
            "Successfully installed Mako-1.3.3 alembic-1.13.1 colorlog-6.8.2 optuna-3.6.1\n"
          ]
        }
      ],
      "source": [
        "!pip install optuna"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5jVqanxD1G39",
        "outputId": "71714989-bce1-4a1c-958b-c0a003a96a76"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[I 2024-04-12 01:25:54,588] A new study created in memory with name: no-name-8c8f9ac9-7f8a-4ac8-bc2d-6e45890a932c\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:25:57,449] Trial 0 finished with value: 0.10553664217882097 and parameters: {'n_estimators': 55, 'gamma': 1.0796799191483775, 'max_depth': 28}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:25:58,531] Trial 1 finished with value: 0.3297796093889984 and parameters: {'n_estimators': 11, 'gamma': 9.48990367707886, 'max_depth': 11}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:25:59,241] Trial 2 finished with value: 0.1485396882279162 and parameters: {'n_estimators': 32, 'gamma': 1.4189347178096783, 'max_depth': 32}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:01,280] Trial 3 finished with value: 0.356387744131876 and parameters: {'n_estimators': 79, 'gamma': 42.724356689344035, 'max_depth': 46}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:02,108] Trial 4 finished with value: 0.33560293854148004 and parameters: {'n_estimators': 23, 'gamma': 12.26705363492341, 'max_depth': 25}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:03,038] Trial 5 finished with value: 0.35558143701845546 and parameters: {'n_estimators': 44, 'gamma': 50.93921107305425, 'max_depth': 28}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:04,231] Trial 6 finished with value: 0.3573732306038344 and parameters: {'n_estimators': 63, 'gamma': 49.72950212780968, 'max_depth': 43}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:04,372] Trial 7 finished with value: 0.2805052857910769 and parameters: {'n_estimators': 56, 'gamma': 3.5812100118211943, 'max_depth': 50}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:04,542] Trial 8 finished with value: 0.34384518903422323 and parameters: {'n_estimators': 96, 'gamma': 16.445511226050986, 'max_depth': 23}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:04,669] Trial 9 finished with value: 0.3337215552768321 and parameters: {'n_estimators': 48, 'gamma': 11.670211230621309, 'max_depth': 39}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:04,861] Trial 10 finished with value: 0.31786418204622824 and parameters: {'n_estimators': 74, 'gamma': 1.5069542488376422, 'max_depth': 4}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:05,078] Trial 11 finished with value: 0.10688048736785527 and parameters: {'n_estimators': 34, 'gamma': 1.0433125541442698, 'max_depth': 34}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:05,295] Trial 12 finished with value: 0.1074180254434689 and parameters: {'n_estimators': 34, 'gamma': 1.04709367526484, 'max_depth': 35}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:05,469] Trial 13 finished with value: 0.27056083139222364 and parameters: {'n_estimators': 64, 'gamma': 3.2169788667553365, 'max_depth': 18}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:05,630] Trial 14 finished with value: 0.2746819566385952 and parameters: {'n_estimators': 40, 'gamma': 3.1301558093604487, 'max_depth': 17}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:05,789] Trial 15 finished with value: 0.19763483246729974 and parameters: {'n_estimators': 13, 'gamma': 1.9745185114333867, 'max_depth': 33}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:05,934] Trial 16 finished with value: 0.3024547572119691 and parameters: {'n_estimators': 26, 'gamma': 4.435148627028425, 'max_depth': 37}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:06,091] Trial 17 finished with value: 0.31186167353520877 and parameters: {'n_estimators': 52, 'gamma': 5.698412048255169, 'max_depth': 19}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:06,345] Trial 18 finished with value: 0.10965776742519262 and parameters: {'n_estimators': 82, 'gamma': 1.0384768581412989, 'max_depth': 29}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:06,496] Trial 19 finished with value: 0.34805590395986385 and parameters: {'n_estimators': 64, 'gamma': 25.030791724423278, 'max_depth': 42}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:06,679] Trial 20 finished with value: 0.23974198172370542 and parameters: {'n_estimators': 37, 'gamma': 2.1086998205132086, 'max_depth': 12}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:06,914] Trial 21 finished with value: 0.11306217523741269 and parameters: {'n_estimators': 30, 'gamma': 1.0323199459545407, 'max_depth': 35}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:07,084] Trial 22 finished with value: 0.21922594517111627 and parameters: {'n_estimators': 23, 'gamma': 2.199932272176027, 'max_depth': 32}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:08,227] Trial 23 finished with value: 0.3599713313026339 and parameters: {'n_estimators': 39, 'gamma': 89.76765840463712, 'max_depth': 39}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:10,113] Trial 24 finished with value: 0.15086901988890877 and parameters: {'n_estimators': 48, 'gamma': 1.4517147418325125, 'max_depth': 29}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:10,295] Trial 25 finished with value: 0.31822254076330403 and parameters: {'n_estimators': 16, 'gamma': 6.47005318230705, 'max_depth': 23}. Best is trial 0 with value: 0.10553664217882097.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:10,529] Trial 26 finished with value: 0.10526787314101416 and parameters: {'n_estimators': 56, 'gamma': 1.0492301158588035, 'max_depth': 36}. Best is trial 26 with value: 0.10526787314101416.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:10,716] Trial 27 finished with value: 0.23839813653467123 and parameters: {'n_estimators': 56, 'gamma': 2.453247628312689, 'max_depth': 42}. Best is trial 26 with value: 0.10526787314101416.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:10,926] Trial 28 finished with value: 0.16403870274144416 and parameters: {'n_estimators': 71, 'gamma': 1.5644719240034393, 'max_depth': 48}. Best is trial 26 with value: 0.10526787314101416.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:11,132] Trial 29 finished with value: 0.3079197276473751 and parameters: {'n_estimators': 92, 'gamma': 5.6420419047882024, 'max_depth': 26}. Best is trial 26 with value: 0.10526787314101416.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:11,349] Trial 30 finished with value: 0.13456369826196024 and parameters: {'n_estimators': 58, 'gamma': 1.3170949769117952, 'max_depth': 30}. Best is trial 26 with value: 0.10526787314101416.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:11,574] Trial 31 finished with value: 0.10526787314101416 and parameters: {'n_estimators': 34, 'gamma': 1.0494117076966223, 'max_depth': 36}. Best is trial 26 with value: 0.10526787314101416.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:11,754] Trial 32 finished with value: 0.19584303888192078 and parameters: {'n_estimators': 46, 'gamma': 1.8278450157764652, 'max_depth': 38}. Best is trial 26 with value: 0.10526787314101416.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:11,974] Trial 33 finished with value: 0.14638953592546133 and parameters: {'n_estimators': 31, 'gamma': 1.2973063278250145, 'max_depth': 33}. Best is trial 26 with value: 0.10526787314101416.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:12,136] Trial 34 finished with value: 0.24350474825300128 and parameters: {'n_estimators': 18, 'gamma': 2.613918293970717, 'max_depth': 36}. Best is trial 26 with value: 0.10526787314101416.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:12,344] Trial 35 finished with value: 0.12784447231678908 and parameters: {'n_estimators': 40, 'gamma': 1.2151308628543085, 'max_depth': 44}. Best is trial 26 with value: 0.10526787314101416.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:12,557] Trial 36 finished with value: 0.18446514961476435 and parameters: {'n_estimators': 69, 'gamma': 1.7468871632626124, 'max_depth': 31}. Best is trial 26 with value: 0.10526787314101416.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:12,826] Trial 37 finished with value: 0.10598459057516574 and parameters: {'n_estimators': 82, 'gamma': 1.0351318577944497, 'max_depth': 40}. Best is trial 26 with value: 0.10526787314101416.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:13,001] Trial 38 finished with value: 0.3269127396523921 and parameters: {'n_estimators': 85, 'gamma': 8.082930711972068, 'max_depth': 45}. Best is trial 26 with value: 0.10526787314101416.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:13,215] Trial 39 finished with value: 0.285522307830138 and parameters: {'n_estimators': 90, 'gamma': 3.912163444786366, 'max_depth': 40}. Best is trial 26 with value: 0.10526787314101416.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:13,361] Trial 40 finished with value: 0.34474108582691276 and parameters: {'n_estimators': 53, 'gamma': 17.619811799567596, 'max_depth': 24}. Best is trial 26 with value: 0.10526787314101416.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:13,617] Trial 41 finished with value: 0.10410320731051781 and parameters: {'n_estimators': 74, 'gamma': 1.0100551387819243, 'max_depth': 34}. Best is trial 41 with value: 0.10410320731051781.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:13,841] Trial 42 finished with value: 0.16583049632682312 and parameters: {'n_estimators': 78, 'gamma': 1.595263525643434, 'max_depth': 40}. Best is trial 41 with value: 0.10410320731051781.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:14,079] Trial 43 finished with value: 0.12757570327898227 and parameters: {'n_estimators': 76, 'gamma': 1.273304679215708, 'max_depth': 27}. Best is trial 41 with value: 0.10410320731051781.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:14,349] Trial 44 finished with value: 0.10455115570686258 and parameters: {'n_estimators': 86, 'gamma': 1.0171210952825256, 'max_depth': 47}. Best is trial 41 with value: 0.10410320731051781.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:14,582] Trial 45 finished with value: 0.18554022576599172 and parameters: {'n_estimators': 88, 'gamma': 1.753714935220706, 'max_depth': 50}. Best is trial 41 with value: 0.10410320731051781.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:14,794] Trial 46 finished with value: 0.24323597921519446 and parameters: {'n_estimators': 98, 'gamma': 2.6647800583765173, 'max_depth': 48}. Best is trial 41 with value: 0.10410320731051781.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:15,028] Trial 47 finished with value: 0.13716179896075975 and parameters: {'n_estimators': 68, 'gamma': 1.3045367122364546, 'max_depth': 21}. Best is trial 41 with value: 0.10410320731051781.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:15,275] Trial 48 finished with value: 0.13062175237412654 and parameters: {'n_estimators': 60, 'gamma': 1.2079634481182537, 'max_depth': 47}. Best is trial 41 with value: 0.10410320731051781.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:15,431] Trial 49 finished with value: 0.3285253538792331 and parameters: {'n_estimators': 61, 'gamma': 2.0269927020914325, 'max_depth': 3}. Best is trial 41 with value: 0.10410320731051781.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:15,631] Trial 50 finished with value: 0.2755778534312847 and parameters: {'n_estimators': 74, 'gamma': 3.120068336629496, 'max_depth': 36}. Best is trial 41 with value: 0.10410320731051781.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:15,889] Trial 51 finished with value: 0.10069879949829774 and parameters: {'n_estimators': 82, 'gamma': 1.022276344502298, 'max_depth': 41}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:16,164] Trial 52 finished with value: 0.10123633757391148 and parameters: {'n_estimators': 95, 'gamma': 1.0038022958321358, 'max_depth': 43}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:16,414] Trial 53 finished with value: 0.15490055545601145 and parameters: {'n_estimators': 100, 'gamma': 1.4789181365534654, 'max_depth': 44}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:16,691] Trial 54 finished with value: 0.1050886937824762 and parameters: {'n_estimators': 94, 'gamma': 1.0016042295724625, 'max_depth': 42}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:16,959] Trial 55 finished with value: 0.10992653646299944 and parameters: {'n_estimators': 94, 'gamma': 1.0008841216493647, 'max_depth': 42}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:17,192] Trial 56 finished with value: 0.1566923490413904 and parameters: {'n_estimators': 86, 'gamma': 1.528341506275303, 'max_depth': 46}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:17,448] Trial 57 finished with value: 0.13259272531804334 and parameters: {'n_estimators': 82, 'gamma': 1.2117290969427823, 'max_depth': 42}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:17,666] Trial 58 finished with value: 0.22397419817237052 and parameters: {'n_estimators': 93, 'gamma': 2.2763747284235576, 'max_depth': 43}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:17,903] Trial 59 finished with value: 0.17550618168786958 and parameters: {'n_estimators': 96, 'gamma': 1.6990174969324923, 'max_depth': 38}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:18,157] Trial 60 finished with value: 0.13124888012900915 and parameters: {'n_estimators': 88, 'gamma': 1.218575662845741, 'max_depth': 50}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:18,440] Trial 61 finished with value: 0.10455115570686258 and parameters: {'n_estimators': 84, 'gamma': 1.1337310348503558, 'max_depth': 34}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:18,699] Trial 62 finished with value: 0.12139401540942485 and parameters: {'n_estimators': 80, 'gamma': 1.1501422410910391, 'max_depth': 34}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:18,966] Trial 63 finished with value: 0.10078838917756672 and parameters: {'n_estimators': 84, 'gamma': 1.0214564403767867, 'max_depth': 41}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:19,204] Trial 64 finished with value: 0.15660275936212154 and parameters: {'n_estimators': 84, 'gamma': 1.4538459789267724, 'max_depth': 46}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:19,456] Trial 65 finished with value: 0.1964701666368034 and parameters: {'n_estimators': 91, 'gamma': 1.8662321928009011, 'max_depth': 40}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:19,631] Trial 66 finished with value: 0.35459595054649706 and parameters: {'n_estimators': 78, 'gamma': 35.20191211228863, 'max_depth': 41}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:19,876] Trial 67 finished with value: 0.15391506898405305 and parameters: {'n_estimators': 88, 'gamma': 1.417531367498882, 'max_depth': 44}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:20,139] Trial 68 finished with value: 0.12139401540942485 and parameters: {'n_estimators': 95, 'gamma': 1.1504164205074288, 'max_depth': 38}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:21,638] Trial 69 finished with value: 0.14934599534133663 and parameters: {'n_estimators': 98, 'gamma': 1.3817810381778437, 'max_depth': 49}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:23,112] Trial 70 finished with value: 0.10231141372513886 and parameters: {'n_estimators': 74, 'gamma': 1.004177672638135, 'max_depth': 46}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:23,658] Trial 71 finished with value: 0.10625335961297255 and parameters: {'n_estimators': 72, 'gamma': 1.026681494966313, 'max_depth': 45}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:23,916] Trial 72 finished with value: 0.1182583766350116 and parameters: {'n_estimators': 81, 'gamma': 1.1228275042528824, 'max_depth': 47}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:24,155] Trial 73 finished with value: 0.14208923132055185 and parameters: {'n_estimators': 76, 'gamma': 1.3690837171261891, 'max_depth': 43}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:24,901] Trial 74 finished with value: 0.3620318939258197 and parameters: {'n_estimators': 66, 'gamma': 76.30333528845499, 'max_depth': 6}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:27,910] Trial 75 finished with value: 0.18123992116108223 and parameters: {'n_estimators': 86, 'gamma': 1.6583963891140485, 'max_depth': 45}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:29,868] Trial 76 finished with value: 0.10231141372513886 and parameters: {'n_estimators': 90, 'gamma': 1.0041094588436081, 'max_depth': 41}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:32,553] Trial 77 finished with value: 0.20838559397957357 and parameters: {'n_estimators': 84, 'gamma': 2.0010589542142125, 'max_depth': 39}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:38,358] Trial 78 finished with value: 0.12461924386310697 and parameters: {'n_estimators': 75, 'gamma': 1.1668404837262567, 'max_depth': 48}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:40,560] Trial 79 finished with value: 0.13474287762049808 and parameters: {'n_estimators': 79, 'gamma': 1.3146406887938278, 'max_depth': 37}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:43,345] Trial 80 finished with value: 0.1661888550438989 and parameters: {'n_estimators': 89, 'gamma': 1.5549028812521357, 'max_depth': 32}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:43,719] Trial 81 finished with value: 0.10697007704712413 and parameters: {'n_estimators': 92, 'gamma': 1.1024724298231026, 'max_depth': 41}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:45,142] Trial 82 finished with value: 0.1050886937824762 and parameters: {'n_estimators': 86, 'gamma': 1.0015209445095141, 'max_depth': 47}. Best is trial 51 with value: 0.10069879949829774.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:47,455] Trial 83 finished with value: 0.09487547034581612 and parameters: {'n_estimators': 97, 'gamma': 1.0046522590476756, 'max_depth': 41}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:50,552] Trial 84 finished with value: 0.13492205697903603 and parameters: {'n_estimators': 97, 'gamma': 1.2932419562719661, 'max_depth': 34}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:51,262] Trial 85 finished with value: 0.11458519978498471 and parameters: {'n_estimators': 100, 'gamma': 1.1387305112575477, 'max_depth': 43}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:51,424] Trial 86 finished with value: 0.3423221644866511 and parameters: {'n_estimators': 72, 'gamma': 17.55620828338389, 'max_depth': 41}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:51,629] Trial 87 finished with value: 0.332108941049991 and parameters: {'n_estimators': 90, 'gamma': 10.8608315423399, 'max_depth': 44}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:51,866] Trial 88 finished with value: 0.17362479842322165 and parameters: {'n_estimators': 83, 'gamma': 1.636847136846866, 'max_depth': 38}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:52,129] Trial 89 finished with value: 0.12479842322164492 and parameters: {'n_estimators': 87, 'gamma': 1.1377800996630514, 'max_depth': 45}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:52,379] Trial 90 finished with value: 0.15051066117183298 and parameters: {'n_estimators': 92, 'gamma': 1.4411983261179153, 'max_depth': 46}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:52,687] Trial 91 finished with value: 0.1074180254434689 and parameters: {'n_estimators': 94, 'gamma': 1.0093329274736222, 'max_depth': 42}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:52,956] Trial 92 finished with value: 0.12757570327898227 and parameters: {'n_estimators': 90, 'gamma': 1.2734850838140404, 'max_depth': 37}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:53,232] Trial 93 finished with value: 0.10311772083855941 and parameters: {'n_estimators': 94, 'gamma': 1.0099394989049668, 'max_depth': 40}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:53,500] Trial 94 finished with value: 0.11807919727647376 and parameters: {'n_estimators': 96, 'gamma': 1.157813719355549, 'max_depth': 39}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:53,770] Trial 95 finished with value: 0.14432897330227556 and parameters: {'n_estimators': 78, 'gamma': 1.3133200228338346, 'max_depth': 40}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:53,968] Trial 96 finished with value: 0.3407095502598101 and parameters: {'n_estimators': 100, 'gamma': 14.637137725318652, 'max_depth': 35}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:54,231] Trial 97 finished with value: 0.10777638416054469 and parameters: {'n_estimators': 84, 'gamma': 1.0950561686059663, 'max_depth': 28}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:54,460] Trial 98 finished with value: 0.16896613510123637 and parameters: {'n_estimators': 81, 'gamma': 1.5170028515371445, 'max_depth': 31}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:54,687] Trial 99 finished with value: 0.20623544167711882 and parameters: {'n_estimators': 70, 'gamma': 1.9053704342147033, 'max_depth': 43}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:54,947] Trial 100 finished with value: 0.1448665113778893 and parameters: {'n_estimators': 91, 'gamma': 1.263193582530792, 'max_depth': 41}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:55,221] Trial 101 finished with value: 0.1005196201397599 and parameters: {'n_estimators': 94, 'gamma': 1.002422056863379, 'max_depth': 42}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:55,499] Trial 102 finished with value: 0.10858269127396525 and parameters: {'n_estimators': 98, 'gamma': 1.0017696861716026, 'max_depth': 39}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:55,775] Trial 103 finished with value: 0.14710625335961303 and parameters: {'n_estimators': 94, 'gamma': 1.1046988331545946, 'max_depth': 14}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:56,047] Trial 104 finished with value: 0.1257839096936033 and parameters: {'n_estimators': 89, 'gamma': 1.2211151073619844, 'max_depth': 49}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:56,289] Trial 105 finished with value: 0.14468733201935136 and parameters: {'n_estimators': 87, 'gamma': 1.389721908021973, 'max_depth': 44}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:56,561] Trial 106 finished with value: 0.12067729797527327 and parameters: {'n_estimators': 96, 'gamma': 1.1195761028540496, 'max_depth': 46}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:56,756] Trial 107 finished with value: 0.34671205877082956 and parameters: {'n_estimators': 93, 'gamma': 22.5278915019235, 'max_depth': 41}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:56,945] Trial 108 finished with value: 0.3285253538792331 and parameters: {'n_estimators': 85, 'gamma': 9.013350363977429, 'max_depth': 43}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:57,185] Trial 109 finished with value: 0.18016484500985486 and parameters: {'n_estimators': 80, 'gamma': 1.6885805416016817, 'max_depth': 39}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:57,377] Trial 110 finished with value: 0.2979752732485218 and parameters: {'n_estimators': 77, 'gamma': 4.68343206121197, 'max_depth': 37}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:57,655] Trial 111 finished with value: 0.10329690019709725 and parameters: {'n_estimators': 95, 'gamma': 1.0104581767665894, 'max_depth': 42}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:57,970] Trial 112 finished with value: 0.1064325389715105 and parameters: {'n_estimators': 98, 'gamma': 1.089739305596776, 'max_depth': 45}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:58,232] Trial 113 finished with value: 0.13062175237412654 and parameters: {'n_estimators': 92, 'gamma': 1.2088678554703487, 'max_depth': 42}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:58,495] Trial 114 finished with value: 0.10992653646299944 and parameters: {'n_estimators': 89, 'gamma': 1.0008865080855056, 'max_depth': 40}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:58,735] Trial 115 finished with value: 0.14871886758645403 and parameters: {'n_estimators': 74, 'gamma': 1.3909007128198374, 'max_depth': 43}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:59,020] Trial 116 finished with value: 0.12918831750582338 and parameters: {'n_estimators': 94, 'gamma': 1.2271928483392283, 'max_depth': 47}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:59,284] Trial 117 finished with value: 0.10777638416054469 and parameters: {'n_estimators': 83, 'gamma': 1.0941857196055687, 'max_depth': 44}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:59,535] Trial 118 finished with value: 0.1455832288120409 and parameters: {'n_estimators': 91, 'gamma': 1.3437387987434946, 'max_depth': 41}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:26:59,763] Trial 119 finished with value: 0.1613510123633758 and parameters: {'n_estimators': 67, 'gamma': 1.523238042690833, 'max_depth': 49}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:00,051] Trial 120 finished with value: 0.12829242071313385 and parameters: {'n_estimators': 96, 'gamma': 1.1839936160392588, 'max_depth': 40}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:00,341] Trial 121 finished with value: 0.10634294929224153 and parameters: {'n_estimators': 100, 'gamma': 1.0185820558203353, 'max_depth': 42}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:00,617] Trial 122 finished with value: 0.1058054112166279 and parameters: {'n_estimators': 95, 'gamma': 1.0071568317770963, 'max_depth': 42}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:00,915] Trial 123 finished with value: 0.11198709908618532 and parameters: {'n_estimators': 98, 'gamma': 1.1062377969991881, 'max_depth': 44}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:01,198] Trial 124 finished with value: 0.1373409783192976 and parameters: {'n_estimators': 87, 'gamma': 1.2811126021961607, 'max_depth': 38}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:04,100] Trial 125 finished with value: 0.1064325389715105 and parameters: {'n_estimators': 90, 'gamma': 1.089399500044039, 'max_depth': 45}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:04,475] Trial 126 finished with value: 0.12802365167532703 and parameters: {'n_estimators': 93, 'gamma': 1.204694599466418, 'max_depth': 46}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:04,738] Trial 127 finished with value: 0.1484500985486472 and parameters: {'n_estimators': 85, 'gamma': 1.376539409782593, 'max_depth': 36}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:04,974] Trial 128 finished with value: 0.15740906647554198 and parameters: {'n_estimators': 82, 'gamma': 1.4718635718389703, 'max_depth': 41}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:05,275] Trial 129 finished with value: 0.11324135459595053 and parameters: {'n_estimators': 88, 'gamma': 1.0707427254384851, 'max_depth': 39}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:05,561] Trial 130 finished with value: 0.10123633757391148 and parameters: {'n_estimators': 95, 'gamma': 1.0038425851262691, 'max_depth': 48}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:05,841] Trial 131 finished with value: 0.10365525891417304 and parameters: {'n_estimators': 95, 'gamma': 1.0152975121715873, 'max_depth': 48}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:06,139] Trial 132 finished with value: 0.10123633757391148 and parameters: {'n_estimators': 96, 'gamma': 1.003962256478751, 'max_depth': 50}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:06,409] Trial 133 finished with value: 0.12802365167532703 and parameters: {'n_estimators': 97, 'gamma': 1.2046868835451778, 'max_depth': 48}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:06,688] Trial 134 finished with value: 0.10732843576419993 and parameters: {'n_estimators': 95, 'gamma': 1.0759725468707986, 'max_depth': 50}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:06,980] Trial 135 finished with value: 0.10992653646299944 and parameters: {'n_estimators': 99, 'gamma': 1.0007060981748803, 'max_depth': 49}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:07,256] Trial 136 finished with value: 0.13707220928149078 and parameters: {'n_estimators': 92, 'gamma': 1.2807272323685315, 'max_depth': 47}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:07,523] Trial 137 finished with value: 0.12721734456190648 and parameters: {'n_estimators': 97, 'gamma': 1.178583931460502, 'max_depth': 50}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:07,821] Trial 138 finished with value: 0.10266977244221465 and parameters: {'n_estimators': 95, 'gamma': 1.0051144384553639, 'max_depth': 48}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:08,074] Trial 139 finished with value: 0.14692707400107508 and parameters: {'n_estimators': 95, 'gamma': 1.3248333139840842, 'max_depth': 48}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:08,343] Trial 140 finished with value: 0.17452069521591118 and parameters: {'n_estimators': 93, 'gamma': 1.5886251620722047, 'max_depth': 46}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:08,623] Trial 141 finished with value: 0.10876187063250309 and parameters: {'n_estimators': 91, 'gamma': 1.0965424850068157, 'max_depth': 49}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:08,917] Trial 142 finished with value: 0.0995341336678015 and parameters: {'n_estimators': 96, 'gamma': 1.0203668432693611, 'max_depth': 47}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:09,198] Trial 143 finished with value: 0.12605267873141013 and parameters: {'n_estimators': 97, 'gamma': 1.1859887689556792, 'max_depth': 48}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:09,491] Trial 144 finished with value: 0.11243504748252997 and parameters: {'n_estimators': 100, 'gamma': 1.0927019918669838, 'max_depth': 47}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:09,779] Trial 145 finished with value: 0.09998208206414616 and parameters: {'n_estimators': 95, 'gamma': 1.0254975544969274, 'max_depth': 45}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:10,049] Trial 146 finished with value: 0.12918831750582338 and parameters: {'n_estimators': 95, 'gamma': 1.2284135205995343, 'max_depth': 50}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:10,358] Trial 147 finished with value: 0.11055366421788215 and parameters: {'n_estimators': 96, 'gamma': 1.0900566586257823, 'max_depth': 45}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:10,642] Trial 148 finished with value: 0.10661171833004834 and parameters: {'n_estimators': 93, 'gamma': 1.0014569081073337, 'max_depth': 46}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:10,922] Trial 149 finished with value: 0.14477692169862033 and parameters: {'n_estimators': 98, 'gamma': 1.3698978105807775, 'max_depth': 44}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:11,193] Trial 150 finished with value: 0.11503314818132948 and parameters: {'n_estimators': 90, 'gamma': 1.1744963210177972, 'max_depth': 48}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:11,497] Trial 151 finished with value: 0.10141551693244943 and parameters: {'n_estimators': 94, 'gamma': 1.011115290831993, 'max_depth': 43}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:11,786] Trial 152 finished with value: 0.10777638416054469 and parameters: {'n_estimators': 94, 'gamma': 1.093939917996184, 'max_depth': 43}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:12,068] Trial 153 finished with value: 0.10266977244221465 and parameters: {'n_estimators': 98, 'gamma': 1.00660983471098, 'max_depth': 43}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:12,372] Trial 154 finished with value: 0.13115929044974017 and parameters: {'n_estimators': 98, 'gamma': 1.252140394111563, 'max_depth': 42}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:12,647] Trial 155 finished with value: 0.11816878695574273 and parameters: {'n_estimators': 100, 'gamma': 1.1704553746085868, 'max_depth': 43}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:12,886] Trial 156 finished with value: 0.15454219673893566 and parameters: {'n_estimators': 92, 'gamma': 1.414679581470132, 'max_depth': 45}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:13,189] Trial 157 finished with value: 0.0998924923848773 and parameters: {'n_estimators': 96, 'gamma': 1.0125258414287104, 'max_depth': 44}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:13,414] Trial 158 finished with value: 0.31723705429134563 and parameters: {'n_estimators': 97, 'gamma': 6.611645122975273, 'max_depth': 44}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:13,694] Trial 159 finished with value: 0.1050886937824762 and parameters: {'n_estimators': 99, 'gamma': 1.0016672853199802, 'max_depth': 46}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:13,984] Trial 160 finished with value: 0.11691453144597741 and parameters: {'n_estimators': 93, 'gamma': 1.133516498405422, 'max_depth': 40}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:14,260] Trial 161 finished with value: 0.10661171833004834 and parameters: {'n_estimators': 96, 'gamma': 1.0013233730253777, 'max_depth': 43}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:15,727] Trial 162 finished with value: 0.13474287762049808 and parameters: {'n_estimators': 94, 'gamma': 1.2772817006168644, 'max_depth': 42}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:17,612] Trial 163 finished with value: 0.11601863465328799 and parameters: {'n_estimators': 91, 'gamma': 1.1157521690595065, 'max_depth': 41}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:17,797] Trial 164 finished with value: 0.35459595054649706 and parameters: {'n_estimators': 96, 'gamma': 39.04545490944397, 'max_depth': 44}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:18,078] Trial 165 finished with value: 0.10034044078122195 and parameters: {'n_estimators': 89, 'gamma': 1.0021333322091552, 'max_depth': 45}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:18,338] Trial 166 finished with value: 0.12148360508869382 and parameters: {'n_estimators': 89, 'gamma': 1.1721705358443726, 'max_depth': 45}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:18,637] Trial 167 finished with value: 0.10401361763124883 and parameters: {'n_estimators': 91, 'gamma': 1.000992397900244, 'max_depth': 47}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:18,901] Trial 168 finished with value: 0.1373409783192976 and parameters: {'n_estimators': 89, 'gamma': 1.2808746759488525, 'max_depth': 46}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:19,183] Trial 169 finished with value: 0.12228991220211427 and parameters: {'n_estimators': 93, 'gamma': 1.1074321732596328, 'max_depth': 43}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:19,449] Trial 170 finished with value: 0.1537358896255151 and parameters: {'n_estimators': 98, 'gamma': 1.453944639665667, 'max_depth': 45}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:19,749] Trial 171 finished with value: 0.10992653646299944 and parameters: {'n_estimators': 95, 'gamma': 1.0820047896611509, 'max_depth': 41}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:20,032] Trial 172 finished with value: 0.10983694678373046 and parameters: {'n_estimators': 94, 'gamma': 1.0811997797458366, 'max_depth': 42}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:20,296] Trial 173 finished with value: 0.13115929044974017 and parameters: {'n_estimators': 97, 'gamma': 1.2041652657025557, 'max_depth': 44}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:20,575] Trial 174 finished with value: 0.0998924923848773 and parameters: {'n_estimators': 92, 'gamma': 1.0125143801062901, 'max_depth': 40}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:20,857] Trial 175 finished with value: 0.135011646658305 and parameters: {'n_estimators': 92, 'gamma': 1.2967554132464358, 'max_depth': 47}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:21,129] Trial 176 finished with value: 0.1258734993728723 and parameters: {'n_estimators': 89, 'gamma': 1.1561994308038588, 'max_depth': 39}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:21,439] Trial 177 finished with value: 0.10365525891417304 and parameters: {'n_estimators': 87, 'gamma': 1.0150076511534978, 'max_depth': 40}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:21,703] Trial 178 finished with value: 0.10992653646299944 and parameters: {'n_estimators': 52, 'gamma': 1.000664685006807, 'max_depth': 41}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:21,980] Trial 179 finished with value: 0.11736247984232218 and parameters: {'n_estimators': 99, 'gamma': 1.1207084558428206, 'max_depth': 49}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:22,247] Trial 180 finished with value: 0.12838201039240282 and parameters: {'n_estimators': 92, 'gamma': 1.2573058842275513, 'max_depth': 43}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:22,521] Trial 181 finished with value: 0.11530191721913641 and parameters: {'n_estimators': 95, 'gamma': 1.108444368547217, 'max_depth': 40}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:22,828] Trial 182 finished with value: 0.1050886937824762 and parameters: {'n_estimators': 96, 'gamma': 1.001700808294109, 'max_depth': 42}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:23,033] Trial 183 finished with value: 0.11315176491668155 and parameters: {'n_estimators': 10, 'gamma': 1.0005640432630551, 'max_depth': 42}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:23,297] Trial 184 finished with value: 0.1251567819387207 and parameters: {'n_estimators': 94, 'gamma': 1.197682718955403, 'max_depth': 44}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:23,594] Trial 185 finished with value: 0.11073284357641999 and parameters: {'n_estimators': 100, 'gamma': 1.1036206208513024, 'max_depth': 41}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:23,886] Trial 186 finished with value: 0.10965776742519262 and parameters: {'n_estimators': 91, 'gamma': 1.088932025658422, 'max_depth': 45}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:24,074] Trial 187 finished with value: 0.3606880487367855 and parameters: {'n_estimators': 98, 'gamma': 66.04859552481543, 'max_depth': 46}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:24,294] Trial 188 finished with value: 0.148808457265723 and parameters: {'n_estimators': 48, 'gamma': 1.3631790833600683, 'max_depth': 49}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:24,557] Trial 189 finished with value: 0.13124888012900915 and parameters: {'n_estimators': 93, 'gamma': 1.2186167680071842, 'max_depth': 43}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:24,850] Trial 190 finished with value: 0.11306217523741269 and parameters: {'n_estimators': 96, 'gamma': 1.0795866130054708, 'max_depth': 39}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:25,135] Trial 191 finished with value: 0.10992653646299944 and parameters: {'n_estimators': 95, 'gamma': 1.0006277288307286, 'max_depth': 48}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:25,412] Trial 192 finished with value: 0.10266977244221465 and parameters: {'n_estimators': 97, 'gamma': 1.0056546065424803, 'max_depth': 48}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:25,708] Trial 193 finished with value: 0.11861673535208739 and parameters: {'n_estimators': 97, 'gamma': 1.1585796184691262, 'max_depth': 47}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:26,012] Trial 194 finished with value: 0.10983694678373046 and parameters: {'n_estimators': 93, 'gamma': 1.081350349075206, 'max_depth': 50}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:26,285] Trial 195 finished with value: 0.12703816520336852 and parameters: {'n_estimators': 98, 'gamma': 1.1894477086832196, 'max_depth': 44}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:26,551] Trial 196 finished with value: 0.11028489518007523 and parameters: {'n_estimators': 91, 'gamma': 1.077923975462786, 'max_depth': 47}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:26,821] Trial 197 finished with value: 0.1428955384339724 and parameters: {'n_estimators': 95, 'gamma': 1.3022819141008946, 'max_depth': 43}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:27,122] Trial 198 finished with value: 0.10311772083855941 and parameters: {'n_estimators': 99, 'gamma': 1.0097798751457339, 'max_depth': 48}. Best is trial 83 with value: 0.09487547034581612.\n",
            "<ipython-input-105-a60ca129bc7b>:11: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n",
            "  'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
            "[I 2024-04-12 01:27:27,418] Trial 199 finished with value: 0.10858269127396525 and parameters: {'n_estimators': 100, 'gamma': 1.0017993176115394, 'max_depth': 48}. Best is trial 83 with value: 0.09487547034581612.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Best Parameters: {'n_estimators': 97, 'gamma': 1.0046522590476756, 'max_depth': 41}\n"
          ]
        }
      ],
      "source": [
        "# Optuna で探索\n",
        "from sklearn.model_selection import train_test_split #split\n",
        "x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=1)\n",
        "\n",
        "import optuna\n",
        "import xgboost\n",
        "\n",
        "def objective(trial):\n",
        "  params = {\n",
        "    'n_estimators': trial.suggest_int('n_estimators', 10, 100),\n",
        "    'gamma': trial.suggest_loguniform('gamma', 1, 100),\n",
        "    'max_depth': trial.suggest_int('max_depth', 3, 50),\n",
        "  }\n",
        "\n",
        "  model = xgboost.XGBClassifier(**params)\n",
        "  model.fit(X, y)\n",
        "\n",
        "  y_pred = model.predict(X)\n",
        "  accuracy = accuracy_score(y, y_pred)\n",
        "\n",
        "  return 1 - accuracy\n",
        "\n",
        "study = optuna.create_study(direction='minimize')\n",
        "study.optimize(objective, n_trials=200)\n",
        "\n",
        "best_params = study.best_params\n",
        "print('Best Parameters:', best_params)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zuTp_Vq11-QF",
        "outputId": "b4040483-ae11-459a-9b10-b9cd8321fa02"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "{'n_estimators': 97, 'gamma': 1.0046522590476756, 'max_depth': 41}\n",
            "Accuracy: 0.9051245296541839\n"
          ]
        }
      ],
      "source": [
        "\n",
        "# 最適なパラメータを適用したモデルの宣言\n",
        "model = xgboost.XGBClassifier(**best_params)\n",
        "print(best_params)\n",
        "\n",
        "# モデルの学習\n",
        "model.fit(X, y)\n",
        "\n",
        "# モデルの予測\n",
        "y_pred = model.predict(X)\n",
        "\n",
        "# モデルの評価\n",
        "accuracy = accuracy_score(y, y_pred)\n",
        "print('Accuracy:', accuracy)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 511
        },
        "id": "5sO1j7AU0ODM",
        "outputId": "af528b43-4940-44fa-f106-45b70e35aba9"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# モデルの影響度\n",
        "\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "importances = model.feature_importances_\n",
        "\n",
        "# Create a list of column names\n",
        "column_names = mldata.drop(columns=['成約の有無','売上']).columns.tolist()\n",
        "\n",
        "# Create a DataFrame with the column names and importances\n",
        "importance_df = pd.DataFrame({'Column Name': column_names, 'Importance': importances})\n",
        "\n",
        "# Sort the DataFrame by the importance values\n",
        "importance_df = importance_df.sort_values(by='Importance', ascending=False)\n",
        "\n",
        "# Plot the importances\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='Importance', y='Column Name', data=importance_df)\n",
        "plt.title('Feature Importances')\n",
        "plt.xlabel('Importance Value')\n",
        "plt.ylabel('Column Name')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dNrmf9aPM_1s"
      },
      "source": [
        "重回帰分析まで一緒に行って、２周目を受講者に演習かなーと思ってます"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h87zNXlCDSCK"
      },
      "source": [
        "# C(conclusion、結論)：分析結果の考察、結論\n",
        "２つの分析結果から結論を導く"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nfljT5nA4kAN"
      },
      "source": [
        "分析から得られた結果：\n",
        "- 売上にはローンの有無が影響を与える\n",
        "- 成約率には持ち家の有無が影響を与える\n",
        "寄り高度な分析を行ったところ持ち家の有無が、成約に大きな影響があることがわかりました。持ち家の有無と成約について確認してみましょう。"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 174
        },
        "id": "uqMZ8sDp995U",
        "outputId": "4cad8c63-66cc-48fe-852c-9b661545f790"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"pd\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"\\u6301\\u3061\\u5bb6\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 0,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1744,\n        \"min\": 0,\n        \"max\": 3346,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2527,\n          3346,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 1,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1683,\n        \"min\": 0,\n        \"max\": 3354,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          3354,\n          1935,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": 2,\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-b7f1aae5-5e53-4fbb-8bd4-e1c9d022004d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>成約の有無</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>持ち家の有無</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2527</td>\n",
              "      <td>3354</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3346</td>\n",
              "      <td>1935</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b7f1aae5-5e53-4fbb-8bd4-e1c9d022004d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b7f1aae5-5e53-4fbb-8bd4-e1c9d022004d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b7f1aae5-5e53-4fbb-8bd4-e1c9d022004d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6673305f-f0b0-46e6-a8de-84a9bab05681\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6673305f-f0b0-46e6-a8de-84a9bab05681')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6673305f-f0b0-46e6-a8de-84a9bab05681 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "成約の有無      0     1  2\n",
              "持ち家の有無               \n",
              "0       2527  3354  0\n",
              "1       3346  1935  0\n",
              "2          0     0  3"
            ]
          },
          "execution_count": 116,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# prompt: 持ち家の有無と成約の有無についてまとめて\n",
        "\n",
        "import pandas as pd\n",
        "# 持ち家の有無と成約の有無のクロス集計\n",
        "pd.crosstab(data['持ち家の有無'], data['成約の有無'])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 223
        },
        "id": "5LlcwrM3-N3X",
        "outputId": "15605f42-972e-4352-90b8-eb0b1800615a"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 11165,\n  \"fields\": [\n    {\n      \"column\": \"\\u5e74\\u9f62\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.160387810458486,\n        \"min\": 10.0,\n        \"max\": 90.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          90.0,\n          40.0,\n          70.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u4ed5\\u4e8b\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"self-employed\",\n          \"unknown\",\n          \"admin.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u7d50\\u5a5a\\u72b6\\u6cc1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"married\",\n          \"single\",\n          \"divorced\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6700\\u7d42\\u5b66\\u6b74\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"tertiary\",\n          \"unknown\",\n          \"secondary\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u9280\\u884c\\u6b8b\\u9ad8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3225.413325946151,\n        \"min\": -6847.0,\n        \"max\": 81204.0,\n        \"num_unique_values\": 3805,\n        \"samples\": [\n          3026.0,\n          1792.0,\n          566.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6301\\u3061\\u5bb6\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u30ed\\u30fc\\u30f3\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.420739541006451,\n        \"min\": 1.0,\n        \"max\": 31.0,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          10.0,\n          27.0,\n          17.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u6210\\u7d04\\u306e\\u6709\\u7121\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u58f2\\u4e0a\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.692649866909434,\n        \"min\": 0.0,\n        \"max\": 812.04,\n        \"num_unique_values\": 2256,\n        \"samples\": [\n          4.36,\n          75.85000000000001,\n          13.09\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u5e74\\u9f62\\u306e10\\u306e\\u4f4d\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.160387810458486,\n        \"min\": 10.0,\n        \"max\": 90.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          90.0,\n          40.0,\n          70.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "data"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-e10a648b-0d61-4d99-bfad-514eaf2f7913\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>年齢</th>\n",
              "      <th>仕事</th>\n",
              "      <th>結婚状況</th>\n",
              "      <th>最終学歴</th>\n",
              "      <th>銀行残高</th>\n",
              "      <th>持ち家の有無</th>\n",
              "      <th>ローンの有無</th>\n",
              "      <th>day</th>\n",
              "      <th>成約の有無</th>\n",
              "      <th>売上</th>\n",
              "      <th>年齢の10の位</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>50.0</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>2343.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>23.43</td>\n",
              "      <td>50.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>50.0</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>45.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.45</td>\n",
              "      <td>50.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>40.0</td>\n",
              "      <td>technician</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>1270.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>12.70</td>\n",
              "      <td>40.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>50.0</td>\n",
              "      <td>services</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>2476.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>24.76</td>\n",
              "      <td>50.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>50.0</td>\n",
              "      <td>admin.</td>\n",
              "      <td>married</td>\n",
              "      <td>tertiary</td>\n",
              "      <td>184.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.84</td>\n",
              "      <td>50.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e10a648b-0d61-4d99-bfad-514eaf2f7913')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e10a648b-0d61-4d99-bfad-514eaf2f7913 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e10a648b-0d61-4d99-bfad-514eaf2f7913');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bcc061aa-5fdd-44e7-8af4-fe4e2547dc93\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bcc061aa-5fdd-44e7-8af4-fe4e2547dc93')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bcc061aa-5fdd-44e7-8af4-fe4e2547dc93 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "     年齢          仕事     結婚状況       最終学歴    銀行残高  持ち家の有無  ローンの有無  day  成約の有無  \\\n",
              "0  50.0      admin.  married  secondary  2343.0       1       0  5.0      1   \n",
              "1  50.0      admin.  married  secondary    45.0       0       0  5.0      1   \n",
              "2  40.0  technician  married  secondary  1270.0       1       0  5.0      1   \n",
              "3  50.0    services  married  secondary  2476.0       1       0  5.0      1   \n",
              "4  50.0      admin.  married   tertiary   184.0       0       0  5.0      1   \n",
              "\n",
              "      売上  年齢の10の位  \n",
              "0  23.43     50.0  \n",
              "1   0.45     50.0  \n",
              "2  12.70     40.0  \n",
              "3  24.76     50.0  \n",
              "4   1.84     50.0  "
            ]
          },
          "execution_count": 120,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# prompt: 年齢列を10代ごとに区切って\n",
        "\n",
        "data['年齢の10の位'] = data['年齢'] // 10 * 10\n",
        "data.head()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "tw106-9--qOQ",
        "outputId": "593819be-d1f2-4647-e562-a9b54a42d878"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAicAAAHACAYAAAB5+ch6AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA6WElEQVR4nO3deVyVZf7/8fdhkdwAUVLPOZgL5obZ0O6WMaPQgLk0RdukZGmNWQ5lqJOlTqPlpKY/q2mywbI00zHbFLWYLHOr1EzKjUzgoIKpHEkBOVy/P3x4vp3AAkS5ydfz8bgfjznXfd33/blOMefdvVy3zRhjBAAAYBF+tV0AAADATxFOAACApRBOAACApRBOAACApRBOAACApRBOAACApRBOAACApRBOAJwTubm5YholANVBOAFQjjFG1113ndasWVPtfVx66aUqKCgo175p0ya1aNFC6enpZ1NitUybNk0ffvih9/M//vEPLVmyxPu5pKTkvNcEoDzCCYByNm/erA0bNigkJESHDh36xeWnAWT//v266aabvJ+dTqcaNWqk999/39u2bNkyXXXVVZo1a9Z5HZPH49HUqVN17Ngxb9u6deu0fv16SdK//vUv9erVSz/++ON5rQtAeYQTAOWkpqZKkn73u98pPDz8F5cBAwZ4tysuLta2bdu8n3NyclRYWKiEhARJUllZmRYsWKCZM2fqq6++0qZNm8ode8KECbLZbBUu33//vU/fzMxM3XLLLWrRooVCQkKUkJCgb7/9tsIxrVu3TsXFxerbt6+3LSQkxBuuBg8erIMHD+q+++6r3pcGoMYQTgD4yMvL02uvvaZly5bJGONdUlJSFBsb69NmjNHHH38sScrKylJmZqZOnjypHTt2yBij3bt3a8eOHdqxY4eOHDmid999Vy1atFBkZKQee+wxjRo1SqWlpT7H37dvn/r166dvv/223OJwOLz9du3apSuvvFJHjx7VW2+9pffee09FRUXq3r27MjMzy41r3rx5GjhwoBo1auRta9q0qQ4fPixJuvjii/Xqq6/qs88+0w8//HAOvlkAlUU4AeBjzJgxuvTSS33OiFRGUlKSYmNjdfDgQUVFRam4uFjXXXedoqKiFBUVpXnz5ulvf/ubRo4cKUkaPny43G63nnjiCZ/97Nu3T926dVPHjh3LLYGBgd5+jzzyiIKDg/Xuu++q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cVatWqUXXnjB+zktLU3du3f3CTA2m00tW7b0ec+dx+PRn//8Z/3www/6+9//rrFjx/rUf+jQoXJnU9544w1JpwJRQECAhg4dqri4OG3YsEFxcXH617/+pR07dujNN9/UvHnzauR7PBPCSR3TeuwHtV1Crfj+6fjaLgEAJJ2av8PpdGrHjh2SpGHDhqlRo0b6/e9/r6lTpyozM1OLFi1SRkaGpFNnVObPny+n06mbbrpJ//znP3XkyBHl5OSodevWuvfeezVx4kQ9//zzOn78uBo2bOg91qFDh3xe67JgwQINHjzYpx5jjHJzc739PB6P7rvvPuXl5emhhx7Sc889p9dff91nm9NzuVgV4QQAgCo4/X6Y044eParQ0FBdcskluvTSSxUbG6snn3xSYWFhkk5N5rZs2TIFBJz6yf3qq6/0yiuvaP369ZKkv/zlL0pMTJQxRm6322e6jEsuuUS7du1Sx44dtX37dn322WdauHChTz3Lli1TSUmJ99LP3//+d2VlZWnlypWaNWuWRo8eXakzJ2lpaXrwwQcrfVlnxYoVat++fc18qT/DCwMAAKiCPXv26JJLLlFBQYGMMcrMzPS+uqVr167av3+/hgwZIknavn27JOnrr79W27ZtJZ16n1xmZqYyMzMlnXpR3sqVK2Wz2XT48GFvqJGkIUOGaMqUKTpw4IBGjBihRx99VKGhod71H330kYYNG6aJEyeqUaNGkqRHH31UaWlpatKkiSTpueeeU1RUlM/Sq1evcuOKi4vTnj179Pzzzys7O1uffvqpcnNztX37dr3yyiv6/vvvtWLFCv3tb3/Tnj17zlkwkQgnAABUyYYNG3TllVdq9OjRaty4sYKDg9W5c2ctWLBAq1atUmxsrKZNmyZJ6tOnj44fP66PP/5YV1xxhSTJz89Pffv29c4Z9lPZ2dk+76gbPny42rRpo5YtW6ply5YaP368srOz9dxzz+mGG27QTTfdpAkTJig5Odm7TaNGjbxnaSRp9OjR2r59u8/y6aefnnFsjz32mAICAjRp0iTNnTtXgYGBGjdunNauXau2bdtq3rx5eumll2rkuzwTLusAAFBJxcXFeuutt7R69Wp17txZqampkqT//Oc/euKJJ7RmzRqFhYXp2muvVZMmTdSkSRO53W5deumlatOmjXc/zz//vPcMyPbt21VYWKjAwECtX79e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qzVr1qhbt2667bbbZIzRf//7X918883emYH/9Kc/qVevXnr44Yclnbrs8qc//Un79u3z7tPtdiskJER79+5V69atve2ZmZnq2rWrmjRposaNG/vUUVRUJKfTqbVr13rb+vTpo5ycHB06dEj169f/xcs6YWFhGjNmjEaMGFHpsQOooto9cQOgNhQVFZklS5aYiIgIc99995l33323XJ/mzZub/Pz8cu0vvfSSSUxMNPv27TPjxo0z11xzjWnbtq3p0aOHeemll8r1z8rKMlOmTDGdO3c2jzzyiJk0aZLp06eP2bp1q4mJiTElJSUmKSnJ3HDDDaawsNC7XePGjU12drb38+TJk83QoUPL7b9x48Zm3bp13s8//vijueKKK0xAQIBZuHBhuf6ff/656dGjR4Xfy8iRI7msA1gAl3WAC8zu3bt1zTXXqEuXLmrYsKGefPJJpaSkaNSoUT798vPzFR0drbZt2+rjjz/2ts+fP18BAQEaPHiwHnjgAQ0fPlwtWrTQjh07NGTIEHk8Hj3wwAOSTp0tGTp0qHr27KkVK1Zo+/btevzxxxUREaENGzbooosu0lVXXaXu3btrxYoVCgoK8m537NgxNWvWzHvchQsX6plnnvGp8ejRoyosLPT2O378uG6++Wa1bNlSHTt21JgxY/TUU0/5bFNUVKQWLVrU2PcJ4Byo7XQE4PwrKSkxW7ZsMddcc423bfr06ebrr7/2fr7kkkt8zlwYY8yJEyeM3W43Dz/8sDl58mS5/c6ePdsMHDiwXPu3335rEhMTzYABA8zu3btNz549zZVXXmm+/vprExERUeFNqy1atPDe7PrBBx+YVq1amdLSUp8+M2bMMG3atPF+HjJkiLnjjjvMiRMnzJAhQyp95mTu3LmmXbt2JiQkxLRo0cJERESYRo0amXbt2pnAwEDTrl07Ex4ebpo0aWLatWtnfvzxx3L7BVBzCCfABern4eT11183kZGR5vjx48aYisOJMacCSkXKysrMoEGDzJgxY3zab731VnP11VebDz74wHz77bfmiiuuMAsWLDANGzY0JSUl5plnnjHdu3cv94OfkpJiBg0aZLKzs01kZKR59dVXfdYvWLDABAUFmSVLlnjbjhw54v3fQ4YMMU6n03Tp0sVnadeuXYWXdTwej5k/f74pKysze/bsMYWFhebw4cNm2bJlxhhjPvroI/Pyyy9XOHYANYtwAlygfh5OjDHm9ttvN++//74x5szh5KdKS0vNd999Z+bPn2969OhhLr/88nJnQX744Qdz7NgxM3HiRNOhQwfzySefGGOMadu2rTl48KD3uJdddpnZs2ePd7sff/zR3HDDDUaSeeihh4wxxnzzzTdm6tSp5oorrjBhYWFmwYIFZ6ytKmdOjDFm4cKF5rrrrjPGGNO3b1+zaNEic/ToURMaGmr27t1rsrOzTcuWLc0HH3zwi98JgLPHDLHABcgYU+7pHEl6/fXX1bNnT5WVlam4uNj75MzPHThwQC1atFCDBg3Up08fLV26VMOHD9emTZt8Ht0tLCzUpEmT1KlTJxUVFWndunW67rrrVFBQoMOHD3snR5s/f76uvPJKvfbaa95tGzRooPT0dB07dkyzZs2SJNWrV09btmzRiBEjtHfvXt1+++2VHvPRo0d18uRJnThxoty4Dh48qEceeUSPP/64JKlbt2769NNPFRIS4p10zel06qWXXtLQoUN14MCBSh8XQNVxQyxwAbr++uu1detWxcbG+rT7+fnp6quv1r59+2S328849XuLFi20c+dONWrUyGfm159r1KiRunfvrokTJ6pJkybKy8tTy5YtdfLkSd1555266KKLJEn+/v565ZVXVFZWVuE+TmvXrp0WLVpUnSHr2Wef1ezZs1VWVqZhw4b5rMvMzNSgQYP0xz/+UZLUs2dP77t/RowYocOHD0uS+vfvr4kTJ3rrBnBuMM8JcAE6/TRMaGjoL4aLuqygoEBBQUEECaAOIpwAAABL4Z4TAABgKYQTAABgKYQTAABgKYQTAABgKYQTAABgKYQTAABgKYQTAABgKYQTAABgKYQTAABgKYQTAABgKf8fE2ei1KHqlckAAAAASUVORK5CYII=",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# prompt: 年齢列と持ち家の有無、成約の有無の関係性を可視化して\n",
        "\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "# 年齢の10の位と持ち家の有無、成約の有無の関係性を可視化\n",
        "for i in range(10, 80, 10):\n",
        "    df_tmp = data[(data['年齢の10の位'] == i)]\n",
        "    pd.crosstab(df_tmp['持ち家の有無'], df_tmp['成約の有無']).plot.bar()\n",
        "    plt.title(f'年齢{i}代')\n",
        "    plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-bdL93Lo_Bz2"
      },
      "source": [
        "20,60,70  代の持ち家のない人が成約をしている。"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YZnJm5sMDwMV"
      },
      "source": [
        "60 代の人の持ち家のない人の詳細を探索する"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0AN8oRJB_ISO",
        "outputId": "c3d65714-a7af-4c82-bbbe-702fd64954fd"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "仕事\n",
              "retired          214\n",
              "management        60\n",
              "admin.            25\n",
              "housemaid         25\n",
              "blue-collar       21\n",
              "technician        20\n",
              "self-employed     14\n",
              "entrepreneur       7\n",
              "unemployed         6\n",
              "unknown            3\n",
              "services           2\n",
              "Name: count, dtype: int64"
            ]
          },
          "execution_count": 130,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# prompt: 60代で持ち家の有無が0の人の職業は\n",
        "\n",
        "data[(data['年齢の10の位'] == 60) & (data['持ち家の有無'] == 0)]['仕事'].value_counts()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "emMge6KU_U8S"
      },
      "source": [
        "Retireしている人が多い。\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GcdIe2qnD363"
      },
      "source": [
        "持ち家が0の人のとローンの有無と売上の関係を可視化"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 464
        },
        "id": "ry8PsH6dBanO",
        "outputId": "7769d958-b7f2-4d85-c91b-cbb8669c3009"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# prompt: 持ち家が0の人のとローンの有無と売上の関係を可視化して\n",
        "\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "loan_no_df = data[data['持ち家の有無'] == 0]\n",
        "pd.crosstab(loan_no_df['ローンの有無'], loan_no_df['成約の有無']).plot.bar()\n",
        "plt.title('持ち家なしのローンの有無と成約の有無')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uCPe3peI_Y4K"
      },
      "source": [
        "## 最終結論\n",
        "・データ分析の結果、持ち家の有無が成約数に大きな影響を与える。中でも60代以降の高齢者で仕事を退職した、持ち家のない人を優先的にアプローチしていく。    \n",
        "・更に、持ち家も、ローンもない人は定期預金口座に対して貯金も多くしてくれることがわかった。  \n",
        "・営業マンによる、力量の差はほとんどないことがわかった。  \n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pEZcKRshD6sf"
      },
      "source": [
        "# 以下はメモ"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Pde0zb0icty1"
      },
      "source": [
        "## 一次結論\n",
        "- retired の年配の人は売上は少ないが成約率は高い。retired がより貯金を視野するくなるキャンペーンを考える\n",
        "- 顧客の母数は少ないが、独身の起業家や自営業にアプローチを行い、より売上の上げやすい営業を行う\n",
        "\n",
        "## 二次分析\n",
        "- retired の預金をしている人とそうでない人の違い、属性の差はなにか\n",
        "- 起業家・自営業の結婚してない人の母数や属性はなにか詳細化する\n",
        "- 預金できる余裕のある人の属性を探す\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BwNQFUiN-ijt"
      },
      "source": [
        "### 職業別分析\n",
        "分析内容：\n",
        "データセットの職業  \n",
        "職業別の年齢、中央値年齢がもっとも高いのが退職者・低いのが学生であっているかどうか  \n",
        "職業別残高口座残高が多いのは退職者と経営者？  \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sBwiotZC_WXC"
      },
      "outputs": [],
      "source": [
        "data.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "S9XQWsvj_hJZ"
      },
      "outputs": [],
      "source": [
        "# 箱ひげ図で仕事ごとの年齢の分布を確認する\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Create a figure and axes\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "# Create a boxplot for each job title\n",
        "sns.boxplot(x=\"仕事\", y=\"年齢\", data=data, ax=ax)\n",
        "\n",
        "# Set the title and labels\n",
        "ax.set_title(\"Age distribution by job title\")\n",
        "ax.set_xlabel(\"Job title\")\n",
        "ax.set_ylabel(\"Age\")\n",
        "\n",
        "# Rotate the x-axis labels for better readability\n",
        "ax.tick_params(axis=\"x\", rotation=45)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_N9-rTpk_3bo"
      },
      "outputs": [],
      "source": [
        "# prompt: 仕事ごとの銀行残高が比較できるグラフを書いて。balanceの最大値を25にしてください。\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "# Create a figure and axes\n",
        "fig, ax = plt.subplots()\n",
        "# Create a boxplot for each job title\n",
        "sns.boxplot(x=\"仕事\", y=\"銀行残高\", data=data, ax=ax)\n",
        "\n",
        "# Set the title and labels\n",
        "ax.set_title(\"Bank balance distribution by job title\")\n",
        "ax.set_xlabel(\"Job title\")\n",
        "ax.set_ylabel(\"Bank balance\")\n",
        "\n",
        "# Set the maximum value for the y-axis\n",
        "ax.set_ylim(top=25000)\n",
        "\n",
        "# Rotate the x-axis labels for better readability\n",
        "ax.tick_params(axis=\"x\", rotation=45)\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "F5AkEjLaAjhP"
      },
      "outputs": [],
      "source": [
        "# prompt: 仕事ごとの銀行残高の統計指標\n",
        "\n",
        "data.groupby(\"仕事\")[\"銀行残高\"].describe()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AY3ZgwWHMzlv"
      },
      "source": [
        "職業別分析結果：\n",
        "職業数： このデータセットでは、管理職がより多い。\n",
        "職業別年齢： 予想通り、中央値年齢が最も高いのは退職者であり、最も低いのは学生である。\n",
        "職業別バランス： 口座残高が最も多いのは経営者と退職者。"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QxR5xlLRzgo7"
      },
      "outputs": [],
      "source": [
        "# !pip install japanize_matplotlib\n",
        "# sns.set(font=\"IPAexGothic\")\n",
        "# import japanize_matplotlib"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FVZgCTV0-4Bg"
      },
      "outputs": [],
      "source": [
        "# # 数値データのみを抽出\n",
        "# numerical_data = data.select_dtypes(include=['int64', 'float64'])\n",
        "\n",
        "# # 相関分析の実行\n",
        "# correlation_matrix = numerical_data.corr()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QM_mcbn2-39-"
      },
      "outputs": [],
      "source": [
        "# print(correlation_matrix)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "brxezUmR_lV3"
      },
      "outputs": [],
      "source": [
        "# !pip install japanize-matplotlib"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hfar_LbL_oqx"
      },
      "outputs": [],
      "source": [
        "# import japanize_matplotlib"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "65e28eUJ-32I"
      },
      "outputs": [],
      "source": [
        "# plt.figure(figsize=(12, 8))\n",
        "# sns.heatmap(correlation_matrix.iloc[:20, :20], annot=True);"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Rug3gslS__CI"
      },
      "outputs": [],
      "source": [
        "# data.drop(['month','客へ最後に連絡した際の連絡手段','連絡で接触した時間（秒数'], axis=1, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D2f4zorJgvt9"
      },
      "outputs": [],
      "source": [
        "# #ワンホットエンコーディング\n",
        "# data = pd.get_dummies(data, drop_first=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "q8NtQr--hEUy"
      },
      "outputs": [],
      "source": [
        "# data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XTYnJWBBAZHR"
      },
      "outputs": [],
      "source": [
        "# # 相関分析の実行\n",
        "# correlation_matrix = data.corr()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GWVhTTSj9xLD"
      },
      "outputs": [],
      "source": [
        "# plt.figure(figsize=(12, 8))\n",
        "# sns.heatmap(correlation_matrix.iloc[:20, :20], annot=True);"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-jQdF74FAUzv"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IsaPEnqddyU7"
      },
      "source": [
        "## データ分析を行い、影響度合いを調べる\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "E5TxPqNI56s0"
      },
      "outputs": [],
      "source": [
        "\n",
        "data = pd.read_excel('/content/bankdata-analyticsdata.xlsx')\n",
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9lzaQVQj-HMQ"
      },
      "outputs": [],
      "source": [
        "# prompt: 数値データだけを使用して相関分析を行ってください。結果をデータフレームに変換してください。\n",
        "\n",
        "import pandas as pd\n",
        "\n",
        "# 数値データのみを抽出\n",
        "numerical_data = data.select_dtypes(include=['int64', 'float64'])\n",
        "\n",
        "# 相関分析の実行\n",
        "correlation_matrix = numerical_data.corr()\n",
        "\n",
        "# データフレームに変換\n",
        "correlation_df = pd.DataFrame(correlation_matrix)\n",
        "\n",
        "# 相関分析の結果を表示\n",
        "print(correlation_df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jVHnWtwj-Ws8"
      },
      "outputs": [],
      "source": [
        "correlation_df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qhCfUmKxkVG6"
      },
      "source": [
        "## 目的：営業支援\n",
        "業務支援を行いたい。成約と売上に影響を与える要因の解明である。\n",
        "大きく２軸で分析を行う  \n",
        "**より多くの売上を上げるための分析を行う**  \n",
        "- 顧客属性による成約率の要因をみる  \n",
        "- 営業マンの力量による成約率の要因をみる  \n",
        "\n",
        "本来、実務であれば両方の要因を考慮し分析を行うが本日は別々のタスクとして分析を行っていく。\n",
        "\n",
        "### 前提となるデータと課題設定\n",
        "ある銀行で定期預金加入のキャンペーンがあります。\n",
        "データは過去１ヶ月分のキャンペーンへの営業データ\n",
        "データはお客様情報と営業が成功したか否か、営業を行った営業マンと成約した際の売上のデータとなっている。\n",
        "営業を行うには限りがあるため、データ分析を行い、効率的に営業が出来るよう支援を行いたい。\n",
        "\n",
        "\n",
        "## 講座の流れ\n",
        "データ分析の流れを抑えながら、1次目標を達成すべく、ハンズオン形式での分析を行う。  \n",
        "一次目標を達成し、次は受講生自身で２次目標を達成し最終結果に近いアウトプットを提出する。\n",
        "\n",
        "### １次目標\n",
        "成約率の高い顧客の傾向を掴む\n",
        "カイ二乗検定の結果、最終学歴も成約率に関連性があることがわかった。\n",
        "最も売上の高い、成約数の高い営業を見つけ出す\n",
        "\n",
        "手順１\n",
        "データの概要を理解する。様々な可視化を行い、データの傾向、概要理解する。\n",
        "- 欠損値の確認、データの大きさの確認\n",
        "- 無関係な列を削除し、欠損値や不正な値を処理し、カテゴリ列をダミー変数に変換します(データ処理)\n",
        "- 機械学習技術を使用して、マーケティング キャンペーンの結果を予測し、キャンペーンの成功に影響を与える要因を見つけます。（検証・統計分析）\n",
        "\n",
        "手順2\n",
        "成約数と他の列の関係を確認し、仮説建てを行う。\n",
        "\n",
        "\n",
        "### ２次目標\n",
        "具体的にいくつの年齢が最も成約率が高いのか探索する  \n",
        "銀行残高はいくら以上が良いのかを見る\n",
        "\n",
        "\n",
        "### 得られる結果（最終結果）\n",
        "分析の主な結果は、今後のマーケティング・キャンペーンに対する推奨事項である：\n",
        "\n",
        "顧客の口座残高は、キャンペーンの結果に大きな影響を与える。口座残高が1490ドル以上の人は定期預金に加入する可能性が高いので、今後はそのような顧客を対象にする。\n",
        "顧客の年齢もキャンペーンの結果に影響する。今後のキャンペーンでは、30歳以下と50歳以上の顧客に集中的にアプローチすべきである。\n",
        "キャンペーン中の顧客との接触回数も非常に重要である。顧客との接触回数は4回を超えるべきではありません。\n",
        "営業マンによって成約の差はないと言える。\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "c6cK3M-gkVlh"
      },
      "outputs": [],
      "source": [
        "pip freeze > requirements.txt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DDf1CLlDRFDo"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [
        "ugUuE1cvO-aK",
        "DDcQbq2nPnmQ",
        "V2blV4fdVRUy",
        "uGCbGFIjXMtP",
        "wFIFtr1RMeP_",
        "TltBrCAalcT8",
        "7JvK9ZKCsg1t",
        "_RDKkpSmGOwx",
        "xVaZvzUHcmWp",
        "blVPAMhEC4aM",
        "h87zNXlCDSCK",
        "pEZcKRshD6sf",
        "BwNQFUiN-ijt",
        "IsaPEnqddyU7",
        "qhCfUmKxkVG6"
      ],
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
